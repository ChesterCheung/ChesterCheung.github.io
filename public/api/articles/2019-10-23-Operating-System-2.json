{"title":"Operating System 2","uid":"d64204ea7010a8dff7ca1f949f9be51e","slug":"2019-10-23-Operating-System-2","date":"2019-10-23T10:00:00.000Z","updated":"2021-10-07T09:39:09.663Z","comments":true,"path":"api/articles/2019-10-23-Operating-System-2.json","keywords":null,"cover":"http://csuzhang.info/photos/OS-2.png","content":"<h2 id=\"一、进程的定义、组成、组织、特征\"><a href=\"#一、进程的定义、组成、组织、特征\" class=\"headerlink\" title=\"一、进程的定义、组成、组织、特征\"></a>一、进程的定义、组成、组织、特征</h2><h4 id=\"进程的定义\"><a href=\"#进程的定义\" class=\"headerlink\" title=\"进程的定义\"></a>进程的定义</h4><ol>\n<li><p>进程是程序的一次执行过程</p>\n</li>\n<li><p>进程是具有独立功能的程序在数据集合上运行的过程，<strong>是系统进行调度和资源分配的独立单元</strong></p>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>进程实体 = 程序段 + 数据段 + PCB(进程控制块)</p></blockquote>\n<p><strong>注意区分</strong>：进程和进程实体：进程是动态的，进程实体是静态的</p>\n<p><img src=\"http://csuzhang.info/photos/OS-2.png\" alt=\"OS-2\"></p>\n<h4 id=\"PCB-进程管理块\"><a href=\"#PCB-进程管理块\" class=\"headerlink\" title=\"PCB(进程管理块):\"></a>PCB(进程管理块):</h4><p>为了描述控制进程的运行，系统中存放进程的管理和控制信息的数据结构称为进程控制块（Process Control Block）。它是进程实体的一部分，<strong>1.是操作系统中最重要的记录性数据结构</strong>。它是<strong>2.进程管理和控制的最重要的数据结构</strong>，每一个进程均有一个PCB，在创建进程时，建立PCB，伴随进程运行的全过程，直到进程撤消而撤消。所谓的创建进程和撤销进程，都是指对 PCB 的操作。</p>\n<p>程序段: 存放执行的代码；</p>\n<p>数据段: 存放程序运行过程中处理的各种数据；</p>\n<h4 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question:\"></a>Question:</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>进程控制块的作用是什么？PCB中应包括哪些信息？</p></blockquote>\n<p>进程控制块的作用是：进程控制块用于保存每个进程和资源的相关信息，包括进程标识、空间、运行状态、资源等信息。以便于操作系统管理和控制进程和资源。<br>PCB中应包括：1、进程标识信息：本进程的标识、父进程的标识、进程所属用户的标识。2、处理机状态信息。保存进程的运行现场信息，包括用户可用寄存器的信息；控制和状态寄存器的信息；栈指针。</p>\n<h4 id=\"进程的组织方式\"><a href=\"#进程的组织方式\" class=\"headerlink\" title=\"进程的组织方式\"></a>进程的组织方式</h4><p>是指多个进程之间的组织形式</p>\n<ol>\n<li><p>链接方式：<br>(1)按照进程状态将PCB划分为多个队列<br>(2)OS持有指向各个队列的指针</p>\n</li>\n<li><p>索引方式：<br>(1)根据进程的状态，建立几张索引表<br>(2)OS持有指向各个索引表的指针</p>\n</li>\n</ol>\n<p><strong>一个系统中，进程成百上千，必须选择合适的合适的方式进行有效的管理。</strong></p>\n<h4 id=\"进程的特征\"><a href=\"#进程的特征\" class=\"headerlink\" title=\"进程的特征\"></a>进程的特征</h4><p><img src=\"http://csuzhang.info/photos/OS-4.png\" alt=\"OS-4\"></p>\n<h3 id=\"对这块小结下：\"><a href=\"#对这块小结下：\" class=\"headerlink\" title=\"对这块小结下：\"></a>对这块小结下：</h3><p><img src=\"http://csuzhang.info/photos/OS-5.png\" alt=\"OS-5\"></p>\n<h2 id=\"二、进程的状态与转换\"><a href=\"#二、进程的状态与转换\" class=\"headerlink\" title=\"二、进程的状态与转换\"></a>二、进程的状态与转换</h2><h4 id=\"进程的5种状态\"><a href=\"#进程的5种状态\" class=\"headerlink\" title=\"进程的5种状态\"></a>进程的5种状态</h4><p><strong>3种基本状态：</strong></p>\n<ol>\n<li><p>运行态：占有CPU，并正在运行的进程</p>\n</li>\n<li><p>就绪态：已经分配有运行的资源和条件，可以说：“<strong>万事俱备，只欠CPU</strong>”</p>\n</li>\n<li><p>阻塞态：等待资源的分配，这里不考虑CPU时间的分配，反正暂时不能运行</p>\n</li>\n</ol>\n<p><strong>2种过程中的状态：</strong></p>\n<ol start=\"4\">\n<li><p>创建态：进程正在创建，OS为其分配资源，初始化PCB</p>\n</li>\n<li><p>终止态：进程正在撤销，OS回收其资源，撤销PC（或者是由于bug导致进程无法继续执行，需进行撤销）</p>\n</li>\n</ol>\n<p><img src=\"http://csuzhang.info/photos/OS-6.png\" alt=\"OS-6\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意以下内容:</p></blockquote>\n<ol>\n<li><p>只有就绪态和运行态可以相互转换，其它的都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；</p>\n</li>\n<li><p>而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括CPU 时间，缺少 CPU 时间会从运行态转换为就绪态；</p>\n</li>\n<li><p>进程只能自己阻塞自己，因为只有进程自身才知道何时需要等待某种事件的发生；</p>\n</li>\n</ol>\n<h3 id=\"本章小节：\"><a href=\"#本章小节：\" class=\"headerlink\" title=\"本章小节：\"></a>本章小节：</h3><p><img src=\"http://csuzhang.info/photos/OS-7.png\" alt=\"OS-7\"></p>\n<h4 id=\"Question：进程创建的主要工作是什么？\"><a href=\"#Question：进程创建的主要工作是什么？\" class=\"headerlink\" title=\"$$ Question：进程创建的主要工作是什么？\"></a>$$ Question：进程创建的主要工作是什么？</h4><ol>\n<li>接收进程运行现场初始值，初始优先级、执行程序描述，其它资源等参数。</li>\n<li>请求分配进程描述块PCB空间，得到一个内部数字进程标识。 </li>\n<li>用从父进程传来的参数初始化PCB表。</li>\n<li>产生描述进程空间的数据结构，初始化进程空间，建立程序段，数据段、栈段等。</li>\n<li>用进程运行现场初始值设置处理机现场保护区；造一个进程运行栈帧。</li>\n<li>置好父进程等关系域，同时将进程置成就绪状态。 </li>\n<li>将PCB表挂入就绪队列，等待时机被调度运行</li>\n</ol>\n<h2 id=\"进程控制-即对进程进行转换\"><a href=\"#进程控制-即对进程进行转换\" class=\"headerlink\" title=\"进程控制(即对进程进行转换)\"></a>进程控制(即对进程进行转换)</h2><p>对系统中的进程进行有效管理，<strong>创建、撤销、状态切换</strong>，通过就绪队列和阻塞队列来实现状态切换</p>\n<h4 id=\"如何实现进程切换？\"><a href=\"#如何实现进程切换？\" class=\"headerlink\" title=\"如何实现进程切换？\"></a>如何实现进程切换？</h4><p><strong>原语的特点：</strong></p>\n<ol>\n<li><p>操作原子性、运行时间短、调用频繁</p>\n</li>\n<li><p>运行在核心态，权限内非常大、属于特权指令</p>\n</li>\n<li><p>位于操作系统最底层，最接近硬件的部分</p>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>实现并发性–&gt;产生中断处理(CPU从用户态切换到核心态)–&gt;关中断指令–&gt;原语代码–&gt;开中断指令–&gt;继续中断处理</p></blockquote>\n<p><strong>一气呵成，不可分割</strong></p>\n<p><strong>原语的任务</strong>无外乎3点</p>\n<ol>\n<li><p>更新PCB中的信息，包括进程状态标志、保存运行环境到PCB、从PCB恢复环境等<br>所有进程的控制原语一定修改进程状态标志，抢夺CPU的使用权，必定保存其运行环境，其进程开始运行前必定恢复运行环境</p>\n</li>\n<li><p>将PCB插入合适的队列（就绪、阻塞队列）</p>\n</li>\n<li><p>分配回收合适的资源</p>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>进程的终止</p></blockquote>\n<ol>\n<li><p>从PCB中找到终止进程</p>\n</li>\n<li><p>若程序在运行，立即剥夺CPU，将CPU的时间分配给其他进程</p>\n</li>\n<li><p>终止其所有子进程</p>\n</li>\n<li><p>将该进程的所有资源归还给父进程或OS</p>\n</li>\n<li><p>删除该PCB</p>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>进程的阻塞和唤（状态切换）</p></blockquote>\n<p><strong>阻塞和唤醒原语必须成对使用</strong></p>\n<ol>\n<li><p>阻塞原语：<br>a. 找到阻塞进程对应的PCB<br>b. 保持进程环境，PCB信息修改为“阻塞态”，暂停进程的运行<br>c. 将PCB插入相应事件的等待队列</p>\n</li>\n<li><p>唤醒原语：<br>a. 在事件等待队列中找到PCB<br>b. 将PCB从等待队列中移除，设为“就绪态”<br>c. 将PCB插入就绪队列，等待被CPU调度</p>\n</li>\n</ol>\n<p><strong>进程的切换</strong></p>\n<ol>\n<li><p>将运行环境存入PCB</p>\n</li>\n<li><p>PCB移入相应的队列中</p>\n</li>\n<li><p>选择另一个进程执行，更新其PCB</p>\n</li>\n<li><p>根据PCB恢复新进程的运行环境</p>\n</li>\n</ol>\n","text":"一、进程的定义、组成、组织、特征进程的定义 进程是程序的一次执行过程 进程是具有独立功能的程序在数据集合上运行的过程，是系统进行调度和资源分配的独立单元 进程实体 = 程序段 + 数据段 + PCB(进程控制块) 注意区分：进程和进程实体：进程是动态的，进程实体是静态的 PCB(...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"OS","slug":"OS","count":5,"path":"api/categories/OS.json"}],"tags":[{"name":"OS","slug":"OS","count":7,"path":"api/tags/OS.json"},{"name":"Linux","slug":"Linux","count":4,"path":"api/tags/Linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E7%BB%84%E6%88%90%E3%80%81%E7%BB%84%E7%BB%87%E3%80%81%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">一、进程的定义、组成、组织、特征</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">进程的定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#PCB-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%9D%97\"><span class=\"toc-text\">PCB(进程管理块):</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Question\"><span class=\"toc-text\">Question:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">进程的组织方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">进程的特征</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%BF%99%E5%9D%97%E5%B0%8F%E7%BB%93%E4%B8%8B%EF%BC%9A\"><span class=\"toc-text\">对这块小结下：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E4%B8%8E%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">二、进程的状态与转换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E7%9A%845%E7%A7%8D%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">进程的5种状态</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E8%8A%82%EF%BC%9A\"><span class=\"toc-text\">本章小节：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Question%EF%BC%9A%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E7%9A%84%E4%B8%BB%E8%A6%81%E5%B7%A5%E4%BD%9C%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">$$ Question：进程创建的主要工作是什么？</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6-%E5%8D%B3%E5%AF%B9%E8%BF%9B%E7%A8%8B%E8%BF%9B%E8%A1%8C%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">进程控制(即对进程进行转换)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E5%88%87%E6%8D%A2%EF%BC%9F\"><span class=\"toc-text\">如何实现进程切换？</span></a></li></ol></li></ol></li></ol>","author":{"name":"Csuzhang","slug":"blog-author","avatar":"http://csuzhang.info/about/self.png","link":"https://github.com/zhyChesterCheung","description":"A passionate & singlehood backend developer","socials":{"github":"https://github.com/zhyChesterCheung","twitter":"https://twitter.com/ChesterCheung4","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5689093900","zhihu":"https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9","csdn":"https://blog.csdn.net/weixin_44390145","juejin":"https://juejin.cn/user/1803630845901783","customs":{}}},"mapped":true,"prev_post":{"title":"Operating System 3","uid":"5edc0af96d039407d0a4d714c8979137","slug":"2019-10-24-Operating-System-3","date":"2019-10-24T10:00:00.000Z","updated":"2021-10-07T09:39:29.271Z","comments":true,"path":"api/articles/2019-10-24-Operating-System-3.json","keywords":null,"cover":"http://csuzhang.info/photos/OS-8.png","text":"四、进程通信定义：进程之间的信息交换 进程是资源分配的最小单位，因此，各个进程的内存地址空间相互独立 通常来说，为了保证安全，一个进程不能直接访问另一个的地址空间 三种通信方式: 共享存储、 管道通信、消息传递 共享存储 设置一个共享空间，进程间互斥的进行访问； 分为： 基于数据...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"OS","slug":"OS","count":5,"path":"api/categories/OS.json"}],"tags":[{"name":"OS","slug":"OS","count":7,"path":"api/tags/OS.json"},{"name":"Linux","slug":"Linux","count":4,"path":"api/tags/Linux.json"}],"author":{"name":"Csuzhang","slug":"blog-author","avatar":"http://csuzhang.info/about/self.png","link":"https://github.com/zhyChesterCheung","description":"A passionate & singlehood backend developer","socials":{"github":"https://github.com/zhyChesterCheung","twitter":"https://twitter.com/ChesterCheung4","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5689093900","zhihu":"https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9","csdn":"https://blog.csdn.net/weixin_44390145","juejin":"https://juejin.cn/user/1803630845901783","customs":{}}}},"next_post":{"title":"Operating System 1","uid":"5ef8240d710597f2ae80c2594557b77a","slug":"2019-10-22-Operating-System-1","date":"2019-10-22T10:00:00.000Z","updated":"2021-10-07T09:59:33.616Z","comments":true,"path":"api/articles/2019-10-22-Operating-System-1.json","keywords":null,"cover":"http://csuzhang.info/photos/OS-1.png","text":"OS基本概念、系统调用、中断一、操作系统特征 并发：多个事件在同一时间间隔内同时发生，在宏观上是同时发生的，在微观上是交替发生的； 区分：并行（多个事件在同一时刻同时发生，同一时刻运行多个指令，需要硬件支持：比如多处理器） 共享：系统中的资源被多个并发的进程共同使用，分为互斥共享...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"OS","slug":"OS","count":5,"path":"api/categories/OS.json"}],"tags":[{"name":"OS","slug":"OS","count":7,"path":"api/tags/OS.json"},{"name":"Linux","slug":"Linux","count":4,"path":"api/tags/Linux.json"}],"author":{"name":"Csuzhang","slug":"blog-author","avatar":"http://csuzhang.info/about/self.png","link":"https://github.com/zhyChesterCheung","description":"A passionate & singlehood backend developer","socials":{"github":"https://github.com/zhyChesterCheung","twitter":"https://twitter.com/ChesterCheung4","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5689093900","zhihu":"https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9","csdn":"https://blog.csdn.net/weixin_44390145","juejin":"https://juejin.cn/user/1803630845901783","customs":{}}}}}