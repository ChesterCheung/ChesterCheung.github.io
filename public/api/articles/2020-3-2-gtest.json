{"title":"Gtest单元测试框架","uid":"f12f50cba820b0109abbca457b92e39c","slug":"2020-3-2-gtest","date":"2020-03-02T12:00:00.000Z","updated":"2021-09-20T11:39:21.010Z","comments":true,"path":"api/articles/2020-3-2-gtest.json","keywords":null,"cover":null,"content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>文章中将先介绍单元测试的相关概念，然后引入Google的开源C++单元测试框架Gtest，对C++的各种单元测试场景提供完备的支持，最后通过编译、运行Gtest自带的一个测试样例，介绍如何在Unix/Linux下使用Gtest。</p>\n<h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3><p>说到单元测试，大家应该不会陌生。作为软件开发过程中最底层级别的测试环节，单元测试一般由开发人员自己完成。它的目的是隔离程序部件，并证明这些单个部件满足预期的功能。在静态程序分析、代码检视之后进行单元测试，可以帮助我们在开发过程的早期发现问题。好的测试具备以下特点：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.独立性</p></blockquote>\n<p>一个测试用例应该是独立的，所谓“独立”，即该测试用例的测试结果不受其他测试的影响</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>2.有效的组织架构，清晰的命名。</p></blockquote>\n<p>各个测试用例针对不同的测试对象，而对单个测试对象而言，又可能有多个测试用例对应该对象的多个功能。好的习惯是把这些用例以层次结构的形式组织起来，并使用清晰的命名，使得我们通过阅读用例名称即可明了该用例的功能。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>3.可移植、可复用。</p></blockquote>\n<p>像我们对程序平台性无关的苛刻要求一样，对于优秀的测试，我们也期望做到在不同的操作系统、编译器间进行方便地移植。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>4.当用例失败时，提供尽可能多的有效信息。</p></blockquote>\n<p>毋庸置疑，提示信息越是清晰和全面，越方便我们定位问题、高效地找出程序中的bug。</p>\n<p>如今有不少测试框架帮助我们完成单元测试，像针对C++的有Google Test、CppUnit，针对C的有CUnit，针对Java的有JUnit，这些测试框架为我们实现独立、可移植、可复用、有组织的测试提供了条件，使我们能够专注于编写程序功能相关的测试代码。下面介绍Gtest的使用方法。</p>\n<h3 id=\"Google-C-单元测试框架\"><a href=\"#Google-C-单元测试框架\" class=\"headerlink\" title=\"Google C++单元测试框架\"></a>Google C++单元测试框架</h3><p>Google C++单元测试框架（简称Gtest），可在多个平台上使用（包括Linux, Mac OS X, Windows, Cygwin和Symbian），它提供了丰富的断言、致命和非致命失败判断，能进行值参数化测试、类型参数化测试、“死亡测试”。Gtest是一个开源的项目，目前的代码发行版是1.6.0。</p>\n","text":"引言文章中将先介绍单元测试的相关概念，然后引入Google的开源C++单元测试框架Gtest，对C++的各种单元测试场景提供完备的支持，最后通过编译、运行Gtest自带的一个测试样例，介绍如何在Unix/Linux下使用Gtest。 单元测试说到单元测试，大家应该不会陌生。作为软...","link":"","photos":[],"count_time":{"symbolsCount":905,"symbolsTime":"1 mins."},"categories":[{"name":"Test","slug":"Test","count":4,"path":"api/categories/Test.json"}],"tags":[{"name":"OS","slug":"OS","count":6,"path":"api/tags/OS.json"},{"name":"Test","slug":"Test","count":5,"path":"api/tags/Test.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">单元测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Google-C-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">Google C++单元测试框架</span></a></li></ol>","author":{"name":"Csuzhang","slug":"blog-author","avatar":"http://csuzhang.info/about/self.png","link":"https://github.com/zhyChesterCheung","description":"A passionate & singlehood backend developer","socials":{"github":"https://github.com/zhyChesterCheung","twitter":"https://twitter.com/ChesterCheung4","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5689093900","zhihu":"https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9","csdn":"https://blog.csdn.net/weixin_44390145","juejin":"https://juejin.cn/user/1803630845901783","customs":{}}},"mapped":true,"prev_post":{"title":"6.828 ZhyOS在macOS下的环境配置-2020","uid":"f7e8743372d74f41e88e20899613bd15","slug":"2020-04-4-JOS","date":"2020-04-04T10:00:00.000Z","updated":"2021-09-20T11:38:35.010Z","comments":true,"path":"api/articles/2020-04-4-JOS.json","keywords":null,"cover":null,"text":"6.828 ZhyOS在macOS下的环境配置-2020 本文主要介绍如何在macOS下配置mit 6.828 JOS的实验环境 ​ 实习期做过一些业务之后，最直观的感受是做业务相对来说比较繁琐，每天疲于完成分配的需求，对个人成长来说不是特别大。和翔少一波交流后，还是想回归学校，...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"OS","slug":"OS","count":2,"path":"api/categories/OS.json"}],"tags":[{"name":"OS","slug":"OS","count":6,"path":"api/tags/OS.json"}],"author":{"name":"Csuzhang","slug":"blog-author","avatar":"http://csuzhang.info/about/self.png","link":"https://github.com/zhyChesterCheung","description":"A passionate & singlehood backend developer","socials":{"github":"https://github.com/zhyChesterCheung","twitter":"https://twitter.com/ChesterCheung4","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5689093900","zhihu":"https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9","csdn":"https://blog.csdn.net/weixin_44390145","juejin":"https://juejin.cn/user/1803630845901783","customs":{}}},"feature":true},"next_post":{"title":"python实现常用测试模块","uid":"d24ba787beb7c57b8dde0e5cc960693e","slug":"2020-2-25-pytest","date":"2020-02-25T15:00:00.000Z","updated":"2021-09-20T11:41:13.430Z","comments":true,"path":"api/articles/2020-2-25-pytest.json","keywords":null,"cover":[],"text":"用python实现常用测试模块python AES 加解密模块 Definition： AES：高级加密标准(Advanced Encryption Standard)是最常见的对称加密算法之一，微信小程序就是用合格加密算法。 对称加密算法也就是加密和解密使用相同的密钥，具体的流...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"Test","slug":"Test","count":4,"path":"api/categories/Test.json"}],"tags":[{"name":"OS","slug":"OS","count":6,"path":"api/tags/OS.json"},{"name":"Test","slug":"Test","count":5,"path":"api/tags/Test.json"}],"author":{"name":"Csuzhang","slug":"blog-author","avatar":"http://csuzhang.info/about/self.png","link":"https://github.com/zhyChesterCheung","description":"A passionate & singlehood backend developer","socials":{"github":"https://github.com/zhyChesterCheung","twitter":"https://twitter.com/ChesterCheung4","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5689093900","zhihu":"https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9","csdn":"https://blog.csdn.net/weixin_44390145","juejin":"https://juejin.cn/user/1803630845901783","customs":{}}}}}