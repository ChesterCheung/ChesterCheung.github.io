{"title":"Operating System 1","uid":"5ef8240d710597f2ae80c2594557b77a","slug":"2019-10-22-Operating-System-1","date":"2019-10-22T10:00:00.000Z","updated":"2021-10-07T09:59:33.616Z","comments":true,"path":"api/articles/2019-10-22-Operating-System-1.json","keywords":null,"cover":"http://csuzhang.info/photos/OS-1.png","content":"<h2 id=\"OS基本概念、系统调用、中断\"><a href=\"#OS基本概念、系统调用、中断\" class=\"headerlink\" title=\"OS基本概念、系统调用、中断\"></a>OS基本概念、系统调用、中断</h2><h3 id=\"一、操作系统特征\"><a href=\"#一、操作系统特征\" class=\"headerlink\" title=\"一、操作系统特征\"></a>一、操作系统特征</h3><ol>\n<li>并发：多个事件在同一时间间隔内同时发生，在宏观上是同时发生的，在微观上是交替发生的；</li>\n</ol>\n<p><strong>区分：并行（多个事件在同一时刻同时发生，同一时刻运行多个指令，需要硬件支持：比如多处理器）</strong></p>\n<ol start=\"2\">\n<li>共享：系统中的资源被多个并发的进程共同使用，分为互斥共享和同时共享；</li>\n</ol>\n<p>互斥共享：互斥共享的资源被称为临界资源，即同一时间只允许一个进程访问，需要同步机制来实现</p>\n<p>同时共享：同时共享比如有对硬件资源的访问</p>\n<ol start=\"3\">\n<li>虚拟：将一个物理实体转换为多个逻辑实体，分为时分复用和时分复用；</li>\n</ol>\n<p>时分复用：多进程在同一处理器上并发执行（类似于轮询的方式）</p>\n<p>空分复用：将物理内存抽象为地址空间，每个进程有各自的地址空间</p>\n<ol start=\"4\">\n<li>异步：进程不是一次执行完毕，而是走走停停。</li>\n</ol>\n<h4 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h4><p>试述多道程序设计技术的基本思想。为什么采用多道程序设计技术可以提高资源利用率？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>多批道程序设计技术的<strong>基本思想</strong>是，在主存同时保持多道程序，主机以交替的方式同时处理多道程序。从宏观上看，主机内同时保持和处理若干道已开始运行但尚未结束的程序。从微观上看，某一时刻处理机只运行某道程序。 可以提高资源利用率的原因：由于任何一道作业的运行总是交替地串行使用CPU、外设等资源，即使用一段时间的CPU，然后使用一段时间的I/O设备，由于采用多道程序设计技术，加之对多道程序实施合理的运行调度，则可以实现CPU和I/O设备的高度并行，可以大大提高CPU与外设的利用率。</p></blockquote>\n<p>什么是分时系统？其主要特征是什么？适用于哪些应用？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>分时系统是以多批道程序设计技术为基础的交互式系统，在此系统中，一台计算机与多台终端相连接，用户通过各自的终端和终端命令以交互的方式使用计算机系统。每个用户都感觉到好像是自己在独占计算机系统，而在系统内部则由操作系统以时间片轮转的方式负责协调多个用户分享CPU。 主要特征是：<br><strong>并行性</strong>：系统能协调多个终端用户同时使用计算机系统，能控制多道程序同时运行。<br><strong>共享性</strong>：对资源而言，系统在宏观上使各终端用户共享计算机系统中的各种资源，而在微观上它们则分时使用这些资源。<br><strong>交互性</strong>：人与计算机以交互的方式进行工作。<br><strong>独占性</strong>：使用户感觉到他在独占使用计算机。现在的系统大部分都是分时系统，主要应用于人机交互的方面。</p></blockquote>\n<h3 id=\"二、系统调用\"><a href=\"#二、系统调用\" class=\"headerlink\" title=\"二、系统调用\"></a>二、系统调用</h3><p>Definition: 如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成 。</p>\n<p>即为操作系统的作用，作为用户和操作系统你底层硬件之间的接口，系统调用是操作系统为上层提供接口，包括有<strong>命令接口</strong>和<strong>程序接口</strong></p>\n<p>通过汇编语言可以进行系统调用，而汇编语言又为C语言向上提供了接口；C语言经过封装，又为上层的高级语言提供了接口，最终形成了我们使用的高级计算机语言，比如java、phthon等。<strong>这种系统调用-&gt;汇编语言-&gt;C语言-&gt;高级语言-&gt;应用程序</strong>的模式就是硬件和用户使用的应用程序之间的交互模式，是不是很有意思呢？haha</p>\n<h3 id=\"三、操作系统的体系结构\"><a href=\"#三、操作系统的体系结构\" class=\"headerlink\" title=\"三、操作系统的体系结构\"></a>三、操作系统的体系结构</h3><p><img src=\"http://csuzhang.info/photos/OS-1.png\" alt=\"OS-1\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>通过程序状态寄存器PSW中的某个标记位来标记当前处理器的状态</p></blockquote>\n<p><strong>OS的内核程序是操作系统的管理者，运行在核心态。</strong></p>\n<p>大内核、微内核：大内核相比之下多了系统资源管理部分的功能（不同操作系统，对于内核功能的划分可能不太一样）</p>\n<p>大内核：是将操作系统功能作为一个紧密结合的整体放到内核。由于各模块共享信息，因此有很高的性能。</p>\n<p>微内核：操作系统被划分成小的、定义良好的模块，只有微内核这一个模块运行在内核态，其余模块运行在用户态。<strong>因为需要频繁地在用户态和核心态之间进行切换，所以会有一定的性能损失。</strong></p>\n<h3 id=\"四、中断异常处理\"><a href=\"#四、中断异常处理\" class=\"headerlink\" title=\"四、中断异常处理\"></a>四、中断异常处理</h3><p>Definition：</p>\n<p>中断:是指来自CPU执行指令以外的事件发生后，处理机暂停正在运行的程序，转去执行处理该事件的程序的过程。</p>\n<p>异常:是指源自CPU执行指令内部的事件发生后，处理机暂停正在执行的程序，转去处理该事件的过程。</p>\n<p>区别：广义的中断包括中断和异常，统一称为中断。狭义的中断(外中断，平常说的中断)和异常的区别在于是否与正在执行的指令有关，中断可以屏蔽，而异常不可屏蔽。</p>\n<h4 id=\"中断\"><a href=\"#中断\" class=\"headerlink\" title=\"中断\"></a>中断</h4><p>产生：为了实现多道程序并发执行而引入的技术</p>\n<p>作用：发生中断后，CPU会进入核心态</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>中断是CPU从用户态进入核心态的唯一途径</p></blockquote>\n<p>分类：外中断: 由 CPU 执行指令以外的事件引起，如I/O完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。</p>\n<p>内中断: ①异常: 由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。②陷入: 在用户程序中使用系统调用。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>如何判断内外中断</strong><br>中断信号来自内部还是外部</p></blockquote>\n<h4 id=\"总结中断、异常和系统调用\"><a href=\"#总结中断、异常和系统调用\" class=\"headerlink\" title=\"总结中断、异常和系统调用:\"></a>总结中断、异常和系统调用:</h4><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>源头</th>\n<th>响应方式</th>\n<th>处理机制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>中断(外中断)</td>\n<td>外设</td>\n<td>异步</td>\n<td>持续、对用户应用程序是透明的</td>\n</tr>\n<tr>\n<td>异常(内中断)</td>\n<td>应用程序未知的行为</td>\n<td>同步</td>\n<td>杀死或重新执行这些未知的应用程序指令</td>\n</tr>\n<tr>\n<td>系统调用</td>\n<td>应用程序请求操作系统提供服务</td>\n<td>异步或者同步</td>\n<td>等待和持续</td>\n</tr>\n</tbody></table>\n<h4 id=\"Question-1\"><a href=\"#Question-1\" class=\"headerlink\" title=\"Question\"></a>Question</h4><ol>\n<li>什么是中断向量？其内容是什么？试述中断的处理过程。</li>\n</ol>\n<p><strong>中断向量</strong>：为处理方便，一般为系统中每个中断信号编制一个相应的中断处理程序，并把这些程序的入口地址放在特定的主存单元中。通常将这一片存放中断处理程序入口地址的主存单元称为中断向量。 <strong>中断向量的内容</strong>：对不同的系统，中断向量中的内容也不尽相同。一般每一个中断信号占用连续的两个单元：一个用来存放中断处理程序的入口地址，另一个用来保存在处理中断时CPU应具有的状态。 <strong>中断的处理过程</strong>：一般包括保存现场，分析中断原因，进入相应的中断处理程序，最后重新选择程序运行，恢复现场等过程。</p>\n<ol start=\"2\">\n<li>为什么要把中断分级？如何设定中断的优先级？试述多级中断的处理原则。 (有关中断优先级)</li>\n</ol>\n<p><strong>为什么要把中断分级</strong>：在计算机系统中，不同的中断源可能在同一时刻向CPU发出不同的中断信号，也可能前一中断尚未处理完，紧接着又发生了新的中断。此时，存在谁先被响应和谁先被处理的优先次序问题。为了使系统能及时地响应和处理所发生的紧急中断，根据中断的轻重缓急，对各类中断规定了高低不同的响应级别。 <strong>如何设定中断的优先级</strong>：中断分级的原则是根据中断的轻重缓急来排序，把紧迫程度大致相当的中断源归并在同一级，而把紧迫程度差别较大的中断源放在不同的级别。一般来说，高速设备的中断优先级高，慢速设备的中断优先级低。 <strong>多级中断的处理原则</strong>：当多级中断同时发生时，CPU按照由高到低的顺序响应。高级中断可以打断低级中断处理程序的运行，转而执行高级中断处理程序。当同级中断同时到时，则按位响应。</p>\n","text":"OS基本概念、系统调用、中断一、操作系统特征 并发：多个事件在同一时间间隔内同时发生，在宏观上是同时发生的，在微观上是交替发生的； 区分：并行（多个事件在同一时刻同时发生，同一时刻运行多个指令，需要硬件支持：比如多处理器） 共享：系统中的资源被多个并发的进程共同使用，分为互斥共享...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"OS","slug":"OS","count":5,"path":"api/categories/OS.json"}],"tags":[{"name":"OS","slug":"OS","count":7,"path":"api/tags/OS.json"},{"name":"Linux","slug":"Linux","count":4,"path":"api/tags/Linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#OS%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E3%80%81%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E3%80%81%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">OS基本概念、系统调用、中断</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">一、操作系统特征</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Question\"><span class=\"toc-text\">Question</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">二、系统调用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">三、操作系统的体系结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E4%B8%AD%E6%96%AD%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\"><span class=\"toc-text\">四、中断异常处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">中断</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%E4%B8%AD%E6%96%AD%E3%80%81%E5%BC%82%E5%B8%B8%E5%92%8C%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">总结中断、异常和系统调用:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Question-1\"><span class=\"toc-text\">Question</span></a></li></ol></li></ol></li></ol>","author":{"name":"Csuzhang","slug":"blog-author","avatar":"http://csuzhang.info/about/self.png","link":"https://github.com/zhyChesterCheung","description":"A passionate & singlehood backend developer","socials":{"github":"https://github.com/zhyChesterCheung","twitter":"https://twitter.com/ChesterCheung4","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5689093900","zhihu":"https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9","csdn":"https://blog.csdn.net/weixin_44390145","juejin":"https://juejin.cn/user/1803630845901783","customs":{}}},"mapped":true,"prev_post":{"title":"Operating System 2","uid":"d64204ea7010a8dff7ca1f949f9be51e","slug":"2019-10-23-Operating-System-2","date":"2019-10-23T10:00:00.000Z","updated":"2021-10-07T09:39:09.663Z","comments":true,"path":"api/articles/2019-10-23-Operating-System-2.json","keywords":null,"cover":"http://csuzhang.info/photos/OS-2.png","text":"一、进程的定义、组成、组织、特征进程的定义 进程是程序的一次执行过程 进程是具有独立功能的程序在数据集合上运行的过程，是系统进行调度和资源分配的独立单元 进程实体 = 程序段 + 数据段 + PCB(进程控制块) 注意区分：进程和进程实体：进程是动态的，进程实体是静态的 PCB(...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"OS","slug":"OS","count":5,"path":"api/categories/OS.json"}],"tags":[{"name":"OS","slug":"OS","count":7,"path":"api/tags/OS.json"},{"name":"Linux","slug":"Linux","count":4,"path":"api/tags/Linux.json"}],"author":{"name":"Csuzhang","slug":"blog-author","avatar":"http://csuzhang.info/about/self.png","link":"https://github.com/zhyChesterCheung","description":"A passionate & singlehood backend developer","socials":{"github":"https://github.com/zhyChesterCheung","twitter":"https://twitter.com/ChesterCheung4","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5689093900","zhihu":"https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9","csdn":"https://blog.csdn.net/weixin_44390145","juejin":"https://juejin.cn/user/1803630845901783","customs":{}}}},"next_post":{"title":"深入浅出IO模型","uid":"96e9bdce81e3be8f3d9c5a142492ab30","slug":"2019-10-4-IO-stream","date":"2019-10-04T15:59:00.000Z","updated":"2021-10-07T12:31:58.977Z","comments":true,"path":"api/articles/2019-10-4-IO-stream.json","keywords":null,"cover":"http://csuzhang.info/photos/2019-10-4-1.jpg","text":"前言：每次谈到IO模型，都会牵扯到同步、异步、阻塞、非阻塞这几个词。从词的表面上看，很多人都觉得很容易理解。但是细细一想，却总会发现有点摸不着头脑。下文就结合具体的实例来讲解一下经典的几个IO模型。 IO模型分类：内存IO、磁盘IO、网络IO等，通常的IO指的是后两者 阻塞和非阻...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"OS","slug":"OS","count":5,"path":"api/categories/OS.json"}],"tags":[{"name":"Linux","slug":"Linux","count":4,"path":"api/tags/Linux.json"},{"name":"OS :wq","slug":"OS-wq","count":1,"path":"api/tags/OS-wq.json"},{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"}],"author":{"name":"Csuzhang","slug":"blog-author","avatar":"http://csuzhang.info/about/self.png","link":"https://github.com/zhyChesterCheung","description":"A passionate & singlehood backend developer","socials":{"github":"https://github.com/zhyChesterCheung","twitter":"https://twitter.com/ChesterCheung4","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5689093900","zhihu":"https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9","csdn":"https://blog.csdn.net/weixin_44390145","juejin":"https://juejin.cn/user/1803630845901783","customs":{}}}}}