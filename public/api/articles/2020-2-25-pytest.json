{"title":"python实现常用测试模块","uid":"d24ba787beb7c57b8dde0e5cc960693e","slug":"2020-2-25-pytest","date":"2020-02-25T15:00:00.000Z","updated":"2021-09-20T11:41:13.430Z","comments":true,"path":"api/articles/2020-2-25-pytest.json","keywords":null,"cover":[],"content":"<h2 id=\"用python实现常用测试模块\"><a href=\"#用python实现常用测试模块\" class=\"headerlink\" title=\"用python实现常用测试模块\"></a>用python实现常用测试模块</h2><h4 id=\"python-AES-加解密模块\"><a href=\"#python-AES-加解密模块\" class=\"headerlink\" title=\"python AES 加解密模块\"></a><strong>python AES 加解密模块</strong></h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Definition：</p>\n<p>AES：高级加密标准(Advanced Encryption Standard)是最常见的对称加密算法之一，微信小程序就是用合格加密算法。</p></blockquote>\n<p>对称加密算法也就是加密和解密使用相同的密钥，具体的流程图如下图所示：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-1.png\" alt=\"pytest-1\"></p>\n<p>AES使用分组密码，分组密码也就是将明文分成一组一组的，每组的长度相等，每次加密一组数据，知道将整个明文都加密完成。在AES标准规范中，分组长度只能是128位，也就是说，每个分组16个字节（每个字节8位）。密钥的长度可以使用128位、192位、256位等。</p>\n<p><u>密钥的长度不等，推荐加密的轮数也不相等。</u></p>\n<p><strong>一般我们最常使用的就是AES-128，是密钥的长度为128位，加密轮数位10轮。</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>AES加解密的流程中包括的主要步骤：</p></blockquote>\n<p>明文分组 、字节代换、行位移、列混淆、轮密钥加</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>AES算法代码实现：</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES\n<span class=\"token keyword\">from</span> binascii <span class=\"token keyword\">import</span> b2a_hex<span class=\"token punctuation\">,</span> a2b_hex\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">prpcrypt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  \n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> self<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>MODE_CBC\n\t\t<span class=\"token comment\"># 加密函数，如果 text 不是 16 的倍数【加密文本 text 必须为 16 的倍数!】，那就补足为 16 的 倍数</span>\n    \n\t<span class=\"token keyword\">def</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\ttext <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\"># 创建一个新的 AES 密码</span>\n\t\t<span class=\"token comment\"># key 为对称加密中使用的密钥，mode_CBC 是 AES 五种加密模式中的密码分组链接模式 </span>\n    cryptor <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 这里密钥 key 长度必须为 16(AES-128)、24(AES-192)、或 32(AES-256)Bytes 长</span>\n<span class=\"token comment\">#度.目前 AES-128 足够用 length = 16</span>\n\t\tcount <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">%</span> length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\tadd <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">%</span> length<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\tadd <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\ttext <span class=\"token operator\">=</span> text <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'\\0'</span> <span class=\"token operator\">*</span> add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\"># 真正的加密操作，使用初始化时的密钥加密数据</span>\n\t\tself<span class=\"token punctuation\">.</span>ciphertext <span class=\"token operator\">=</span> cryptor<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 因为 AES 加密时候得到的字符串不一定是 ascii 字符集的，输出到终端或者保存时候可能存</span>\n在问题\n<span class=\"token comment\"># 所以这里统一把加密后的字符串转化为 16 进制字符串 </span>\n\t\t<span class=\"token keyword\">return</span> b2a_hex<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>ciphertext<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 解密后，去掉补足的空格用 strip() 去掉 </span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tcryptor <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n    plain_text <span class=\"token operator\">=</span> cryptor<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>a2b_hex<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># return plain_text.rstrip('\\0')</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>plain_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\npc <span class=\"token operator\">=</span> prpcrypt<span class=\"token punctuation\">(</span><span class=\"token string\">'keyskeyskeyskeys'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 初始化密钥</span>\ne <span class=\"token operator\">=</span> pc<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span><span class=\"token string\">\"0123456789ABCDEF\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对输入明文进行加密 </span>\nd <span class=\"token operator\">=</span> pc<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 解密密文操作</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\ne <span class=\"token operator\">=</span> pc<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span><span class=\"token string\">\"00000000000000000000000000\"</span><span class=\"token punctuation\">)</span>\nd <span class=\"token operator\">=</span> pc<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面我们来看下代码的运行结果：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-2.png\" alt=\"pytest-2\"></p>\n<h4 id=\"python-unittest-单元测试模块\"><a href=\"#python-unittest-单元测试模块\" class=\"headerlink\" title=\"python unittest 单元测试模块\"></a><strong>python unittest 单元测试模块</strong></h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>unittest 是 python 的一个基础常用的单元测试框架，</p></blockquote>\n<p>便于我们编写测试用例以及测试执行。其中中最核心的四个概念是:</p>\n<p>test case</p>\n\n<p>test suite</p>\n\n<p>test runner</p>\n\n<p>test fixture</p>\n\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-3.png\" alt=\"pytest-3\"></p>\n<p><u>unittest 进行单元测试的流程：</u></p>\n<ol>\n<li>写好 TestCase，然后由 TestLoader 加载 TestCase 到 TestSuite</li>\n<li>然后由 TextTestRunner 来运行 TestSuite，运行的结果保存在 TextTestResult 中</li>\n<li>我们通过命令行或者 unittest.main()执行时，main 会调用 TextTestRunner 中的 run 来执行，或者我们可以直接通过 TextTestRunner 来执行用 例。</li>\n</ol>\n<p>一个 class 继承 unittest.TestCase 即是一个 TestCase，其中以 test 开头的方法 在 load 时被加载为一个真正的 TestCase。</p>\n<p>在 TestRunner 中的 verbosity 参数可以控制执行结果的输出，0 是简单报告、1 是一般报告、2 是详细报告。</p>\n<p>下面完成一次基本的 unittest 单元测试：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 准备好待测函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b\n<span class=\"token keyword\">def</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">-</span>b\n<span class=\"token keyword\">def</span> <span class=\"token function\">multi</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">*</span>b\n<span class=\"token keyword\">def</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">/</span>b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后写出待测函数的测试方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> mathfunc <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestMathFunc</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n  <span class=\"token triple-quoted-string string\">\"\"\"Test mathfuc.py\"\"\"</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do something before test.Prepare environment.\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do something after test.Clean up.\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">test_add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token triple-quoted-string string\">\"\"\"Test method add(a, b)\"\"\"</span> \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">)</span>\n\t\tself<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    self<span class=\"token punctuation\">.</span>assertNotEqual<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">test_minus</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token triple-quoted-string string\">\"\"\"Test method minus(a, b)\"\"\"</span> \n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minus\"</span><span class=\"token punctuation\">)</span> \n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> minus<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">test_multi</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token triple-quoted-string string\">\"\"\"Test method multi(a, b)\"\"\"</span> \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"multi\"</span><span class=\"token punctuation\">)</span> \n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> multi<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">test_divide</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token triple-quoted-string string\">\"\"\"Test method divide(a, b)\"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"divide\"</span><span class=\"token punctuation\">)</span>\n\t\tself<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> divide<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> divide<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span> \n  unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上代码已经可以完成一次简单的<strong>单元测试</strong>了，但是还无法按照指定的顺序 来执行测试用例。因此我们这里使用 suite 来控制每个 case 的先后执行顺序：同 时，如果同时有多个测试文件，我们也可以通过 suite 来控制他们进行一起执行。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> test_mathfunc <span class=\"token keyword\">import</span> TestMathFunc \n<span class=\"token keyword\">from</span> HTMLTestRunner <span class=\"token keyword\">import</span> HTMLTestRunner\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\nsuite <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>TestSuite<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> suite<span class=\"token punctuation\">.</span>addTests<span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestLoader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>loadTestsFromTestCase<span class=\"token punctuation\">(</span>TestMathFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UnittestTextReport.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\nrunner <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>TextTestRunner<span class=\"token punctuation\">(</span>stream<span class=\"token operator\">=</span>f<span class=\"token punctuation\">,</span> verbosity<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nrunner<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>suite<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后我们试着运行，可以看到运行结果如下：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-4.png\" alt=\"pytest-4\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果出现有 ok 的记号，则表示本次测试的结果为成功;如果出现 fail，则表 示测试结果出现问题，这时我们就需要寻找问题，看看测试结果问题在哪里。</p></blockquote>\n<h4 id=\"python-assert-断言\"><a href=\"#python-assert-断言\" class=\"headerlink\" title=\"python assert 断言\"></a><strong>python assert 断言</strong></h4><p>对于断言，官方有一段官方的解释:Assert statements are a convenient way toinsert debugging assertions into a program，其作用就是类似于我们 debug 的工具，</p>\n<p>一般的用法是:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">assert</span> condition<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>用来让程序测试这个 condition，如果 condition 为 false，那么 raise 一个AssertionError 出来。逻辑上等同于:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> condition<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">raise</span> AssertionError<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>我们来简单做一个小小的断言测试:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">assert</span> <span class=\"token number\">1</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"以下结果出现断言\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果如下：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-5.png\" alt=\"pytest-5\"></p>\n<h4 id=\"python-pyserial-串口模块\"><a href=\"#python-pyserial-串口模块\" class=\"headerlink\" title=\"python pyserial 串口模块\"></a><strong>python pyserial 串口模块</strong></h4><p>pyserial 模块封装了对串口的访问。在支持的平台上有统一的接口，通过 python属性访问串口设置。支持不同的字节大小、停止位、校验位和流控设置。 </p>\n<p>在串口的配置中，有以下一些比较重要的属性需要我们了解：波特率、数据位、停止位、校验位、字节大小、读写超时设置等。 下面我们来看下对于串口的设置方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> glob\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> serial\n<span class=\"token keyword\">import</span> serial<span class=\"token punctuation\">.</span>tools<span class=\"token punctuation\">.</span>list_ports\n<span class=\"token number\">8</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">serial_ports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token triple-quoted-string string\">\"\"\" Lists serial port names\n       :raises EnvironmentError:\n          On unsupported or unknown platforms\n       :returns:\n          A list of the serial ports available on the system\n\"\"\"</span>\n<span class=\"token comment\"># 如果是 windows 平台的系统，对应的串口号形式 if sys.platform.startswith('win'):</span>\nports <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'COM%s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 如果是 Linux 平台的系统，对应的串口号形式</span>\n<span class=\"token keyword\">elif</span> sys<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> sys<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'cygwin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># this excludes your current terminal \"/dev/tty\"</span>\nports <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">'/dev/tty[A-Za-z]*'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 如果是 OS X 的系统，对应的串口号形式</span>\n<span class=\"token keyword\">elif</span> sys<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'darwin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\nports <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">'/dev/tty.*'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">raise</span> EnvironmentError<span class=\"token punctuation\">(</span><span class=\"token string\">'Unsupported platform'</span><span class=\"token punctuation\">)</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 可以通过 Serial 函数对每一个串口进行控制其操作 for port in ports:</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\ns <span class=\"token operator\">=</span> serial<span class=\"token punctuation\">.</span>Serial<span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>OSError<span class=\"token punctuation\">,</span> serial<span class=\"token punctuation\">.</span>SerialException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">return</span> result\n<span class=\"token comment\"># 这句命令可以在终端打印出所有的串口设备</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>serial<span class=\"token punctuation\">.</span>tools<span class=\"token punctuation\">.</span>list_ports<span class=\"token punctuation\">.</span>comports<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>serial_ports<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面看下我电脑上打印出来的相关串口号，可以看到一共有 3 个，表示的是每个 串口分配到的地址：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-6.png\" alt=\"pytest-6\"></p>\n","text":"用python实现常用测试模块python AES 加解密模块 Definition： AES：高级加密标准(Advanced Encryption Standard)是最常见的对称加密算法之一，微信小程序就是用合格加密算法。 对称加密算法也就是加密和解密使用相同的密钥，具体的流...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"Test","slug":"Test","count":4,"path":"api/categories/Test.json"}],"tags":[{"name":"OS","slug":"OS","count":6,"path":"api/tags/OS.json"},{"name":"Test","slug":"Test","count":5,"path":"api/tags/Test.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8python%E5%AE%9E%E7%8E%B0%E5%B8%B8%E7%94%A8%E6%B5%8B%E8%AF%95%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">用python实现常用测试模块</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#python-AES-%E5%8A%A0%E8%A7%A3%E5%AF%86%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">python AES 加解密模块</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#python-unittest-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">python unittest 单元测试模块</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#python-assert-%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">python assert 断言</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#python-pyserial-%E4%B8%B2%E5%8F%A3%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">python pyserial 串口模块</span></a></li></ol></li></ol></li></ol>","author":{"name":"Csuzhang","slug":"blog-author","avatar":"http://csuzhang.info/about/self.png","link":"https://github.com/zhyChesterCheung","description":"A passionate & singlehood backend developer","socials":{"github":"https://github.com/zhyChesterCheung","twitter":"https://twitter.com/ChesterCheung4","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5689093900","zhihu":"https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9","csdn":"https://blog.csdn.net/weixin_44390145","juejin":"https://juejin.cn/user/1803630845901783","customs":{}}},"mapped":true,"prev_post":{"title":"Gtest单元测试框架","uid":"f12f50cba820b0109abbca457b92e39c","slug":"2020-3-2-gtest","date":"2020-03-02T12:00:00.000Z","updated":"2021-09-20T11:39:21.010Z","comments":true,"path":"api/articles/2020-3-2-gtest.json","keywords":null,"cover":null,"text":"引言文章中将先介绍单元测试的相关概念，然后引入Google的开源C++单元测试框架Gtest，对C++的各种单元测试场景提供完备的支持，最后通过编译、运行Gtest自带的一个测试样例，介绍如何在Unix/Linux下使用Gtest。 单元测试说到单元测试，大家应该不会陌生。作为软...","link":"","photos":[],"count_time":{"symbolsCount":905,"symbolsTime":"1 mins."},"categories":[{"name":"Test","slug":"Test","count":4,"path":"api/categories/Test.json"}],"tags":[{"name":"OS","slug":"OS","count":6,"path":"api/tags/OS.json"},{"name":"Test","slug":"Test","count":5,"path":"api/tags/Test.json"}],"author":{"name":"Csuzhang","slug":"blog-author","avatar":"http://csuzhang.info/about/self.png","link":"https://github.com/zhyChesterCheung","description":"A passionate & singlehood backend developer","socials":{"github":"https://github.com/zhyChesterCheung","twitter":"https://twitter.com/ChesterCheung4","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5689093900","zhihu":"https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9","csdn":"https://blog.csdn.net/weixin_44390145","juejin":"https://juejin.cn/user/1803630845901783","customs":{}}}},"next_post":{"title":"Shell脚本2小时速学","uid":"faf57fc67eb65f85eddb08e39325fc44","slug":"2020-2-21-shell","date":"2020-02-21T13:00:00.000Z","updated":"2021-09-20T11:40:49.898Z","comments":true,"path":"api/articles/2020-2-21-shell.json","keywords":null,"cover":null,"text":"Shell简介Shell 是一个用 C 语言编写的程序，它是用户使用Linux的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。Ken Thompson 的 sh 是第一种...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"Test","slug":"Test","count":4,"path":"api/categories/Test.json"}],"tags":[{"name":"OS","slug":"OS","count":6,"path":"api/tags/OS.json"},{"name":"Test","slug":"Test","count":5,"path":"api/tags/Test.json"},{"name":"shell","slug":"shell","count":1,"path":"api/tags/shell.json"}],"author":{"name":"Csuzhang","slug":"blog-author","avatar":"http://csuzhang.info/about/self.png","link":"https://github.com/zhyChesterCheung","description":"A passionate & singlehood backend developer","socials":{"github":"https://github.com/zhyChesterCheung","twitter":"https://twitter.com/ChesterCheung4","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/5689093900","zhihu":"https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9","csdn":"https://blog.csdn.net/weixin_44390145","juejin":"https://juejin.cn/user/1803630845901783","customs":{}}}}}