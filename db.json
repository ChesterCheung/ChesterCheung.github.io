{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","path":"static/css/404.1a6cd5bd.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.32dfa3b0.css","path":"static/css/about.32dfa3b0.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.0d31776f.css","path":"static/css/app.0d31776f.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.c0d49bd5.css","path":"static/css/archives.c0d49bd5.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","path":"static/css/categories.10e2be12.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.749ad047.css","path":"static/css/page.749ad047.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","path":"static/css/result.10e2be12.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","path":"static/css/tags.10e2be12.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","path":"static/img/default-cover.df7c128c.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.00d640a8.js","path":"static/js/404.00d640a8.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.024aacd1.js","path":"static/js/about.024aacd1.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js","path":"static/js/app.6d2c358d.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.574ac664.js","path":"static/js/archives.574ac664.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.90aa5475.js","path":"static/js/categories.90aa5475.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.dc6146cd.js","path":"static/js/chunk-libs.dc6146cd.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a02618ad.js","path":"static/js/page.a02618ad.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.cebfbaa4.js","path":"static/js/post.cebfbaa4.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.39470350.js","path":"static/js/result.39470350.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.2ad613f5.js","path":"static/js/tags.2ad613f5.js","modified":1,"renderable":1},{"_id":"source/about/WechatCode.jpg","path":"about/WechatCode.jpg","modified":1,"renderable":0},{"_id":"source/about/self.png","path":"about/self.png","modified":1,"renderable":0},{"_id":"source/photos/1.jpg","path":"photos/1.jpg","modified":1,"renderable":0},{"_id":"source/photos/2.jpg","path":"photos/2.jpg","modified":1,"renderable":0},{"_id":"source/photos/2019-08-30.png","path":"photos/2019-08-30.png","modified":1,"renderable":0},{"_id":"source/photos/2019-10-12-1.png","path":"photos/2019-10-12-1.png","modified":1,"renderable":0},{"_id":"source/photos/2019-10-12-2.png","path":"photos/2019-10-12-2.png","modified":1,"renderable":0},{"_id":"source/photos/2019-10-12-3.png","path":"photos/2019-10-12-3.png","modified":1,"renderable":0},{"_id":"source/photos/2019-10-4-1.jpg","path":"photos/2019-10-4-1.jpg","modified":1,"renderable":0},{"_id":"source/photos/2019-10-4-2.jpg","path":"photos/2019-10-4-2.jpg","modified":1,"renderable":0},{"_id":"source/photos/2019-10-4-3.jpg","path":"photos/2019-10-4-3.jpg","modified":1,"renderable":0},{"_id":"source/photos/2019-10-4-4.jpg","path":"photos/2019-10-4-4.jpg","modified":1,"renderable":0},{"_id":"source/photos/2019-10-4-5.jpg","path":"photos/2019-10-4-5.jpg","modified":1,"renderable":0},{"_id":"source/photos/2019-8-23-0.jpg","path":"photos/2019-8-23-0.jpg","modified":1,"renderable":0},{"_id":"source/photos/2019-8-23-1.png","path":"photos/2019-8-23-1.png","modified":1,"renderable":0},{"_id":"source/photos/2019-8-23-10.png","path":"photos/2019-8-23-10.png","modified":1,"renderable":0},{"_id":"source/photos/2019-8-23-11.png","path":"photos/2019-8-23-11.png","modified":1,"renderable":0},{"_id":"source/photos/2019-8-23-12.png","path":"photos/2019-8-23-12.png","modified":1,"renderable":0},{"_id":"source/photos/2019-8-23-13.png","path":"photos/2019-8-23-13.png","modified":1,"renderable":0},{"_id":"source/photos/2019-8-23-14.png","path":"photos/2019-8-23-14.png","modified":1,"renderable":0},{"_id":"source/photos/2019-8-23-2.png","path":"photos/2019-8-23-2.png","modified":1,"renderable":0},{"_id":"source/photos/2019-8-23-3.png","path":"photos/2019-8-23-3.png","modified":1,"renderable":0},{"_id":"source/photos/2019-8-23-4.png","path":"photos/2019-8-23-4.png","modified":1,"renderable":0},{"_id":"source/photos/2019-8-23-5.png","path":"photos/2019-8-23-5.png","modified":1,"renderable":0},{"_id":"source/photos/2019-8-23-6.png","path":"photos/2019-8-23-6.png","modified":1,"renderable":0},{"_id":"source/photos/2019-8-23-7.png","path":"photos/2019-8-23-7.png","modified":1,"renderable":0},{"_id":"source/photos/2019-8-23-8.png","path":"photos/2019-8-23-8.png","modified":1,"renderable":0},{"_id":"source/photos/2019-8-23-9.png","path":"photos/2019-8-23-9.png","modified":1,"renderable":0},{"_id":"source/photos/2019movie1.mp4","path":"photos/2019movie1.mp4","modified":1,"renderable":0},{"_id":"source/photos/2019movie2.mp4","path":"photos/2019movie2.mp4","modified":1,"renderable":0},{"_id":"source/photos/2019movie3.mp4","path":"photos/2019movie3.mp4","modified":1,"renderable":0},{"_id":"source/photos/2019movie4.mp4","path":"photos/2019movie4.mp4","modified":1,"renderable":0},{"_id":"source/photos/2019movie5.mp4","path":"photos/2019movie5.mp4","modified":1,"renderable":0},{"_id":"source/photos/2019movie6.mp4","path":"photos/2019movie6.mp4","modified":1,"renderable":0},{"_id":"source/photos/2019movie7.mp4","path":"photos/2019movie7.mp4","modified":1,"renderable":0},{"_id":"source/photos/2019movie8.mp4","path":"photos/2019movie8.mp4","modified":1,"renderable":0},{"_id":"source/photos/3.jpg","path":"photos/3.jpg","modified":1,"renderable":0},{"_id":"source/photos/4.jpg","path":"photos/4.jpg","modified":1,"renderable":0},{"_id":"source/photos/America1.jpg","path":"photos/America1.jpg","modified":1,"renderable":0},{"_id":"source/photos/America10.jpg","path":"photos/America10.jpg","modified":1,"renderable":0},{"_id":"source/photos/America11.jpg","path":"photos/America11.jpg","modified":1,"renderable":0},{"_id":"source/photos/America12.jpg","path":"photos/America12.jpg","modified":1,"renderable":0},{"_id":"source/photos/America13.jpg","path":"photos/America13.jpg","modified":1,"renderable":0},{"_id":"source/photos/America14.jpg","path":"photos/America14.jpg","modified":1,"renderable":0},{"_id":"source/photos/America2.jpg","path":"photos/America2.jpg","modified":1,"renderable":0},{"_id":"source/photos/America3.jpg","path":"photos/America3.jpg","modified":1,"renderable":0},{"_id":"source/photos/America4.jpg","path":"photos/America4.jpg","modified":1,"renderable":0},{"_id":"source/photos/America5.jpg","path":"photos/America5.jpg","modified":1,"renderable":0},{"_id":"source/photos/America6.jpg","path":"photos/America6.jpg","modified":1,"renderable":0},{"_id":"source/photos/America7.jpg","path":"photos/America7.jpg","modified":1,"renderable":0},{"_id":"source/photos/America8.jpg","path":"photos/America8.jpg","modified":1,"renderable":0},{"_id":"source/photos/America9.jpg","path":"photos/America9.jpg","modified":1,"renderable":0},{"_id":"source/photos/Array.jpg","path":"photos/Array.jpg","modified":1,"renderable":0},{"_id":"source/photos/Chester'blog.png","path":"photos/Chester'blog.png","modified":1,"renderable":0},{"_id":"source/photos/HashMap.png","path":"photos/HashMap.png","modified":1,"renderable":0},{"_id":"source/photos/OS-1.png","path":"photos/OS-1.png","modified":1,"renderable":0},{"_id":"source/photos/OS-10.png","path":"photos/OS-10.png","modified":1,"renderable":0},{"_id":"source/photos/OS-11.png","path":"photos/OS-11.png","modified":1,"renderable":0},{"_id":"source/photos/OS-12.png","path":"photos/OS-12.png","modified":1,"renderable":0},{"_id":"source/photos/OS-2.png","path":"photos/OS-2.png","modified":1,"renderable":0},{"_id":"source/photos/OS-3.png","path":"photos/OS-3.png","modified":1,"renderable":0},{"_id":"source/photos/OS-4.png","path":"photos/OS-4.png","modified":1,"renderable":0},{"_id":"source/photos/OS-5.png","path":"photos/OS-5.png","modified":1,"renderable":0},{"_id":"source/photos/OS-6.png","path":"photos/OS-6.png","modified":1,"renderable":0},{"_id":"source/photos/OS-7.png","path":"photos/OS-7.png","modified":1,"renderable":0},{"_id":"source/photos/OS-8.png","path":"photos/OS-8.png","modified":1,"renderable":0},{"_id":"source/photos/OS-9.png","path":"photos/OS-9.png","modified":1,"renderable":0},{"_id":"source/photos/RBTree1.jpg","path":"photos/RBTree1.jpg","modified":1,"renderable":0},{"_id":"source/photos/RBTree2.jpg","path":"photos/RBTree2.jpg","modified":1,"renderable":0},{"_id":"source/photos/RBTree3.gif","path":"photos/RBTree3.gif","modified":1,"renderable":0},{"_id":"source/photos/RBTree4.gif","path":"photos/RBTree4.gif","modified":1,"renderable":0},{"_id":"source/photos/SaaS1.jpg","path":"photos/SaaS1.jpg","modified":1,"renderable":0},{"_id":"source/photos/SaaS2.jpg","path":"photos/SaaS2.jpg","modified":1,"renderable":0},{"_id":"source/photos/certifi.jpg","path":"photos/certifi.jpg","modified":1,"renderable":0},{"_id":"source/photos/certifi2.jpg","path":"photos/certifi2.jpg","modified":1,"renderable":0},{"_id":"source/photos/company1.jpg","path":"photos/company1.jpg","modified":1,"renderable":0},{"_id":"source/photos/company2.jpg","path":"photos/company2.jpg","modified":1,"renderable":0},{"_id":"source/photos/company3.jpg","path":"photos/company3.jpg","modified":1,"renderable":0},{"_id":"source/photos/company4.jpg","path":"photos/company4.jpg","modified":1,"renderable":0},{"_id":"source/photos/company5.jpg","path":"photos/company5.jpg","modified":1,"renderable":0},{"_id":"source/photos/didi.jpg","path":"photos/didi.jpg","modified":1,"renderable":0},{"_id":"source/photos/friend1.jpg","path":"photos/friend1.jpg","modified":1,"renderable":0},{"_id":"source/photos/friend2.jpg","path":"photos/friend2.jpg","modified":1,"renderable":0},{"_id":"source/photos/friend3.jpg","path":"photos/friend3.jpg","modified":1,"renderable":0},{"_id":"source/photos/friend4.jpg","path":"photos/friend4.jpg","modified":1,"renderable":0},{"_id":"source/photos/friend5.jpg","path":"photos/friend5.jpg","modified":1,"renderable":0},{"_id":"source/photos/friend6.jpg","path":"photos/friend6.jpg","modified":1,"renderable":0},{"_id":"source/photos/friend7.jpg","path":"photos/friend7.jpg","modified":1,"renderable":0},{"_id":"source/photos/horizon2020.jpg","path":"photos/horizon2020.jpg","modified":1,"renderable":0},{"_id":"source/photos/kafka.png","path":"photos/kafka.png","modified":1,"renderable":0},{"_id":"source/photos/kafka1.jpg","path":"photos/kafka1.jpg","modified":1,"renderable":0},{"_id":"source/photos/memcached1.png","path":"photos/memcached1.png","modified":1,"renderable":0},{"_id":"source/photos/missuri.jpg","path":"photos/missuri.jpg","modified":1,"renderable":0},{"_id":"source/photos/pytest-1.png","path":"photos/pytest-1.png","modified":1,"renderable":0},{"_id":"source/photos/pytest-2.png","path":"photos/pytest-2.png","modified":1,"renderable":0},{"_id":"source/photos/pytest-3.png","path":"photos/pytest-3.png","modified":1,"renderable":0},{"_id":"source/photos/pytest-4.png","path":"photos/pytest-4.png","modified":1,"renderable":0},{"_id":"source/photos/pytest-5.png","path":"photos/pytest-5.png","modified":1,"renderable":0},{"_id":"source/photos/pytest-6.png","path":"photos/pytest-6.png","modified":1,"renderable":0},{"_id":"source/photos/self.png","path":"photos/self.png","modified":1,"renderable":0},{"_id":"source/photos/shangtang.png","path":"photos/shangtang.png","modified":1,"renderable":0},{"_id":"source/photos/tcl.jpg","path":"photos/tcl.jpg","modified":1,"renderable":0},{"_id":"source/photos/togaf.jpg","path":"photos/togaf.jpg","modified":1,"renderable":0},{"_id":"source/photos/xiancheng.jpg","path":"photos/xiancheng.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/2020-04-4-JOS.md","hash":"57cf0f3963980ccda430d5430a65b99bac1bf733","modified":1632137915010},{"_id":"source/_posts/2020-1-14-serial-communication.md","hash":"0243618ef544c48b47889733240326a99cf9a2ae","modified":1632137982858},{"_id":"source/_posts/2020-1-20-API-test-learning.md","hash":"22e8e4eeef81f3a243cf3d34b19a63d9682128ed","modified":1632138005890},{"_id":"source/_posts/2020-2-21-shell.md","hash":"4cc2b3f0a1f3ae67684589c02ddfab00ea89099f","modified":1632138049898},{"_id":"source/_posts/2020-2-25-pytest.md","hash":"76f1082fa083351adde6e1f5a9801b4730fe4736","modified":1632138073430},{"_id":"source/_posts/2020-3-2-gtest.md","hash":"79ce09c0bff802d4d81ef78b756ed4c35965c435","modified":1632137961010},{"_id":"source/_posts/2020-5-10-TOGAF.md","hash":"b43937fdea8236096a7ac6f83650d567d1e0eb8f","modified":1632137811946},{"_id":"source/_posts/2020-6-10-SaaS.md","hash":"d7b545073ed699c3a6805f2f14bd7c57e90c1b1f","modified":1632137882906},{"_id":"source/about/index.md","hash":"35418c46540735a21c35ec64925ada2382692e5d","modified":1633596630667},{"_id":"source/photos/1.jpg","hash":"90ecef0ca8f43726496f24faed4ab63d266ef8bb","modified":1632137501674},{"_id":"source/photos/2.jpg","hash":"20a7f53733a4a39c87af60061b897a5feec2ed4b","modified":1632137501674},{"_id":"source/photos/2019-10-4-1.jpg","hash":"e91b0eb1ce9928ebee30b3a46dce8fcbf0e23d74","modified":1632137501682},{"_id":"source/photos/2019-10-4-2.jpg","hash":"aa5fa8d13a5c09909a4fd7502c207191f1310e49","modified":1632137501686},{"_id":"source/photos/2019-10-4-3.jpg","hash":"27bdd60b63f6befeafbc0a79ccf6f6edafcee94b","modified":1632137501686},{"_id":"source/photos/2019-10-4-4.jpg","hash":"02377b6308d9117d90c922c193fc6f62151a6114","modified":1632137501686},{"_id":"source/photos/2019-10-4-5.jpg","hash":"474adfa409aefdc8e36e99868e51e3d8c4bcd8e9","modified":1632137501686},{"_id":"source/photos/2019-8-23-14.png","hash":"ff4b48587feb937e236643ff5455d08fdcefd450","modified":1632137501686},{"_id":"source/photos/2019-8-23-3.png","hash":"0f43f09212191efa85c050c1480ec4fc0652ab62","modified":1632137501686},{"_id":"source/photos/2019-8-23-4.png","hash":"94a6615d6969bdef86035b0d32eb0738cd171517","modified":1632137501686},{"_id":"source/photos/2019-8-23-5.png","hash":"56e5d1dec61cc132e2fc103a152121d04218433e","modified":1632137501686},{"_id":"source/photos/2019-8-23-6.png","hash":"4d6aab5e8630d06d74303c46f3366e7816364987","modified":1632137501686},{"_id":"source/photos/2019-8-23-7.png","hash":"ade26cd43eae6bb20e0e93e6001d4b59ae46697a","modified":1632137501686},{"_id":"source/photos/2019-8-23-8.png","hash":"94ddeb8c20eed546443b46ad93ca4c52a27ec2e7","modified":1632137501686},{"_id":"source/photos/2019-8-23-9.png","hash":"dab9292576fff91124dd86d02f9c8458a5edc966","modified":1632137501686},{"_id":"source/photos/3.jpg","hash":"865426193a247fa4d8cf7c3ab92eb13d76a58844","modified":1632137501826},{"_id":"source/photos/4.jpg","hash":"163d5005787c67e77ae3529dab286996bfcf57b1","modified":1632137501826},{"_id":"source/photos/America8.jpg","hash":"e344cf901d795c0338b4dc1f0b27922f1cf67650","modified":1632137501830},{"_id":"source/photos/Chester'blog.png","hash":"77fdbc481105dec5dbb6fb1a626572910b1320a3","modified":1632137501830},{"_id":"source/photos/HashMap.png","hash":"1f739fb4d3eaf9675349f0f53b8e7b8bf4ff72ef","modified":1632137501830},{"_id":"source/photos/RBTree1.jpg","hash":"be580a147c09352e2d4ffc8ff0f7b6c9c437df58","modified":1632137501838},{"_id":"source/photos/RBTree2.jpg","hash":"2633eb4dd91b9a1d88838993c7f3b67d6beed419","modified":1632137501838},{"_id":"source/photos/SaaS1.jpg","hash":"0a369053947487a1a52bd3a1c312883c72d42990","modified":1632137501838},{"_id":"source/photos/SaaS2.jpg","hash":"f5020c791fbf925a3a91f8af7499cc3ee2f130cb","modified":1632137501838},{"_id":"source/photos/didi.jpg","hash":"9d4c5ab557a897eb6f63bd8868f28eed082dc907","modified":1632137501858},{"_id":"source/photos/pytest-2.png","hash":"20cc5eceeec1b981d01d7b9207195a1389bebb7a","modified":1632137501902},{"_id":"source/photos/pytest-3.png","hash":"bd310a0ecb64287f9fb57d5e91affe8c1c9ce172","modified":1632137501902},{"_id":"source/photos/pytest-5.png","hash":"5568c7d67953910c3d9ab9ad0f03b2f69f71e119","modified":1632137501914},{"_id":"source/photos/pytest-6.png","hash":"bc5b8de948ffd62f5bcbb8052950d30f1cb95eb6","modified":1632137501914},{"_id":"source/photos/shangtang.png","hash":"e77c8a65348ca6094bf353d7caff2002d6da2152","modified":1632137501914},{"_id":"source/photos/2019-10-12-1.png","hash":"5006a3d60afe0ab98802ac50504ad4738683893d","modified":1632137501678},{"_id":"source/photos/2019-8-23-10.png","hash":"fb7e358c3a0934766a8e2fd991bfbd200f2046f6","modified":1632137501686},{"_id":"source/photos/2019-8-23-11.png","hash":"1d04b9b27e5b2f5da01e39a12ce420837830ac26","modified":1632137501686},{"_id":"source/photos/2019-8-23-12.png","hash":"1b0df9eee99174709b70f99599fdb85e231d4269","modified":1632137501686},{"_id":"source/photos/2019-8-23-13.png","hash":"b980c42f8ba69238385df3a85924561e35c18ded","modified":1632137501686},{"_id":"source/photos/2019-8-23-2.png","hash":"d9d80f1321cb916975dc63b1ef9727b774efeacb","modified":1632137501686},{"_id":"source/photos/America1.jpg","hash":"a86816ca721a60ab705153e6bd04be722c08f618","modified":1632137501826},{"_id":"source/photos/America11.jpg","hash":"625eeb951d4338791d304a7f3ee46caacce2e90e","modified":1632137501826},{"_id":"source/photos/America2.jpg","hash":"bcd321e6b33ac791f7014eeb5684e4af8eca3e09","modified":1632137501830},{"_id":"source/photos/Array.jpg","hash":"4cd78664adcba2793e93e207bd1f2ef7c234796b","modified":1632137501830},{"_id":"source/photos/OS-3.png","hash":"4d6bde98ed2ee22ee95f2425f61d7aea5ff53b29","modified":1632137501834},{"_id":"source/photos/friend7.jpg","hash":"bf075b3c5d77e5c60e624c842935fc0470964b6d","modified":1632137501866},{"_id":"source/photos/horizon2020.jpg","hash":"0f2917690ab43896c54c3757980cef01ce860b3c","modified":1632137501866},{"_id":"source/photos/memcached1.png","hash":"791f07d566f1aaff339eeb67e621289c9e5b4f46","modified":1632137501890},{"_id":"source/photos/pytest-1.png","hash":"2c37a047eb42290dab50f1b30dea686bb6bd3349","modified":1632137501898},{"_id":"source/photos/pytest-4.png","hash":"9e638dac0f26928bb556f4a08b996d064eeb7249","modified":1632137501902},{"_id":"source/photos/togaf.jpg","hash":"cc0446b87f6ab008aa22a9427a97e4429a975ce9","modified":1632137501914},{"_id":"source/photos/xiancheng.jpg","hash":"092b91b72e9564ce0b0d134b8f80bb2c74925b9d","modified":1632137501914},{"_id":"source/photos/2019-8-23-0.jpg","hash":"8ed034074e4b33f074e3922f9a90feb169943281","modified":1632137501686},{"_id":"source/photos/2019-8-23-1.png","hash":"38bc12cf82528c96066ffb96fba54567f9c364f9","modified":1632137501686},{"_id":"source/photos/America13.jpg","hash":"f0d4361e4a555be84949e7222800d6b0556fd953","modified":1632137501826},{"_id":"source/photos/America14.jpg","hash":"655bda7d49a5cedbdefdcbbf4ec135574f1e3dfd","modified":1632137501830},{"_id":"source/photos/America6.jpg","hash":"3d8c9fa4f478a1d01418dff8ade9ca24baa8366e","modified":1632137501830},{"_id":"source/photos/America7.jpg","hash":"1ccf980d3de1d65a67354d08600f7d379888594e","modified":1632137501830},{"_id":"source/photos/OS-1.png","hash":"ae74db4ee7d58532370961cdae8ff4f021e46dd3","modified":1632137501830},{"_id":"source/photos/OS-10.png","hash":"ac174cc5b26b6e2951920a05d589e8d984c72a5a","modified":1632137501834},{"_id":"source/photos/OS-11.png","hash":"7798b4585097fdf9ae3fa7de5e1d372c167dd09b","modified":1632137501834},{"_id":"source/photos/OS-12.png","hash":"d4b776778ab5840912cc4e9aeb261a4c24ea66bd","modified":1632137501834},{"_id":"source/photos/OS-2.png","hash":"4b519b362aed85e03afc07a638f058bfe52e04c4","modified":1632137501834},{"_id":"source/photos/OS-4.png","hash":"593047683ca42770384939929bca7b5d2ef85302","modified":1632137501834},{"_id":"source/photos/OS-5.png","hash":"b247705e57836f7fea7f226817e687a17ec5ba01","modified":1632137501834},{"_id":"source/photos/OS-6.png","hash":"77c740103dfbaf6961e9a85f49070bef2ff27b55","modified":1632137501834},{"_id":"source/photos/OS-8.png","hash":"20d53dcd01e5f4f37f51339025456aab2e1c0146","modified":1632137501834},{"_id":"source/photos/OS-9.png","hash":"02cf1e97ee3f7fe9fca7b2852a24d58e50956b1e","modified":1632137501838},{"_id":"source/photos/certifi2.jpg","hash":"33f71cf4b8ac3cd7987d487d4680bea96818e63c","modified":1632137501846},{"_id":"source/photos/company1.jpg","hash":"499fb83fa46cf15d3de3275fe429c6a1bdf76244","modified":1632137501846},{"_id":"source/photos/company2.jpg","hash":"dd195f9779bd75fcf1cbaf954a005cbd9d680d12","modified":1632137501846},{"_id":"source/photos/company3.jpg","hash":"47f428e9e7efa03a6e44646ab1e43479a7fe73ba","modified":1632137501846},{"_id":"source/photos/friend1.jpg","hash":"9aff4462cc031225c6e57c161d86d3f04ff66b3b","modified":1632137501858},{"_id":"source/photos/friend4.jpg","hash":"5fc8b5b9512cd0fb65f4fd0159289f859b76731c","modified":1632137501866},{"_id":"source/photos/friend5.jpg","hash":"c0f30509b41bec034dbae50102634a2c76afc55b","modified":1632137501866},{"_id":"source/about/WechatCode.jpg","hash":"fe0b051d62d550ea736e1145c40af76e3b283a50","modified":1632139923302},{"_id":"source/photos/America12.jpg","hash":"ec7cef087f86a24fd6a2c1093255576065b57097","modified":1632137501826},{"_id":"source/photos/America4.jpg","hash":"5d84d570d63e805bd2d527244497690f27ad4167","modified":1632137501830},{"_id":"source/photos/America5.jpg","hash":"234731064733bed7853890e9ada6d92a2abcf0b9","modified":1632137501830},{"_id":"source/photos/America9.jpg","hash":"130bd03c8811f8569d9168bdfa9d675a297396dc","modified":1632137501830},{"_id":"source/photos/OS-7.png","hash":"786193c511460be82e0c07ca04668a5e8b8039c3","modified":1632137501834},{"_id":"source/photos/RBTree3.gif","hash":"a8aa734b06df546e7e7a8a98863f90f28d954e7d","modified":1632137501838},{"_id":"source/photos/RBTree4.gif","hash":"6160bb8df80d4c5ccd17a8f019118032d84288d1","modified":1632137501838},{"_id":"source/photos/friend3.jpg","hash":"ec61b58a999a937c123282a1d363bb8d67c361c2","modified":1632137501866},{"_id":"source/photos/friend6.jpg","hash":"f3708aa924cff7281bc978353ec4aead2dd76a68","modified":1632137501866},{"_id":"source/photos/America10.jpg","hash":"d8a0d20acb8f8200341551d9d2d39c2a92596e22","modified":1632137501826},{"_id":"source/photos/tcl.jpg","hash":"2d3b1607b8828b9a9939812b7890e57bf681bac3","modified":1632137501914},{"_id":"source/photos/America3.jpg","hash":"8272d47a9add03437672b3b9e65f0d57b6c63186","modified":1632137501830},{"_id":"source/photos/missuri.jpg","hash":"8531fb0914c25e817d2865075149f98c668072e8","modified":1632137501890},{"_id":"node_modules/hexo-theme-aurora/.browserslistrc","hash":"db215b841182d2af3259a1c1d6e1957bca333970","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG.md","hash":"e68f3af8af17d326a48e1b317e01d7429193217e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/CHANGELOG_CN.md","hash":"5d13c251e8b77fd86870da50f3be98f8822edc66","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/README.md","hash":"c50f58b08b75780990c18ab85761e3e24aac0d90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/_config.yml","hash":"e6b2335cb393444b8a1fc1ad65331f4a30bc8915","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/jest.config.js","hash":"425f08cb718a56630ce61ae0686f35c55ef565df","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/package.json","hash":"3b142904616f1d0e8608edcb0cf251f403cee9b0","modified":1632122751977},{"_id":"node_modules/hexo-theme-aurora/.circleci/config.yml","hash":"534051be311581f69aa8287120275a04539290e4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/data/cn.yml","hash":"4f5dcc1e2953df7a8e4e683c1a9115f6e0041f5e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/data/en.yml","hash":"7bbd6c0da0ae2f93f8a786a3be77fbe4e95a787e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/layout/index.ejs","hash":"94732830a65b718d2fa506b8598df44f14399fd8","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/index.js","hash":"2a3c62a860581ee6813ca4bcaa7c952f614e818c","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/filters/index.js","hash":"5eacff9446dd6c9a7eb0a0c84be9187055440454","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/category.js","hash":"0ae21ffcf6e471ebfb72ac62a833991fae86ec8a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/index.js","hash":"dfbb0fdbf990bd67684ed891a4aaa1fd8dcd23f2","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/page.js","hash":"1be54ea9cdf8e293e67bf457075fcdd8a72b8779","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/post.js","hash":"76c3268e8b6887fb1fd11c4d71004aad9dc215fc","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/search.js","hash":"a2a636e1df76efdcaca37226b490afa539ce766b","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/site.js","hash":"b5f5ce813b4b0b322eceb11b036dc65201604256","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/statistic.js","hash":"1c641956e15cec96490de16a88ccc7bec0c9d5c4","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/generators/tag.js","hash":"975e79e73d2503a33dbc63655b948100cc46d44f","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/mapper.js","hash":"7a99508d910321b90b4afa0df02ad90f62336901","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/symbols-count-time.js","hash":"d1a81e31b2988edcdf4b4761cec7326a980f097a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/toc.js","hash":"5c7348c550ef7f164d492847801a360cdefc60a2","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/truncate-html.js","hash":"49d4832af027eabe5b8383a24e66dceae761533e","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/helpers/utils.js","hash":"93ff75f0e35a1dc40d5406cc097f5988dd820600","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/scripts/lib/injector/index.js","hash":"7ca562ea3af3068ee925b5a8afdce0eaa1e15e64","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":499162500000},{"_id":"node_modules/hexo-theme-aurora/source/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":499162500000},{"_id":"source/about/self.png","hash":"1a6b4647dab59ceba87e96f6d96ce80ca30642e3","modified":1633596744675},{"_id":"source/photos/2019-10-12-3.png","hash":"13132dc3ea8fc111f30720bdfaa678b26575a8fb","modified":1632137501682},{"_id":"source/photos/2019movie4.mp4","hash":"d09a5e2e10a2b1d8435ba0e758e08a490ed359c7","modified":1632137501734},{"_id":"source/photos/self.png","hash":"1a6b4647dab59ceba87e96f6d96ce80ca30642e3","modified":1633596461839},{"_id":"source/photos/2019-10-12-2.png","hash":"874c7c017d7deb14fdec3c026cf8c753de411ad0","modified":1632137501682},{"_id":"source/photos/kafka1.jpg","hash":"709e2bb6bce05dc561bf04f45387755763da00dc","modified":1632137501890},{"_id":"source/photos/friend2.jpg","hash":"e8ceca677342449a736cf2589dbe298c966fd7e3","modified":1632137501862},{"_id":"source/photos/company5.jpg","hash":"a38c3e18cb4dd393c4566070bbfed4a20f9b2237","modified":1632137501858},{"_id":"source/photos/2019movie1.mp4","hash":"0361da2445a3b7349f2a496c394be0c37b37314a","modified":1632137501690},{"_id":"source/photos/company4.jpg","hash":"736cc151b105d84faa432833f8dfc110736aacbd","modified":1632137501854},{"_id":"source/photos/2019-08-30.png","hash":"1f14055eba62ceb486aff14076084ebcf92e40b5","modified":1632137501678},{"_id":"source/photos/certifi.jpg","hash":"259d56eba1ebffe5f3c76ad6494c6e0752895f4c","modified":1632137501842},{"_id":"source/photos/2019movie2.mp4","hash":"c54aac0e1fe7e0df6456f4fa724b422fcd66ce38","modified":1632137501698},{"_id":"source/photos/2019movie6.mp4","hash":"07c2313d7faf70ccd41b9d56a71317f1c4d42e73","modified":1632137501758},{"_id":"source/photos/kafka.png","hash":"1d5cd8a5f15bfb7a7c6b4debfaf9e2dac317a2a9","modified":1632137501882},{"_id":"source/photos/2019movie8.mp4","hash":"ff443a9fab5d8cbe4ae19065f7b6f23a797f78ee","modified":1632137501822},{"_id":"source/photos/2019movie5.mp4","hash":"b883332d96f374318a60537897a503ebfdeeb13b","modified":1632137501754},{"_id":"source/photos/2019movie7.mp4","hash":"8f1b5151a98945989d5c8a9be8a02a9302aca011","modified":1632137501790},{"_id":"source/photos/2019movie3.mp4","hash":"a33da035b6f10fcecc6aed736d7d9373d39e15c6","modified":1632137501734},{"_id":"public/api/posts/1.json","hash":"dc0536cb164a66f4abe1eea85e9344608c4ff363","modified":1633597030038},{"_id":"public/api/articles/2020-6-10-SaaS.json","hash":"62565381fced7fdf96ea4908b52532eefc4e04c5","modified":1633597030038},{"_id":"public/api/articles/2020-5-10-TOGAF.json","hash":"79def5ec08b2aca2b06eff9e1b65899916d581a8","modified":1633597030038},{"_id":"public/api/articles/2020-04-4-JOS.json","hash":"0767a62e818b61d458fbbad4dd2cdbdfcd5cfbc2","modified":1633597030038},{"_id":"public/api/articles/2020-3-2-gtest.json","hash":"ba2881de46dcb9b607129a05feb7c24a64e90644","modified":1633597030038},{"_id":"public/api/articles/2020-2-25-pytest.json","hash":"b9f08f086d0362df707f7aef73125153eb5ddffd","modified":1633597030038},{"_id":"public/api/articles/2020-2-21-shell.json","hash":"e1d6c35907d7a8cdb5bef8da70b724fd5f9c9bb9","modified":1633597030038},{"_id":"public/api/articles/2020-1-20-API-test-learning.json","hash":"2a245ec709edaa81b4eb38d6d56b54ed95d34753","modified":1633597030038},{"_id":"public/api/articles/2020-1-14-serial-communication.json","hash":"6847391de537d155ba9c9489f651b5dd6b43389f","modified":1633597030038},{"_id":"public/api/features.json","hash":"46a274a5aa75c49bd9c221def1f06428e4980538","modified":1633597030038},{"_id":"public/api/authors/blog-author.json","hash":"c418d710e37ec4eaf7082b6c630fe796b73b07ed","modified":1633597030038},{"_id":"public/api/site.json","hash":"61a4fdc4057a58c6ffe06619a2ab70c192cc9124","modified":1633597030038},{"_id":"public/api/categories.json","hash":"25be19fc1f28caf253490cdc24e86fe541c4902b","modified":1633597030038},{"_id":"public/api/categories/OS.json","hash":"9f301d69c202be2edf9947052589af23eb8a798e","modified":1633597030038},{"_id":"public/api/categories/Test.json","hash":"300af71dcffadd8652da6c23cd38f8db80a9172c","modified":1633597030038},{"_id":"public/api/categories/thinking.json","hash":"e106ce3b7d2b1197e8d02fb5eb84233fc2848b9c","modified":1633597030038},{"_id":"public/api/tags.json","hash":"7fd50d33f584de1a268b99c49efe6436b52e0c02","modified":1633597030038},{"_id":"public/api/tags/OS.json","hash":"555cf92aee9219cc319c4eac0a5a328eb7450e5a","modified":1633597030038},{"_id":"public/api/tags/web.json","hash":"b3e551e3b6afcf4a862e63c3e158bfafc9004ec6","modified":1633597030038},{"_id":"public/api/tags/Test.json","hash":"002b9c1b502e03dacae36da7513438673ed9ec57","modified":1633597030038},{"_id":"public/api/tags/shell.json","hash":"4ef9f144c538523404bc7a8f6aa4f067293904c7","modified":1633597030038},{"_id":"public/api/tags/thinking.json","hash":"e106ce3b7d2b1197e8d02fb5eb84233fc2848b9c","modified":1633597030038},{"_id":"public/api/pages/about/index.json","hash":"46d9a8fb1cd691364b0c113466b6c6afc13ae7e3","modified":1633597030038},{"_id":"public/api/statistic.json","hash":"0e243916bf4823ac479f21dfd718cc98f5b3b3b9","modified":1633597030038},{"_id":"public/api/search.json","hash":"727cc0ef84e1d10acf19f7c0552a5039658e923d","modified":1633597030038},{"_id":"public/post/2020-6-10-SaaS.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1633597030038},{"_id":"public/post/2020-5-10-TOGAF.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1633597030038},{"_id":"public/post/2020-04-4-JOS.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1633597030038},{"_id":"public/post/2020-3-2-gtest.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1633597030038},{"_id":"public/post/2020-2-25-pytest.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1633597030038},{"_id":"public/post/2020-2-21-shell.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1633597030038},{"_id":"public/post/2020-1-20-API-test-learning.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1633597030038},{"_id":"public/post/2020-1-14-serial-communication.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1633597030038},{"_id":"public/index.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1633597030038},{"_id":"public/tags/index.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1633597030038},{"_id":"public/archives/index.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1633597030038},{"_id":"public/page/about/index.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1633597030038},{"_id":"public/tags/search/index.html","hash":"a3fe017f0c31309fe992763c30849a7f2f7e07f3","modified":1633597030038},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1633597030038},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1633597030038},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1633597030038},{"_id":"public/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1633597030038},{"_id":"public/photos/1.jpg","hash":"90ecef0ca8f43726496f24faed4ab63d266ef8bb","modified":1633597030038},{"_id":"public/photos/2.jpg","hash":"20a7f53733a4a39c87af60061b897a5feec2ed4b","modified":1633597030038},{"_id":"public/photos/2019-10-4-1.jpg","hash":"e91b0eb1ce9928ebee30b3a46dce8fcbf0e23d74","modified":1633597030038},{"_id":"public/photos/2019-10-4-2.jpg","hash":"aa5fa8d13a5c09909a4fd7502c207191f1310e49","modified":1633597030038},{"_id":"public/photos/2019-10-4-4.jpg","hash":"02377b6308d9117d90c922c193fc6f62151a6114","modified":1633597030038},{"_id":"public/photos/2019-10-4-5.jpg","hash":"474adfa409aefdc8e36e99868e51e3d8c4bcd8e9","modified":1633597030038},{"_id":"public/photos/2019-8-23-14.png","hash":"ff4b48587feb937e236643ff5455d08fdcefd450","modified":1633597030038},{"_id":"public/photos/2019-8-23-3.png","hash":"0f43f09212191efa85c050c1480ec4fc0652ab62","modified":1633597030038},{"_id":"public/photos/2019-8-23-4.png","hash":"94a6615d6969bdef86035b0d32eb0738cd171517","modified":1633597030038},{"_id":"public/photos/2019-8-23-5.png","hash":"56e5d1dec61cc132e2fc103a152121d04218433e","modified":1633597030038},{"_id":"public/photos/2019-8-23-6.png","hash":"4d6aab5e8630d06d74303c46f3366e7816364987","modified":1633597030038},{"_id":"public/photos/2019-8-23-7.png","hash":"ade26cd43eae6bb20e0e93e6001d4b59ae46697a","modified":1633597030038},{"_id":"public/photos/2019-8-23-8.png","hash":"94ddeb8c20eed546443b46ad93ca4c52a27ec2e7","modified":1633597030038},{"_id":"public/photos/2019-8-23-9.png","hash":"dab9292576fff91124dd86d02f9c8458a5edc966","modified":1633597030038},{"_id":"public/photos/3.jpg","hash":"865426193a247fa4d8cf7c3ab92eb13d76a58844","modified":1633597030038},{"_id":"public/photos/4.jpg","hash":"163d5005787c67e77ae3529dab286996bfcf57b1","modified":1633597030038},{"_id":"public/photos/America8.jpg","hash":"e344cf901d795c0338b4dc1f0b27922f1cf67650","modified":1633597030038},{"_id":"public/photos/Chester'blog.png","hash":"77fdbc481105dec5dbb6fb1a626572910b1320a3","modified":1633597030038},{"_id":"public/photos/HashMap.png","hash":"1f739fb4d3eaf9675349f0f53b8e7b8bf4ff72ef","modified":1633597030038},{"_id":"public/photos/RBTree1.jpg","hash":"be580a147c09352e2d4ffc8ff0f7b6c9c437df58","modified":1633597030038},{"_id":"public/photos/RBTree2.jpg","hash":"2633eb4dd91b9a1d88838993c7f3b67d6beed419","modified":1633597030038},{"_id":"public/photos/SaaS1.jpg","hash":"0a369053947487a1a52bd3a1c312883c72d42990","modified":1633597030038},{"_id":"public/photos/SaaS2.jpg","hash":"f5020c791fbf925a3a91f8af7499cc3ee2f130cb","modified":1633597030038},{"_id":"public/photos/didi.jpg","hash":"9d4c5ab557a897eb6f63bd8868f28eed082dc907","modified":1633597030038},{"_id":"public/photos/pytest-2.png","hash":"20cc5eceeec1b981d01d7b9207195a1389bebb7a","modified":1633597030038},{"_id":"public/photos/pytest-3.png","hash":"bd310a0ecb64287f9fb57d5e91affe8c1c9ce172","modified":1633597030038},{"_id":"public/photos/pytest-5.png","hash":"5568c7d67953910c3d9ab9ad0f03b2f69f71e119","modified":1633597030038},{"_id":"public/photos/pytest-6.png","hash":"bc5b8de948ffd62f5bcbb8052950d30f1cb95eb6","modified":1633597030038},{"_id":"public/photos/shangtang.png","hash":"e77c8a65348ca6094bf353d7caff2002d6da2152","modified":1633597030038},{"_id":"public/photos/2019-10-4-3.jpg","hash":"27bdd60b63f6befeafbc0a79ccf6f6edafcee94b","modified":1633597030038},{"_id":"public/photos/2019-10-12-1.png","hash":"5006a3d60afe0ab98802ac50504ad4738683893d","modified":1633597030038},{"_id":"public/photos/2019-8-23-10.png","hash":"fb7e358c3a0934766a8e2fd991bfbd200f2046f6","modified":1633597030038},{"_id":"public/photos/2019-8-23-11.png","hash":"1d04b9b27e5b2f5da01e39a12ce420837830ac26","modified":1633597030038},{"_id":"public/photos/2019-8-23-12.png","hash":"1b0df9eee99174709b70f99599fdb85e231d4269","modified":1633597030038},{"_id":"public/photos/2019-8-23-13.png","hash":"b980c42f8ba69238385df3a85924561e35c18ded","modified":1633597030038},{"_id":"public/photos/2019-8-23-2.png","hash":"d9d80f1321cb916975dc63b1ef9727b774efeacb","modified":1633597030038},{"_id":"public/photos/America1.jpg","hash":"a86816ca721a60ab705153e6bd04be722c08f618","modified":1633597030038},{"_id":"public/photos/America11.jpg","hash":"625eeb951d4338791d304a7f3ee46caacce2e90e","modified":1633597030038},{"_id":"public/photos/America2.jpg","hash":"bcd321e6b33ac791f7014eeb5684e4af8eca3e09","modified":1633597030038},{"_id":"public/photos/Array.jpg","hash":"4cd78664adcba2793e93e207bd1f2ef7c234796b","modified":1633597030038},{"_id":"public/photos/OS-3.png","hash":"4d6bde98ed2ee22ee95f2425f61d7aea5ff53b29","modified":1633597030038},{"_id":"public/photos/friend7.jpg","hash":"bf075b3c5d77e5c60e624c842935fc0470964b6d","modified":1633597030038},{"_id":"public/photos/horizon2020.jpg","hash":"0f2917690ab43896c54c3757980cef01ce860b3c","modified":1633597030038},{"_id":"public/photos/memcached1.png","hash":"791f07d566f1aaff339eeb67e621289c9e5b4f46","modified":1633597030038},{"_id":"public/photos/pytest-1.png","hash":"2c37a047eb42290dab50f1b30dea686bb6bd3349","modified":1633597030038},{"_id":"public/photos/pytest-4.png","hash":"9e638dac0f26928bb556f4a08b996d064eeb7249","modified":1633597030038},{"_id":"public/photos/togaf.jpg","hash":"cc0446b87f6ab008aa22a9427a97e4429a975ce9","modified":1633597030038},{"_id":"public/photos/xiancheng.jpg","hash":"092b91b72e9564ce0b0d134b8f80bb2c74925b9d","modified":1633597030038},{"_id":"public/photos/2019-8-23-0.jpg","hash":"8ed034074e4b33f074e3922f9a90feb169943281","modified":1633597030038},{"_id":"public/photos/2019-8-23-1.png","hash":"38bc12cf82528c96066ffb96fba54567f9c364f9","modified":1633597030038},{"_id":"public/photos/America13.jpg","hash":"f0d4361e4a555be84949e7222800d6b0556fd953","modified":1633597030038},{"_id":"public/photos/America14.jpg","hash":"655bda7d49a5cedbdefdcbbf4ec135574f1e3dfd","modified":1633597030038},{"_id":"public/photos/America6.jpg","hash":"3d8c9fa4f478a1d01418dff8ade9ca24baa8366e","modified":1633597030038},{"_id":"public/photos/America7.jpg","hash":"1ccf980d3de1d65a67354d08600f7d379888594e","modified":1633597030038},{"_id":"public/photos/OS-1.png","hash":"ae74db4ee7d58532370961cdae8ff4f021e46dd3","modified":1633597030038},{"_id":"public/photos/OS-10.png","hash":"ac174cc5b26b6e2951920a05d589e8d984c72a5a","modified":1633597030038},{"_id":"public/photos/OS-11.png","hash":"7798b4585097fdf9ae3fa7de5e1d372c167dd09b","modified":1633597030038},{"_id":"public/photos/OS-12.png","hash":"d4b776778ab5840912cc4e9aeb261a4c24ea66bd","modified":1633597030038},{"_id":"public/photos/OS-2.png","hash":"4b519b362aed85e03afc07a638f058bfe52e04c4","modified":1633597030038},{"_id":"public/photos/OS-4.png","hash":"593047683ca42770384939929bca7b5d2ef85302","modified":1633597030038},{"_id":"public/photos/OS-5.png","hash":"b247705e57836f7fea7f226817e687a17ec5ba01","modified":1633597030038},{"_id":"public/photos/OS-6.png","hash":"77c740103dfbaf6961e9a85f49070bef2ff27b55","modified":1633597030038},{"_id":"public/photos/OS-8.png","hash":"20d53dcd01e5f4f37f51339025456aab2e1c0146","modified":1633597030038},{"_id":"public/photos/OS-9.png","hash":"02cf1e97ee3f7fe9fca7b2852a24d58e50956b1e","modified":1633597030038},{"_id":"public/photos/certifi2.jpg","hash":"33f71cf4b8ac3cd7987d487d4680bea96818e63c","modified":1633597030038},{"_id":"public/photos/company1.jpg","hash":"499fb83fa46cf15d3de3275fe429c6a1bdf76244","modified":1633597030038},{"_id":"public/photos/company2.jpg","hash":"dd195f9779bd75fcf1cbaf954a005cbd9d680d12","modified":1633597030038},{"_id":"public/photos/company3.jpg","hash":"47f428e9e7efa03a6e44646ab1e43479a7fe73ba","modified":1633597030038},{"_id":"public/photos/friend1.jpg","hash":"9aff4462cc031225c6e57c161d86d3f04ff66b3b","modified":1633597030038},{"_id":"public/photos/friend4.jpg","hash":"5fc8b5b9512cd0fb65f4fd0159289f859b76731c","modified":1633597030038},{"_id":"public/photos/friend5.jpg","hash":"c0f30509b41bec034dbae50102634a2c76afc55b","modified":1633597030038},{"_id":"public/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1633597030038},{"_id":"public/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1633597030038},{"_id":"public/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1633597030038},{"_id":"public/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1633597030038},{"_id":"public/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1633597030038},{"_id":"public/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1633597030038},{"_id":"public/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1633597030038},{"_id":"public/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1633597030038},{"_id":"public/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1633597030038},{"_id":"public/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1633597030038},{"_id":"public/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1633597030038},{"_id":"public/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1633597030038},{"_id":"public/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1633597030038},{"_id":"public/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1633597030038},{"_id":"public/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1633597030038},{"_id":"public/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1633597030038},{"_id":"public/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1633597030038},{"_id":"public/about/WechatCode.jpg","hash":"fe0b051d62d550ea736e1145c40af76e3b283a50","modified":1633597030038},{"_id":"public/photos/America12.jpg","hash":"ec7cef087f86a24fd6a2c1093255576065b57097","modified":1633597030038},{"_id":"public/photos/America4.jpg","hash":"5d84d570d63e805bd2d527244497690f27ad4167","modified":1633597030038},{"_id":"public/photos/America5.jpg","hash":"234731064733bed7853890e9ada6d92a2abcf0b9","modified":1633597030038},{"_id":"public/photos/America9.jpg","hash":"130bd03c8811f8569d9168bdfa9d675a297396dc","modified":1633597030038},{"_id":"public/photos/OS-7.png","hash":"786193c511460be82e0c07ca04668a5e8b8039c3","modified":1633597030038},{"_id":"public/photos/RBTree3.gif","hash":"a8aa734b06df546e7e7a8a98863f90f28d954e7d","modified":1633597030038},{"_id":"public/photos/RBTree4.gif","hash":"6160bb8df80d4c5ccd17a8f019118032d84288d1","modified":1633597030038},{"_id":"public/photos/friend3.jpg","hash":"ec61b58a999a937c123282a1d363bb8d67c361c2","modified":1633597030038},{"_id":"public/photos/friend6.jpg","hash":"f3708aa924cff7281bc978353ec4aead2dd76a68","modified":1633597030038},{"_id":"public/photos/America10.jpg","hash":"d8a0d20acb8f8200341551d9d2d39c2a92596e22","modified":1633597030038},{"_id":"public/photos/tcl.jpg","hash":"2d3b1607b8828b9a9939812b7890e57bf681bac3","modified":1633597030038},{"_id":"public/photos/America3.jpg","hash":"8272d47a9add03437672b3b9e65f0d57b6c63186","modified":1633597030038},{"_id":"public/photos/missuri.jpg","hash":"8531fb0914c25e817d2865075149f98c668072e8","modified":1633597030038},{"_id":"public/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":1633597030038},{"_id":"public/about/self.png","hash":"1a6b4647dab59ceba87e96f6d96ce80ca30642e3","modified":1633597030038},{"_id":"public/photos/2019-10-12-3.png","hash":"13132dc3ea8fc111f30720bdfaa678b26575a8fb","modified":1633597030038},{"_id":"public/photos/2019movie4.mp4","hash":"d09a5e2e10a2b1d8435ba0e758e08a490ed359c7","modified":1633597030038},{"_id":"public/photos/self.png","hash":"1a6b4647dab59ceba87e96f6d96ce80ca30642e3","modified":1633597030038},{"_id":"public/photos/2019-10-12-2.png","hash":"874c7c017d7deb14fdec3c026cf8c753de411ad0","modified":1633597030038},{"_id":"public/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":1633597030038},{"_id":"public/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1633597030038},{"_id":"public/photos/kafka1.jpg","hash":"709e2bb6bce05dc561bf04f45387755763da00dc","modified":1633597030038},{"_id":"public/photos/friend2.jpg","hash":"e8ceca677342449a736cf2589dbe298c966fd7e3","modified":1633597030038},{"_id":"public/photos/company5.jpg","hash":"a38c3e18cb4dd393c4566070bbfed4a20f9b2237","modified":1633597030038},{"_id":"public/photos/2019movie1.mp4","hash":"0361da2445a3b7349f2a496c394be0c37b37314a","modified":1633597030038},{"_id":"public/photos/company4.jpg","hash":"736cc151b105d84faa432833f8dfc110736aacbd","modified":1633597030038},{"_id":"public/photos/2019-08-30.png","hash":"1f14055eba62ceb486aff14076084ebcf92e40b5","modified":1633597030038},{"_id":"public/photos/certifi.jpg","hash":"259d56eba1ebffe5f3c76ad6494c6e0752895f4c","modified":1633597030038},{"_id":"public/photos/2019movie2.mp4","hash":"c54aac0e1fe7e0df6456f4fa724b422fcd66ce38","modified":1633597030038},{"_id":"public/photos/2019movie6.mp4","hash":"07c2313d7faf70ccd41b9d56a71317f1c4d42e73","modified":1633597030038},{"_id":"public/photos/kafka.png","hash":"1d5cd8a5f15bfb7a7c6b4debfaf9e2dac317a2a9","modified":1633597030038},{"_id":"public/photos/2019movie8.mp4","hash":"ff443a9fab5d8cbe4ae19065f7b6f23a797f78ee","modified":1633597030038},{"_id":"public/photos/2019movie5.mp4","hash":"b883332d96f374318a60537897a503ebfdeeb13b","modified":1633597030038},{"_id":"public/photos/2019movie7.mp4","hash":"8f1b5151a98945989d5c8a9be8a02a9302aca011","modified":1633597030038},{"_id":"public/photos/2019movie3.mp4","hash":"a33da035b6f10fcecc6aed736d7d9373d39e15c6","modified":1633597030038}],"Category":[{"name":"OS","_id":"ckugphtcy0003vev78tswe8je"},{"name":"Test","_id":"ckugphter000dvev772ov6a53"},{"name":"thinking","_id":"ckugphtf6000tvev760w3ajvg"}],"Data":[],"Page":[{"_content":"## 关于我\n\n![个人照片](http://csuzhang.info/about/self.png)\n\n目前就读于中南大学本科，主修电子信息工程，辅修人工智能\n\n| Time          | Work                            |\n| ------------- | ------------------------------- |\n| 2021.2-至今   | 就职于腾讯PCG                   |\n| 2020.9-2021.1 | 互联网+医疗领域创业, 获百万级VC |\n| 2020.6-2020.9 | 上海声网Agora实习               |\n| 2020.1-2020.4 | 商汤科技实习                    |\n\n\n简单总结了下自己大学期间参加过的获奖比赛，汇总表格下：\n\n| Time    | Work                                               |\n| ------- | -------------------------------------------------- |\n| 2021.9  | 以实习生身份代表腾讯PCG进行校园招聘                |\n| 2021.8  | 成为CNCF Thanos社区Contributor                     |\n| 2021.8  | 成为CNCF OpenTelemetry社区成员                     |\n| 2021.7  | 受理国家级发明专利一项                             |\n| 2021.6  | 成为CNCF OpenTelemetry社区Contributor              |\n| 2021.5  | 成为腾讯OpenTelemetry Oteam PMC                    |\n| 2020.11 | 带领团队获得湖南省科技创新重点研发项目(省重点)     |\n| 2020    | 年全国大学生软件创新大赛(国奖)                     |\n| 2020    | 湖南省大学生智能导航科技创新大赛(省奖)             |\n| 2019    | 上海XdHack黑客马拉松(入围)                         |\n| 2019    | 京东5G应用设计创意大赛(入围)                       |\n| 2019    | 湖南省柳枝行动                               |\n| 2019    | Kaggle Competition 未来预测 & 泰坦尼克号预测(银牌) |\n| 2019    | 清华大学GSF Innovation Accelerator创新孵化器(第三) |\n| 2019    | 华中HackFun黑客马拉松(入围)                        |\n| 2019    | 中国互联网+大学生创新创业大赛(省奖)                |\n| 2019    | 全国大学生创新创业大赛(省奖)                       |\n| 2019    | 中国高校智能机器人创意大赛(校奖)                   |\n\n\n\n## 知名开源社区贡献记录：\n\n### OpenTelemetry-Go\n\n- 2021-08-19 zhyChesterCheung(张瀚元) 成为OpenTelemetry社区成员 [open-telemetry/community#813](https://github.com/open-telemetry/community/issues/813)\n\n- 2021-06-08 zhyChesterCheung(张瀚元) [opentelemetry/opentelemetry-go#1973](https://github.com/open-telemetry/opentelemetry-go/pull/1973)\n\n- 2021-06-23 zhyChesterCheung(张瀚元) [open-telemetry/opentelemetry-go#2022](https://github.com/open-telemetry/opentelemetry-go/pull/2022)\n\n- 2021-07-22 zhyChesterCheung(张瀚元) [open-telemetry/opentelemetry-go#2097](https://github.com/open-telemetry/opentelemetry-go/pull/2097)\n\n\n\n### FuchsiaOS-docs-zh_CN\n\n- 2021-06-13 zhyChesterCheung(张瀚元) [FuchsiaOS/FuchsiaOS-docs-zh_CN#67](https://github.com/FuchsiaOS/FuchsiaOS-docs-zh_CN/pull/67)\n- 2021-06-13 zhyChesterCheung(张瀚元) [FuchsiaOS/FuchsiaOS-docs-zh_CN#69](https://github.com/FuchsiaOS/FuchsiaOS-docs-zh_CN/pull/69)\n\n\n\n### Thanos\n\n- 2021-08-27 zhyChesterCheung(张瀚元) [thanos-io/thanos#4604] (https://github.com/thanos-io/thanos/pull/4604)\n\n\n**[团队开源贡献记录](https://docs.qq.com/doc/DSUpUQmNRbEdaRkJ4)**\n\n\n在CS的路上以后还会越走越远，每一步都有巨大的坑在等着去填，希望我能达到自己的目标！\n\n\n对我感兴趣的或者是同道中人，欢迎加上我的微信，下面就是我的微信二维码，别忘了写清楚备注信息哦😄\n\n![个人微信](http://csuzhang.info/about/WechatCode.jpg)\n\n## 联系我\n\n* [GitHub](https://github.com/zhyChesterCheung)\n* [Weibo](https://weibo.com/u/5689093900)\n* [知乎](https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9)\n* [Facebook](https://www.facebook.com/chester.cheung.3538)\n* [Twitter](https://twitter.com/ChesterCheung4)\n* [LinkedIn](https://www.linkedin.com/in/chestercheung)\n* email：cheung.zhy.csu@gmail.com\n* QQ number：2640617395\n\n\n","source":"about/index.md","raw":"## 关于我\n\n![个人照片](http://csuzhang.info/about/self.png)\n\n目前就读于中南大学本科，主修电子信息工程，辅修人工智能\n\n| Time          | Work                            |\n| ------------- | ------------------------------- |\n| 2021.2-至今   | 就职于腾讯PCG                   |\n| 2020.9-2021.1 | 互联网+医疗领域创业, 获百万级VC |\n| 2020.6-2020.9 | 上海声网Agora实习               |\n| 2020.1-2020.4 | 商汤科技实习                    |\n\n\n简单总结了下自己大学期间参加过的获奖比赛，汇总表格下：\n\n| Time    | Work                                               |\n| ------- | -------------------------------------------------- |\n| 2021.9  | 以实习生身份代表腾讯PCG进行校园招聘                |\n| 2021.8  | 成为CNCF Thanos社区Contributor                     |\n| 2021.8  | 成为CNCF OpenTelemetry社区成员                     |\n| 2021.7  | 受理国家级发明专利一项                             |\n| 2021.6  | 成为CNCF OpenTelemetry社区Contributor              |\n| 2021.5  | 成为腾讯OpenTelemetry Oteam PMC                    |\n| 2020.11 | 带领团队获得湖南省科技创新重点研发项目(省重点)     |\n| 2020    | 年全国大学生软件创新大赛(国奖)                     |\n| 2020    | 湖南省大学生智能导航科技创新大赛(省奖)             |\n| 2019    | 上海XdHack黑客马拉松(入围)                         |\n| 2019    | 京东5G应用设计创意大赛(入围)                       |\n| 2019    | 湖南省柳枝行动                               |\n| 2019    | Kaggle Competition 未来预测 & 泰坦尼克号预测(银牌) |\n| 2019    | 清华大学GSF Innovation Accelerator创新孵化器(第三) |\n| 2019    | 华中HackFun黑客马拉松(入围)                        |\n| 2019    | 中国互联网+大学生创新创业大赛(省奖)                |\n| 2019    | 全国大学生创新创业大赛(省奖)                       |\n| 2019    | 中国高校智能机器人创意大赛(校奖)                   |\n\n\n\n## 知名开源社区贡献记录：\n\n### OpenTelemetry-Go\n\n- 2021-08-19 zhyChesterCheung(张瀚元) 成为OpenTelemetry社区成员 [open-telemetry/community#813](https://github.com/open-telemetry/community/issues/813)\n\n- 2021-06-08 zhyChesterCheung(张瀚元) [opentelemetry/opentelemetry-go#1973](https://github.com/open-telemetry/opentelemetry-go/pull/1973)\n\n- 2021-06-23 zhyChesterCheung(张瀚元) [open-telemetry/opentelemetry-go#2022](https://github.com/open-telemetry/opentelemetry-go/pull/2022)\n\n- 2021-07-22 zhyChesterCheung(张瀚元) [open-telemetry/opentelemetry-go#2097](https://github.com/open-telemetry/opentelemetry-go/pull/2097)\n\n\n\n### FuchsiaOS-docs-zh_CN\n\n- 2021-06-13 zhyChesterCheung(张瀚元) [FuchsiaOS/FuchsiaOS-docs-zh_CN#67](https://github.com/FuchsiaOS/FuchsiaOS-docs-zh_CN/pull/67)\n- 2021-06-13 zhyChesterCheung(张瀚元) [FuchsiaOS/FuchsiaOS-docs-zh_CN#69](https://github.com/FuchsiaOS/FuchsiaOS-docs-zh_CN/pull/69)\n\n\n\n### Thanos\n\n- 2021-08-27 zhyChesterCheung(张瀚元) [thanos-io/thanos#4604] (https://github.com/thanos-io/thanos/pull/4604)\n\n\n**[团队开源贡献记录](https://docs.qq.com/doc/DSUpUQmNRbEdaRkJ4)**\n\n\n在CS的路上以后还会越走越远，每一步都有巨大的坑在等着去填，希望我能达到自己的目标！\n\n\n对我感兴趣的或者是同道中人，欢迎加上我的微信，下面就是我的微信二维码，别忘了写清楚备注信息哦😄\n\n![个人微信](http://csuzhang.info/about/WechatCode.jpg)\n\n## 联系我\n\n* [GitHub](https://github.com/zhyChesterCheung)\n* [Weibo](https://weibo.com/u/5689093900)\n* [知乎](https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9)\n* [Facebook](https://www.facebook.com/chester.cheung.3538)\n* [Twitter](https://twitter.com/ChesterCheung4)\n* [LinkedIn](https://www.linkedin.com/in/chestercheung)\n* email：cheung.zhy.csu@gmail.com\n* QQ number：2640617395\n\n\n","date":"2021-10-07T08:50:30.671Z","updated":"2021-10-07T08:50:30.667Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"ckugphtby0000vev70ebrh84s","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p><img src=\"http://csuzhang.info/about/self.png\" alt=\"个人照片\"></p>\n<p>目前就读于中南大学本科，主修电子信息工程，辅修人工智能</p>\n<table>\n<thead>\n<tr>\n<th>Time</th>\n<th>Work</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2021.2-至今</td>\n<td>就职于腾讯PCG</td>\n</tr>\n<tr>\n<td>2020.9-2021.1</td>\n<td>互联网+医疗领域创业, 获百万级VC</td>\n</tr>\n<tr>\n<td>2020.6-2020.9</td>\n<td>上海声网Agora实习</td>\n</tr>\n<tr>\n<td>2020.1-2020.4</td>\n<td>商汤科技实习</td>\n</tr>\n</tbody></table>\n<p>简单总结了下自己大学期间参加过的获奖比赛，汇总表格下：</p>\n<table>\n<thead>\n<tr>\n<th>Time</th>\n<th>Work</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2021.9</td>\n<td>以实习生身份代表腾讯PCG进行校园招聘</td>\n</tr>\n<tr>\n<td>2021.8</td>\n<td>成为CNCF Thanos社区Contributor</td>\n</tr>\n<tr>\n<td>2021.8</td>\n<td>成为CNCF OpenTelemetry社区成员</td>\n</tr>\n<tr>\n<td>2021.7</td>\n<td>受理国家级发明专利一项</td>\n</tr>\n<tr>\n<td>2021.6</td>\n<td>成为CNCF OpenTelemetry社区Contributor</td>\n</tr>\n<tr>\n<td>2021.5</td>\n<td>成为腾讯OpenTelemetry Oteam PMC</td>\n</tr>\n<tr>\n<td>2020.11</td>\n<td>带领团队获得湖南省科技创新重点研发项目(省重点)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>年全国大学生软件创新大赛(国奖)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>湖南省大学生智能导航科技创新大赛(省奖)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>上海XdHack黑客马拉松(入围)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>京东5G应用设计创意大赛(入围)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>湖南省柳枝行动</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>Kaggle Competition 未来预测 &amp; 泰坦尼克号预测(银牌)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>清华大学GSF Innovation Accelerator创新孵化器(第三)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>华中HackFun黑客马拉松(入围)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>中国互联网+大学生创新创业大赛(省奖)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>全国大学生创新创业大赛(省奖)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>中国高校智能机器人创意大赛(校奖)</td>\n</tr>\n</tbody></table>\n<h2 id=\"知名开源社区贡献记录：\"><a href=\"#知名开源社区贡献记录：\" class=\"headerlink\" title=\"知名开源社区贡献记录：\"></a>知名开源社区贡献记录：</h2><h3 id=\"OpenTelemetry-Go\"><a href=\"#OpenTelemetry-Go\" class=\"headerlink\" title=\"OpenTelemetry-Go\"></a>OpenTelemetry-Go</h3><ul>\n<li><p>2021-08-19 zhyChesterCheung(张瀚元) 成为OpenTelemetry社区成员 <a href=\"https://github.com/open-telemetry/community/issues/813\">open-telemetry/community#813</a></p>\n</li>\n<li><p>2021-06-08 zhyChesterCheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/1973\">opentelemetry/opentelemetry-go#1973</a></p>\n</li>\n<li><p>2021-06-23 zhyChesterCheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2022\">open-telemetry/opentelemetry-go#2022</a></p>\n</li>\n<li><p>2021-07-22 zhyChesterCheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2097\">open-telemetry/opentelemetry-go#2097</a></p>\n</li>\n</ul>\n<h3 id=\"FuchsiaOS-docs-zh-CN\"><a href=\"#FuchsiaOS-docs-zh-CN\" class=\"headerlink\" title=\"FuchsiaOS-docs-zh_CN\"></a>FuchsiaOS-docs-zh_CN</h3><ul>\n<li>2021-06-13 zhyChesterCheung(张瀚元) <a href=\"https://github.com/FuchsiaOS/FuchsiaOS-docs-zh_CN/pull/67\">FuchsiaOS/FuchsiaOS-docs-zh_CN#67</a></li>\n<li>2021-06-13 zhyChesterCheung(张瀚元) <a href=\"https://github.com/FuchsiaOS/FuchsiaOS-docs-zh_CN/pull/69\">FuchsiaOS/FuchsiaOS-docs-zh_CN#69</a></li>\n</ul>\n<h3 id=\"Thanos\"><a href=\"#Thanos\" class=\"headerlink\" title=\"Thanos\"></a>Thanos</h3><ul>\n<li>2021-08-27 zhyChesterCheung(张瀚元) [thanos-io/thanos#4604] (<a href=\"https://github.com/thanos-io/thanos/pull/4604\">https://github.com/thanos-io/thanos/pull/4604</a>)</li>\n</ul>\n<p><strong><a href=\"https://docs.qq.com/doc/DSUpUQmNRbEdaRkJ4\">团队开源贡献记录</a></strong></p>\n<p>在CS的路上以后还会越走越远，每一步都有巨大的坑在等着去填，希望我能达到自己的目标！</p>\n<p>对我感兴趣的或者是同道中人，欢迎加上我的微信，下面就是我的微信二维码，别忘了写清楚备注信息哦😄</p>\n<p><img src=\"http://csuzhang.info/about/WechatCode.jpg\" alt=\"个人微信\"></p>\n<h2 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h2><ul>\n<li><a href=\"https://github.com/zhyChesterCheung\">GitHub</a></li>\n<li><a href=\"https://weibo.com/u/5689093900\">Weibo</a></li>\n<li><a href=\"https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9\">知乎</a></li>\n<li><a href=\"https://www.facebook.com/chester.cheung.3538\">Facebook</a></li>\n<li><a href=\"https://twitter.com/ChesterCheung4\">Twitter</a></li>\n<li><a href=\"https://www.linkedin.com/in/chestercheung\">LinkedIn</a></li>\n<li>email：<a href=\"mailto:&#99;&#x68;&#101;&#117;&#110;&#x67;&#x2e;&#x7a;&#104;&#x79;&#46;&#x63;&#115;&#117;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;\">&#99;&#x68;&#101;&#117;&#110;&#x67;&#x2e;&#x7a;&#104;&#x79;&#46;&#x63;&#115;&#117;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a></li>\n<li>QQ number：2640617395</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p><img src=\"http://csuzhang.info/about/self.png\" alt=\"个人照片\"></p>\n<p>目前就读于中南大学本科，主修电子信息工程，辅修人工智能</p>\n<table>\n<thead>\n<tr>\n<th>Time</th>\n<th>Work</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2021.2-至今</td>\n<td>就职于腾讯PCG</td>\n</tr>\n<tr>\n<td>2020.9-2021.1</td>\n<td>互联网+医疗领域创业, 获百万级VC</td>\n</tr>\n<tr>\n<td>2020.6-2020.9</td>\n<td>上海声网Agora实习</td>\n</tr>\n<tr>\n<td>2020.1-2020.4</td>\n<td>商汤科技实习</td>\n</tr>\n</tbody></table>\n<p>简单总结了下自己大学期间参加过的获奖比赛，汇总表格下：</p>\n<table>\n<thead>\n<tr>\n<th>Time</th>\n<th>Work</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2021.9</td>\n<td>以实习生身份代表腾讯PCG进行校园招聘</td>\n</tr>\n<tr>\n<td>2021.8</td>\n<td>成为CNCF Thanos社区Contributor</td>\n</tr>\n<tr>\n<td>2021.8</td>\n<td>成为CNCF OpenTelemetry社区成员</td>\n</tr>\n<tr>\n<td>2021.7</td>\n<td>受理国家级发明专利一项</td>\n</tr>\n<tr>\n<td>2021.6</td>\n<td>成为CNCF OpenTelemetry社区Contributor</td>\n</tr>\n<tr>\n<td>2021.5</td>\n<td>成为腾讯OpenTelemetry Oteam PMC</td>\n</tr>\n<tr>\n<td>2020.11</td>\n<td>带领团队获得湖南省科技创新重点研发项目(省重点)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>年全国大学生软件创新大赛(国奖)</td>\n</tr>\n<tr>\n<td>2020</td>\n<td>湖南省大学生智能导航科技创新大赛(省奖)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>上海XdHack黑客马拉松(入围)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>京东5G应用设计创意大赛(入围)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>湖南省柳枝行动</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>Kaggle Competition 未来预测 &amp; 泰坦尼克号预测(银牌)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>清华大学GSF Innovation Accelerator创新孵化器(第三)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>华中HackFun黑客马拉松(入围)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>中国互联网+大学生创新创业大赛(省奖)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>全国大学生创新创业大赛(省奖)</td>\n</tr>\n<tr>\n<td>2019</td>\n<td>中国高校智能机器人创意大赛(校奖)</td>\n</tr>\n</tbody></table>\n<h2 id=\"知名开源社区贡献记录：\"><a href=\"#知名开源社区贡献记录：\" class=\"headerlink\" title=\"知名开源社区贡献记录：\"></a>知名开源社区贡献记录：</h2><h3 id=\"OpenTelemetry-Go\"><a href=\"#OpenTelemetry-Go\" class=\"headerlink\" title=\"OpenTelemetry-Go\"></a>OpenTelemetry-Go</h3><ul>\n<li><p>2021-08-19 zhyChesterCheung(张瀚元) 成为OpenTelemetry社区成员 <a href=\"https://github.com/open-telemetry/community/issues/813\">open-telemetry/community#813</a></p>\n</li>\n<li><p>2021-06-08 zhyChesterCheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/1973\">opentelemetry/opentelemetry-go#1973</a></p>\n</li>\n<li><p>2021-06-23 zhyChesterCheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2022\">open-telemetry/opentelemetry-go#2022</a></p>\n</li>\n<li><p>2021-07-22 zhyChesterCheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2097\">open-telemetry/opentelemetry-go#2097</a></p>\n</li>\n</ul>\n<h3 id=\"FuchsiaOS-docs-zh-CN\"><a href=\"#FuchsiaOS-docs-zh-CN\" class=\"headerlink\" title=\"FuchsiaOS-docs-zh_CN\"></a>FuchsiaOS-docs-zh_CN</h3><ul>\n<li>2021-06-13 zhyChesterCheung(张瀚元) <a href=\"https://github.com/FuchsiaOS/FuchsiaOS-docs-zh_CN/pull/67\">FuchsiaOS/FuchsiaOS-docs-zh_CN#67</a></li>\n<li>2021-06-13 zhyChesterCheung(张瀚元) <a href=\"https://github.com/FuchsiaOS/FuchsiaOS-docs-zh_CN/pull/69\">FuchsiaOS/FuchsiaOS-docs-zh_CN#69</a></li>\n</ul>\n<h3 id=\"Thanos\"><a href=\"#Thanos\" class=\"headerlink\" title=\"Thanos\"></a>Thanos</h3><ul>\n<li>2021-08-27 zhyChesterCheung(张瀚元) [thanos-io/thanos#4604] (<a href=\"https://github.com/thanos-io/thanos/pull/4604\">https://github.com/thanos-io/thanos/pull/4604</a>)</li>\n</ul>\n<p><strong><a href=\"https://docs.qq.com/doc/DSUpUQmNRbEdaRkJ4\">团队开源贡献记录</a></strong></p>\n<p>在CS的路上以后还会越走越远，每一步都有巨大的坑在等着去填，希望我能达到自己的目标！</p>\n<p>对我感兴趣的或者是同道中人，欢迎加上我的微信，下面就是我的微信二维码，别忘了写清楚备注信息哦😄</p>\n<p><img src=\"http://csuzhang.info/about/WechatCode.jpg\" alt=\"个人微信\"></p>\n<h2 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h2><ul>\n<li><a href=\"https://github.com/zhyChesterCheung\">GitHub</a></li>\n<li><a href=\"https://weibo.com/u/5689093900\">Weibo</a></li>\n<li><a href=\"https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9\">知乎</a></li>\n<li><a href=\"https://www.facebook.com/chester.cheung.3538\">Facebook</a></li>\n<li><a href=\"https://twitter.com/ChesterCheung4\">Twitter</a></li>\n<li><a href=\"https://www.linkedin.com/in/chestercheung\">LinkedIn</a></li>\n<li>email：<a href=\"mailto:&#99;&#x68;&#101;&#117;&#110;&#x67;&#x2e;&#x7a;&#104;&#x79;&#46;&#x63;&#115;&#117;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;\">&#99;&#x68;&#101;&#117;&#110;&#x67;&#x2e;&#x7a;&#104;&#x79;&#46;&#x63;&#115;&#117;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a></li>\n<li>QQ number：2640617395</li>\n</ul>\n"}],"Post":[{"layout":"post","title":"6.828 ZhyOS在macOS下的环境配置-2020","date":"2020-04-04T10:00:00.000Z","_content":"\n\n\n## 6.828 ZhyOS在macOS下的环境配置-2020\n\n> 本文主要介绍如何在macOS下配置mit 6.828 JOS的实验环境\n\n​    实习期做过一些业务之后，最直观的感受是做业务相对来说比较繁琐，每天疲于完成分配的需求，对个人成长来说不是特别大。和翔少一波交流后，还是想回归学校，利用余下不多的时间多打打基础，考虑抓抓基础以后往infrastructure方向发展。\n\n​    在进行JOS之前，在网上搜索关于JOS的开发环境，基本都是关于在ubuntu下的配置教程，很多博客和文章都提到*“不是32位linux就不好配置，会浪费大量时间在配置环境”*上之类的言论。奈何为囊中羞涩所困，在连续开了几个centOS后，本人OS X没有过多的存储资源可以使用，加上实在无法忍受开VMware恐怖的耗电量和发热量，尝试将开发环境移到`macOS`下。\n\n​    起初按照刘学长博客进行配置，但是出现一堆读不懂的error；简单碰壁后发现其实无比简单，在这里放上我的配置教程，过程非常简单可操作，希望能帮助到更多的coder完成这个项目。\n\n\n\n\n\n\n\n\n\n### 1. Tools we need\n\n配置环境之前，有两个工具是必须要进行配置的：\n\n+ Homebrew\n\n+ Macports\n\n  建议大家直接Google，按照官网公开的方法进行配置即可～(需要在管理员模式下进行，否则会遇到很多Permission Denied的报错，通常难以解决，本菜🐔也被困扰很久)\n\n  \n\n### 2. 运行JOS demo\n\n+ QEMU\n\n  在Homebrew工具下，直接利用brew即可安装i386-jos-elf-gcc和i386-jos-elf-gdb\n\n```\nbrew tap liudangyi/i386-jos-elf-gcc //添加第三方库\nbrew install i386-jos-elf-gcc i386-jos-elf-gdb\n```\n\n\n\n+ 官网克隆源码\n\n  从mit课程官网得到6.828的git地址，发现从2018年后就未更新，所以我们用2018的代码实现\n\n```\nmkdir ~/6.828\ncd 6.828\ngit clone https://pdos.csail.mit.edu/6.828/2018/jos.git lab\n```\n\n\n\n+ make jos的boot loader和kernel\n\n```\ncd ./lab\nmake\n```\n\n\n\n+ 成功后及显示\n\n```\n+ as kern/entry.S\n+ cc kern/entrypgdir.c\n+ cc kern/init.c\n+ cc kern/console.c\n+ cc kern/monitor.c\n+ cc kern/printf.c\n+ cc kern/kdebug.c\n+ cc lib/printfmt.c\n+ cc lib/readline.c\n+ cc lib/string.c\n+ ld obj/kern/kernel\ni386-jos-elf-ld: warning: section `.bss' type changed to PROGBITS\n+ as boot/boot.S\n+ cc -Os boot/main.c\n+ ld boot/boot\nboot block is 382 bytes (max 510)\n+ mk obj/kern/kernel.img\n```\n\n\n\n+ 启动JOS qemu\n\n```\nmake qemu\n```\n\n此时即可成功启动JOS，enjoy～\n\n\n\n### 3. 持续关注\n\n​    正值疫情老虎徘徊，再加上工作需求和学业压力，今天先完成了相关环境的配置，后续会继续进行OS的开发和学习，计划在一个月内完成这6个Lab，自己学习的过程中也帮助大家踩踩坑，祝大家都能早日拿到心仪的offer～\n\n","source":"_posts/2020-04-4-JOS.md","raw":"---\nlayout: post\ntitle:  \"6.828 ZhyOS在macOS下的环境配置-2020\"\ndate: 2020-4-4 18:00:00\ncategories: OS\ntags: OS\n---\n\n\n\n## 6.828 ZhyOS在macOS下的环境配置-2020\n\n> 本文主要介绍如何在macOS下配置mit 6.828 JOS的实验环境\n\n​    实习期做过一些业务之后，最直观的感受是做业务相对来说比较繁琐，每天疲于完成分配的需求，对个人成长来说不是特别大。和翔少一波交流后，还是想回归学校，利用余下不多的时间多打打基础，考虑抓抓基础以后往infrastructure方向发展。\n\n​    在进行JOS之前，在网上搜索关于JOS的开发环境，基本都是关于在ubuntu下的配置教程，很多博客和文章都提到*“不是32位linux就不好配置，会浪费大量时间在配置环境”*上之类的言论。奈何为囊中羞涩所困，在连续开了几个centOS后，本人OS X没有过多的存储资源可以使用，加上实在无法忍受开VMware恐怖的耗电量和发热量，尝试将开发环境移到`macOS`下。\n\n​    起初按照刘学长博客进行配置，但是出现一堆读不懂的error；简单碰壁后发现其实无比简单，在这里放上我的配置教程，过程非常简单可操作，希望能帮助到更多的coder完成这个项目。\n\n\n\n\n\n\n\n\n\n### 1. Tools we need\n\n配置环境之前，有两个工具是必须要进行配置的：\n\n+ Homebrew\n\n+ Macports\n\n  建议大家直接Google，按照官网公开的方法进行配置即可～(需要在管理员模式下进行，否则会遇到很多Permission Denied的报错，通常难以解决，本菜🐔也被困扰很久)\n\n  \n\n### 2. 运行JOS demo\n\n+ QEMU\n\n  在Homebrew工具下，直接利用brew即可安装i386-jos-elf-gcc和i386-jos-elf-gdb\n\n```\nbrew tap liudangyi/i386-jos-elf-gcc //添加第三方库\nbrew install i386-jos-elf-gcc i386-jos-elf-gdb\n```\n\n\n\n+ 官网克隆源码\n\n  从mit课程官网得到6.828的git地址，发现从2018年后就未更新，所以我们用2018的代码实现\n\n```\nmkdir ~/6.828\ncd 6.828\ngit clone https://pdos.csail.mit.edu/6.828/2018/jos.git lab\n```\n\n\n\n+ make jos的boot loader和kernel\n\n```\ncd ./lab\nmake\n```\n\n\n\n+ 成功后及显示\n\n```\n+ as kern/entry.S\n+ cc kern/entrypgdir.c\n+ cc kern/init.c\n+ cc kern/console.c\n+ cc kern/monitor.c\n+ cc kern/printf.c\n+ cc kern/kdebug.c\n+ cc lib/printfmt.c\n+ cc lib/readline.c\n+ cc lib/string.c\n+ ld obj/kern/kernel\ni386-jos-elf-ld: warning: section `.bss' type changed to PROGBITS\n+ as boot/boot.S\n+ cc -Os boot/main.c\n+ ld boot/boot\nboot block is 382 bytes (max 510)\n+ mk obj/kern/kernel.img\n```\n\n\n\n+ 启动JOS qemu\n\n```\nmake qemu\n```\n\n此时即可成功启动JOS，enjoy～\n\n\n\n### 3. 持续关注\n\n​    正值疫情老虎徘徊，再加上工作需求和学业压力，今天先完成了相关环境的配置，后续会继续进行OS的开发和学习，计划在一个月内完成这6个Lab，自己学习的过程中也帮助大家踩踩坑，祝大家都能早日拿到心仪的offer～\n\n","slug":"2020-04-4-JOS","published":1,"updated":"2021-09-20T11:38:35.010Z","comments":1,"photos":[],"link":"","_id":"ckugphtc40001vev7ctyu7p1m","content":"<h2 id=\"6-828-ZhyOS在macOS下的环境配置-2020\"><a href=\"#6-828-ZhyOS在macOS下的环境配置-2020\" class=\"headerlink\" title=\"6.828 ZhyOS在macOS下的环境配置-2020\"></a>6.828 ZhyOS在macOS下的环境配置-2020</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文主要介绍如何在macOS下配置mit 6.828 JOS的实验环境</p></blockquote>\n<p>​    实习期做过一些业务之后，最直观的感受是做业务相对来说比较繁琐，每天疲于完成分配的需求，对个人成长来说不是特别大。和翔少一波交流后，还是想回归学校，利用余下不多的时间多打打基础，考虑抓抓基础以后往infrastructure方向发展。</p>\n<p>​    在进行JOS之前，在网上搜索关于JOS的开发环境，基本都是关于在ubuntu下的配置教程，很多博客和文章都提到<em>“不是32位linux就不好配置，会浪费大量时间在配置环境”</em>上之类的言论。奈何为囊中羞涩所困，在连续开了几个centOS后，本人OS X没有过多的存储资源可以使用，加上实在无法忍受开VMware恐怖的耗电量和发热量，尝试将开发环境移到<code>macOS</code>下。</p>\n<p>​    起初按照刘学长博客进行配置，但是出现一堆读不懂的error；简单碰壁后发现其实无比简单，在这里放上我的配置教程，过程非常简单可操作，希望能帮助到更多的coder完成这个项目。</p>\n<h3 id=\"1-Tools-we-need\"><a href=\"#1-Tools-we-need\" class=\"headerlink\" title=\"1. Tools we need\"></a>1. Tools we need</h3><p>配置环境之前，有两个工具是必须要进行配置的：</p>\n<ul>\n<li><p>Homebrew</p>\n</li>\n<li><p>Macports</p>\n<p>建议大家直接Google，按照官网公开的方法进行配置即可～(需要在管理员模式下进行，否则会遇到很多Permission Denied的报错，通常难以解决，本菜🐔也被困扰很久)</p>\n</li>\n</ul>\n<h3 id=\"2-运行JOS-demo\"><a href=\"#2-运行JOS-demo\" class=\"headerlink\" title=\"2. 运行JOS demo\"></a>2. 运行JOS demo</h3><ul>\n<li><p>QEMU</p>\n<p>在Homebrew工具下，直接利用brew即可安装i386-jos-elf-gcc和i386-jos-elf-gdb</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">brew tap liudangyi&#x2F;i386-jos-elf-gcc &#x2F;&#x2F;添加第三方库\nbrew install i386-jos-elf-gcc i386-jos-elf-gdb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li><p>官网克隆源码</p>\n<p>从mit课程官网得到6.828的git地址，发现从2018年后就未更新，所以我们用2018的代码实现</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mkdir ~&#x2F;6.828\ncd 6.828\ngit clone https:&#x2F;&#x2F;pdos.csail.mit.edu&#x2F;6.828&#x2F;2018&#x2F;jos.git lab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li>make jos的boot loader和kernel</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cd .&#x2F;lab\nmake<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li>成功后及显示</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">+ as kern&#x2F;entry.S\n+ cc kern&#x2F;entrypgdir.c\n+ cc kern&#x2F;init.c\n+ cc kern&#x2F;console.c\n+ cc kern&#x2F;monitor.c\n+ cc kern&#x2F;printf.c\n+ cc kern&#x2F;kdebug.c\n+ cc lib&#x2F;printfmt.c\n+ cc lib&#x2F;readline.c\n+ cc lib&#x2F;string.c\n+ ld obj&#x2F;kern&#x2F;kernel\ni386-jos-elf-ld: warning: section &#96;.bss&#39; type changed to PROGBITS\n+ as boot&#x2F;boot.S\n+ cc -Os boot&#x2F;main.c\n+ ld boot&#x2F;boot\nboot block is 382 bytes (max 510)\n+ mk obj&#x2F;kern&#x2F;kernel.img<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li>启动JOS qemu</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">make qemu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此时即可成功启动JOS，enjoy～</p>\n<h3 id=\"3-持续关注\"><a href=\"#3-持续关注\" class=\"headerlink\" title=\"3. 持续关注\"></a>3. 持续关注</h3><p>​    正值疫情老虎徘徊，再加上工作需求和学业压力，今天先完成了相关环境的配置，后续会继续进行OS的开发和学习，计划在一个月内完成这6个Lab，自己学习的过程中也帮助大家踩踩坑，祝大家都能早日拿到心仪的offer～</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"6-828-ZhyOS在macOS下的环境配置-2020\"><a href=\"#6-828-ZhyOS在macOS下的环境配置-2020\" class=\"headerlink\" title=\"6.828 ZhyOS在macOS下的环境配置-2020\"></a>6.828 ZhyOS在macOS下的环境配置-2020</h2><blockquote>\n<p>本文主要介绍如何在macOS下配置mit 6.828 JOS的实验环境</p>\n</blockquote>\n<p>​    实习期做过一些业务之后，最直观的感受是做业务相对来说比较繁琐，每天疲于完成分配的需求，对个人成长来说不是特别大。和翔少一波交流后，还是想回归学校，利用余下不多的时间多打打基础，考虑抓抓基础以后往infrastructure方向发展。</p>\n<p>​    在进行JOS之前，在网上搜索关于JOS的开发环境，基本都是关于在ubuntu下的配置教程，很多博客和文章都提到<em>“不是32位linux就不好配置，会浪费大量时间在配置环境”</em>上之类的言论。奈何为囊中羞涩所困，在连续开了几个centOS后，本人OS X没有过多的存储资源可以使用，加上实在无法忍受开VMware恐怖的耗电量和发热量，尝试将开发环境移到<code>macOS</code>下。</p>\n<p>​    起初按照刘学长博客进行配置，但是出现一堆读不懂的error；简单碰壁后发现其实无比简单，在这里放上我的配置教程，过程非常简单可操作，希望能帮助到更多的coder完成这个项目。</p>\n<h3 id=\"1-Tools-we-need\"><a href=\"#1-Tools-we-need\" class=\"headerlink\" title=\"1. Tools we need\"></a>1. Tools we need</h3><p>配置环境之前，有两个工具是必须要进行配置的：</p>\n<ul>\n<li><p>Homebrew</p>\n</li>\n<li><p>Macports</p>\n<p>建议大家直接Google，按照官网公开的方法进行配置即可～(需要在管理员模式下进行，否则会遇到很多Permission Denied的报错，通常难以解决，本菜🐔也被困扰很久)</p>\n</li>\n</ul>\n<h3 id=\"2-运行JOS-demo\"><a href=\"#2-运行JOS-demo\" class=\"headerlink\" title=\"2. 运行JOS demo\"></a>2. 运行JOS demo</h3><ul>\n<li><p>QEMU</p>\n<p>在Homebrew工具下，直接利用brew即可安装i386-jos-elf-gcc和i386-jos-elf-gdb</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">brew tap liudangyi&#x2F;i386-jos-elf-gcc &#x2F;&#x2F;添加第三方库\nbrew install i386-jos-elf-gcc i386-jos-elf-gdb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li><p>官网克隆源码</p>\n<p>从mit课程官网得到6.828的git地址，发现从2018年后就未更新，所以我们用2018的代码实现</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mkdir ~&#x2F;6.828\ncd 6.828\ngit clone https:&#x2F;&#x2F;pdos.csail.mit.edu&#x2F;6.828&#x2F;2018&#x2F;jos.git lab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li>make jos的boot loader和kernel</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cd .&#x2F;lab\nmake<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li>成功后及显示</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">+ as kern&#x2F;entry.S\n+ cc kern&#x2F;entrypgdir.c\n+ cc kern&#x2F;init.c\n+ cc kern&#x2F;console.c\n+ cc kern&#x2F;monitor.c\n+ cc kern&#x2F;printf.c\n+ cc kern&#x2F;kdebug.c\n+ cc lib&#x2F;printfmt.c\n+ cc lib&#x2F;readline.c\n+ cc lib&#x2F;string.c\n+ ld obj&#x2F;kern&#x2F;kernel\ni386-jos-elf-ld: warning: section &#96;.bss&#39; type changed to PROGBITS\n+ as boot&#x2F;boot.S\n+ cc -Os boot&#x2F;main.c\n+ ld boot&#x2F;boot\nboot block is 382 bytes (max 510)\n+ mk obj&#x2F;kern&#x2F;kernel.img<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li>启动JOS qemu</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">make qemu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此时即可成功启动JOS，enjoy～</p>\n<h3 id=\"3-持续关注\"><a href=\"#3-持续关注\" class=\"headerlink\" title=\"3. 持续关注\"></a>3. 持续关注</h3><p>​    正值疫情老虎徘徊，再加上工作需求和学业压力，今天先完成了相关环境的配置，后续会继续进行OS的开发和学习，计划在一个月内完成这6个Lab，自己学习的过程中也帮助大家踩踩坑，祝大家都能早日拿到心仪的offer～</p>\n"},{"layout":"post","title":"串口通信相关参数","date":"2020-01-14T06:00:00.000Z","_content":"\n\n### 串行通信定义\n\n串行通信是计算机通信的主要方式之一，起到主机与外设之间以及主机之间的数据传输作用，因此串行通信的接口上计算机系统中的常用接口。\n\n\n\n\n\n\n\n串行通信是指通信双方按位进行，遵守时序的一种通信方式。数据按位依次传输，每位数据占据固定的时间长度，即可使用少数几条通信线路就可以完成系统之间的信息交换。串行总线通信的显著特点是：通信线路少，布线简便易行，施工方便，系统间协议自由度以及灵活度较高。\n\n### 分类\n\n> 同步通信\n\n同步通信是一种连续串行传输数据的通信方式，一次传输只传送一帧信息，其中通常包含若干个数据字符。\n\n这里的信息帧由同步字符、数据字符和校验字符组成，同步字符用于确定数据字符的开始，一半是固定的开头同步字；数据字符在同步字符之后，由所需传输的数据块的长度决定；校验字符有1-2个，用于接收端对接收到的字符序列进行正确性的校验，常用奇偶校验法。\n\n同步通信是按位传输。\n\n>   异步通信\n\n异步通信在发送字符时，所发送的字符之间的时间间隔是任意的，接收端要时刻做好接受的准备。因为能在任一时刻发送字符，所以必须在每一个字符的开始和结束的地方加上标志(开始位，停止位)，因此异步通信的好处是通信设备简单便宜，但是传输效率低下。\n","source":"_posts/2020-1-14-serial-communication.md","raw":"---\nlayout: post\ntitle:  \"串口通信相关参数\"\ndate: 2020-1-14 14:00:00\ncategories: OS\ntags: \n  - OS \n  - web \n  - Test\n---\n\n\n### 串行通信定义\n\n串行通信是计算机通信的主要方式之一，起到主机与外设之间以及主机之间的数据传输作用，因此串行通信的接口上计算机系统中的常用接口。\n\n\n\n\n\n\n\n串行通信是指通信双方按位进行，遵守时序的一种通信方式。数据按位依次传输，每位数据占据固定的时间长度，即可使用少数几条通信线路就可以完成系统之间的信息交换。串行总线通信的显著特点是：通信线路少，布线简便易行，施工方便，系统间协议自由度以及灵活度较高。\n\n### 分类\n\n> 同步通信\n\n同步通信是一种连续串行传输数据的通信方式，一次传输只传送一帧信息，其中通常包含若干个数据字符。\n\n这里的信息帧由同步字符、数据字符和校验字符组成，同步字符用于确定数据字符的开始，一半是固定的开头同步字；数据字符在同步字符之后，由所需传输的数据块的长度决定；校验字符有1-2个，用于接收端对接收到的字符序列进行正确性的校验，常用奇偶校验法。\n\n同步通信是按位传输。\n\n>   异步通信\n\n异步通信在发送字符时，所发送的字符之间的时间间隔是任意的，接收端要时刻做好接受的准备。因为能在任一时刻发送字符，所以必须在每一个字符的开始和结束的地方加上标志(开始位，停止位)，因此异步通信的好处是通信设备简单便宜，但是传输效率低下。\n","slug":"2020-1-14-serial-communication","published":1,"updated":"2021-09-20T11:39:42.858Z","comments":1,"photos":[],"link":"","_id":"ckugphtcl0002vev79yor57ms","content":"<h3 id=\"串行通信定义\"><a href=\"#串行通信定义\" class=\"headerlink\" title=\"串行通信定义\"></a>串行通信定义</h3><p>串行通信是计算机通信的主要方式之一，起到主机与外设之间以及主机之间的数据传输作用，因此串行通信的接口上计算机系统中的常用接口。</p>\n<p>串行通信是指通信双方按位进行，遵守时序的一种通信方式。数据按位依次传输，每位数据占据固定的时间长度，即可使用少数几条通信线路就可以完成系统之间的信息交换。串行总线通信的显著特点是：通信线路少，布线简便易行，施工方便，系统间协议自由度以及灵活度较高。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>同步通信</p></blockquote>\n<p>同步通信是一种连续串行传输数据的通信方式，一次传输只传送一帧信息，其中通常包含若干个数据字符。</p>\n<p>这里的信息帧由同步字符、数据字符和校验字符组成，同步字符用于确定数据字符的开始，一半是固定的开头同步字；数据字符在同步字符之后，由所需传输的数据块的长度决定；校验字符有1-2个，用于接收端对接收到的字符序列进行正确性的校验，常用奇偶校验法。</p>\n<p>同步通信是按位传输。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>  异步通信</p></blockquote>\n<p>异步通信在发送字符时，所发送的字符之间的时间间隔是任意的，接收端要时刻做好接受的准备。因为能在任一时刻发送字符，所以必须在每一个字符的开始和结束的地方加上标志(开始位，停止位)，因此异步通信的好处是通信设备简单便宜，但是传输效率低下。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"串行通信定义\"><a href=\"#串行通信定义\" class=\"headerlink\" title=\"串行通信定义\"></a>串行通信定义</h3><p>串行通信是计算机通信的主要方式之一，起到主机与外设之间以及主机之间的数据传输作用，因此串行通信的接口上计算机系统中的常用接口。</p>\n<p>串行通信是指通信双方按位进行，遵守时序的一种通信方式。数据按位依次传输，每位数据占据固定的时间长度，即可使用少数几条通信线路就可以完成系统之间的信息交换。串行总线通信的显著特点是：通信线路少，布线简便易行，施工方便，系统间协议自由度以及灵活度较高。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><blockquote>\n<p>同步通信</p>\n</blockquote>\n<p>同步通信是一种连续串行传输数据的通信方式，一次传输只传送一帧信息，其中通常包含若干个数据字符。</p>\n<p>这里的信息帧由同步字符、数据字符和校验字符组成，同步字符用于确定数据字符的开始，一半是固定的开头同步字；数据字符在同步字符之后，由所需传输的数据块的长度决定；校验字符有1-2个，用于接收端对接收到的字符序列进行正确性的校验，常用奇偶校验法。</p>\n<p>同步通信是按位传输。</p>\n<blockquote>\n<p>  异步通信</p>\n</blockquote>\n<p>异步通信在发送字符时，所发送的字符之间的时间间隔是任意的，接收端要时刻做好接受的准备。因为能在任一时刻发送字符，所以必须在每一个字符的开始和结束的地方加上标志(开始位，停止位)，因此异步通信的好处是通信设备简单便宜，但是传输效率低下。</p>\n"},{"layout":"post","title":"API接口测试入门","date":"2020-01-20T12:00:00.000Z","_content":"\n\n\n\n\n## API接口测试入门\n\n> API是Application Programming Interface的简写，我们又把接口测试叫做API测试，主要用于实现多个系统之间或系统内部模块之间的通信和数据交换的能力。\n\n\n\n\n\n\n\n\n### 1.接口定义\n\n接口测试主要用于系统与系统之间以及内部各个子系统或模块之间的交互点。定义特定的交互点，然后通过这些交互点，以及一些特殊的规则也就是协议，来进行数据之间的交互。前后端之间配合工作，就是其中一方定义实现接口，另一方来调用接口，以实现预期功能。\n\n举个简单的例子，我们在开车踩油门时，并不需要知道油门内部的零线/火线以及具体的电路结构，因为汽车制造商已经将给油的一系列操作全部封装成了油门这样一个接口，用户只要傻瓜式地进行踩油门的操作就可以让汽车实现加速。\n\n### 2.接口分类\n\n> WebService和HTTP\n\n（1）WebService接口走soap协议，请求报文和返回报文都是xml格式，通过SoapUI工具进行测试；\n\n（2）HTTP API接口走HTTP协议，通过路径来区分调用的方法，请求报文入参有多种形式，返回报文一般为json串，最常见的是get和post方法。\n\n### 3.接口测试必要性\n\n（1）效率上：\n现在系统的复杂性与日俱增，传统测试方法人工成本过高且效率低下，而接口测试比较容易实现自动化集成，减少人工成本与时间，缩短测试周期；\n\n（2）安全上：\n前后端架构分离，只依靠前端进行测试已经完全不能满足系统安全要求，绕过前面实在太容易，需要后端同样进行控制，在这种情况下就需要从接口层面验证。\n\n### 4.接口测试原理\n\n通过程序模拟客户端向服务器发送请求报文，服务器接收请求报文后对报文做处理并向客户端返回应答，客户端再接收应答的一个过程。\n\n### 5.接口文档关键部分\n\n接口说明\n\n调用的url\n\n请求方法（get、post）\n\n请求参数，参数类型、请求参数说明\n\n返回参数说明\n\n返回示例\n\n### 6.接口测试分类\n\n（1）功能测试：\n由于是针对基本业务功能进行测试，这部分是两种测试重合度最高的一块，开发同学通常所指的也主要是这部分的内容。\n测试覆盖：业务流程，参数类型、可选项等。\n\n（2）边界分析测试：\n在基本功能测试的基础上考虑输入输出的边界条件。相对来说接口可以覆盖的范围很广，同样的，接口出现问题的概率也更高。\n测试覆盖：边界值、特殊字符等。\n\n（3）性能测试：\n接口性能主要关注接口响应时间、并发、服务端资源的使用情况等。越靠近底层，对于系统的性能优化越有利。\n测试覆盖：并发数、吞吐量、tps等\n\n### 7.接口测试工具\n\nPostman，jmeter，soupUI等测试工具。\n\n\n## 测试用例基本概念拓展\n\n> 简单来说，测试用例就是一个文档，描述输入、输出、动作、时间等，其目的是确定应用程序的某个特性是否正常工作，并且达到程序所设计的期望结果。\n\n### 测试用例的作用\n\n+ 有效性\n\n避免穷举测试，选取代表性的测试数据进行测试，节省时间和资源，提高测试效率\n\n+ 避免测试的盲目性\n\n开始测试之前设计好测试用例，避免盲目测试，使得重点突出、目的明确\n\n+ 可维护性\n\n软件版本更新后，只需部分修正测试用例即可继续开展，降低工作强度，缩短项目周期\n\n+ 可复用性\n\n项目功能的模块化，使软件易于开发，使得测试过程事半功倍\n\n+ 可评估性\n\n程序代码的质量的量化标准应该用测试用例的通过率和测试输出软件缺陷的数目来进行评估\n\n+ 可管理性\n\n测试用例是测试人员的重要参考依据，也可以作为检验测试进度、测试工作量的因素，来对测试工作进行有效管理\n\n### 测试用例的设计\n\n通常由经验丰富的测试人员设计测试用例，经验较少的人员从执行测试用例开始进行，随着经验和技术的积累，再逐渐开始参与测试用例的设计工作。\n\n### tip1.测试设计说明\n\n类似开发人员有项目开发功能书一样，测试人员也要有说明书来指导测试人员如何设计测试用例，包括但不限于：被测特性、测试所用的方法、测试准则等。\n\n+ 标识符\n\n+ 被测特性\n\n+ 方法\n\n+ 测试用例信息\n\n+ 通过/失败规则\n\n### tip2.测试用例编写\n\n+ 用例的编号\n\n由测试引用的唯一标识符，便于查找测试用例，也便于用例的追踪和管理\n\n+ 测试标题\n\n对测试用例的描述，清楚表达用例的相关用途等\n\n+ 测试项\n\n测试用例应该具体详细的描述所测试项的详细特征，更加详细具体\n\n+ 测试环境要求\n\n该测试用例执行的外部条件，软硬件具体指标和测试工具等\n\n+ 特殊要求\n\n对环境的特殊需求，如所需设备型号、对防火墙等的特殊设置\n\n+ 测试输入说明\n\n提供测试执行中的各种输入条件。根据需求中的输入条件，确定测试用例的输入。\n\n+ 操作步骤\n\n提供测试执行的过程步骤，对于复杂的用例，应该分为几个步骤分别完成测试。\n\n+ 预期结果\n\n提供测试执行的预期结果，预期结果应该根据软件需求中的输出得出。如实际结果与预期结果不符合，则测试不通过。\n\n+ 测试用例之间的关联\n\n用来标示该测试用例和其他测试用例之间的依赖关系。在实际测试中，很多测试用例并不是单独存在的，而是可能存在 某种相互依赖关系。\n\n+ 测试用例设计人员和测试人员\n\n+ 测试优先级\n\n一般分为0～4的一共5个等级，通过优先级来标注出软件测试的重点和先后顺序。\n\n### 测试用例的分类和阶段\n\n测试阶段|测试类型|执行人员\n--|:--:|--:\n单元测试|模块功能测试、部分接口测试、覆盖测试、路径测试|开发与测试结合\n集成测试|接口测试、路径测试、部分功能测试|开发与测试结合或测试\n系统测试|功能测试、兼容性测试、性能测试、用户界面测试、安全性测试、强度测试、可靠性测试|测试人员\n验收测试|对于实际项目基本同上、包含文档测试|测试人员或包含用户\n\n\n\n","source":"_posts/2020-1-20-API-test-learning.md","raw":"---\nlayout: post\ntitle:  \"API接口测试入门\"\ndate: 2020-1-20 20:00:00\ncategories: Test\ntags: \n  - OS \n  - Test\n---\n\n\n\n\n\n## API接口测试入门\n\n> API是Application Programming Interface的简写，我们又把接口测试叫做API测试，主要用于实现多个系统之间或系统内部模块之间的通信和数据交换的能力。\n\n\n\n\n\n\n\n\n### 1.接口定义\n\n接口测试主要用于系统与系统之间以及内部各个子系统或模块之间的交互点。定义特定的交互点，然后通过这些交互点，以及一些特殊的规则也就是协议，来进行数据之间的交互。前后端之间配合工作，就是其中一方定义实现接口，另一方来调用接口，以实现预期功能。\n\n举个简单的例子，我们在开车踩油门时，并不需要知道油门内部的零线/火线以及具体的电路结构，因为汽车制造商已经将给油的一系列操作全部封装成了油门这样一个接口，用户只要傻瓜式地进行踩油门的操作就可以让汽车实现加速。\n\n### 2.接口分类\n\n> WebService和HTTP\n\n（1）WebService接口走soap协议，请求报文和返回报文都是xml格式，通过SoapUI工具进行测试；\n\n（2）HTTP API接口走HTTP协议，通过路径来区分调用的方法，请求报文入参有多种形式，返回报文一般为json串，最常见的是get和post方法。\n\n### 3.接口测试必要性\n\n（1）效率上：\n现在系统的复杂性与日俱增，传统测试方法人工成本过高且效率低下，而接口测试比较容易实现自动化集成，减少人工成本与时间，缩短测试周期；\n\n（2）安全上：\n前后端架构分离，只依靠前端进行测试已经完全不能满足系统安全要求，绕过前面实在太容易，需要后端同样进行控制，在这种情况下就需要从接口层面验证。\n\n### 4.接口测试原理\n\n通过程序模拟客户端向服务器发送请求报文，服务器接收请求报文后对报文做处理并向客户端返回应答，客户端再接收应答的一个过程。\n\n### 5.接口文档关键部分\n\n接口说明\n\n调用的url\n\n请求方法（get、post）\n\n请求参数，参数类型、请求参数说明\n\n返回参数说明\n\n返回示例\n\n### 6.接口测试分类\n\n（1）功能测试：\n由于是针对基本业务功能进行测试，这部分是两种测试重合度最高的一块，开发同学通常所指的也主要是这部分的内容。\n测试覆盖：业务流程，参数类型、可选项等。\n\n（2）边界分析测试：\n在基本功能测试的基础上考虑输入输出的边界条件。相对来说接口可以覆盖的范围很广，同样的，接口出现问题的概率也更高。\n测试覆盖：边界值、特殊字符等。\n\n（3）性能测试：\n接口性能主要关注接口响应时间、并发、服务端资源的使用情况等。越靠近底层，对于系统的性能优化越有利。\n测试覆盖：并发数、吞吐量、tps等\n\n### 7.接口测试工具\n\nPostman，jmeter，soupUI等测试工具。\n\n\n## 测试用例基本概念拓展\n\n> 简单来说，测试用例就是一个文档，描述输入、输出、动作、时间等，其目的是确定应用程序的某个特性是否正常工作，并且达到程序所设计的期望结果。\n\n### 测试用例的作用\n\n+ 有效性\n\n避免穷举测试，选取代表性的测试数据进行测试，节省时间和资源，提高测试效率\n\n+ 避免测试的盲目性\n\n开始测试之前设计好测试用例，避免盲目测试，使得重点突出、目的明确\n\n+ 可维护性\n\n软件版本更新后，只需部分修正测试用例即可继续开展，降低工作强度，缩短项目周期\n\n+ 可复用性\n\n项目功能的模块化，使软件易于开发，使得测试过程事半功倍\n\n+ 可评估性\n\n程序代码的质量的量化标准应该用测试用例的通过率和测试输出软件缺陷的数目来进行评估\n\n+ 可管理性\n\n测试用例是测试人员的重要参考依据，也可以作为检验测试进度、测试工作量的因素，来对测试工作进行有效管理\n\n### 测试用例的设计\n\n通常由经验丰富的测试人员设计测试用例，经验较少的人员从执行测试用例开始进行，随着经验和技术的积累，再逐渐开始参与测试用例的设计工作。\n\n### tip1.测试设计说明\n\n类似开发人员有项目开发功能书一样，测试人员也要有说明书来指导测试人员如何设计测试用例，包括但不限于：被测特性、测试所用的方法、测试准则等。\n\n+ 标识符\n\n+ 被测特性\n\n+ 方法\n\n+ 测试用例信息\n\n+ 通过/失败规则\n\n### tip2.测试用例编写\n\n+ 用例的编号\n\n由测试引用的唯一标识符，便于查找测试用例，也便于用例的追踪和管理\n\n+ 测试标题\n\n对测试用例的描述，清楚表达用例的相关用途等\n\n+ 测试项\n\n测试用例应该具体详细的描述所测试项的详细特征，更加详细具体\n\n+ 测试环境要求\n\n该测试用例执行的外部条件，软硬件具体指标和测试工具等\n\n+ 特殊要求\n\n对环境的特殊需求，如所需设备型号、对防火墙等的特殊设置\n\n+ 测试输入说明\n\n提供测试执行中的各种输入条件。根据需求中的输入条件，确定测试用例的输入。\n\n+ 操作步骤\n\n提供测试执行的过程步骤，对于复杂的用例，应该分为几个步骤分别完成测试。\n\n+ 预期结果\n\n提供测试执行的预期结果，预期结果应该根据软件需求中的输出得出。如实际结果与预期结果不符合，则测试不通过。\n\n+ 测试用例之间的关联\n\n用来标示该测试用例和其他测试用例之间的依赖关系。在实际测试中，很多测试用例并不是单独存在的，而是可能存在 某种相互依赖关系。\n\n+ 测试用例设计人员和测试人员\n\n+ 测试优先级\n\n一般分为0～4的一共5个等级，通过优先级来标注出软件测试的重点和先后顺序。\n\n### 测试用例的分类和阶段\n\n测试阶段|测试类型|执行人员\n--|:--:|--:\n单元测试|模块功能测试、部分接口测试、覆盖测试、路径测试|开发与测试结合\n集成测试|接口测试、路径测试、部分功能测试|开发与测试结合或测试\n系统测试|功能测试、兼容性测试、性能测试、用户界面测试、安全性测试、强度测试、可靠性测试|测试人员\n验收测试|对于实际项目基本同上、包含文档测试|测试人员或包含用户\n\n\n\n","slug":"2020-1-20-API-test-learning","published":1,"updated":"2021-09-20T11:40:05.890Z","comments":1,"photos":[],"link":"","_id":"ckugphtdv0005vev715qf329m","content":"<h2 id=\"API接口测试入门\"><a href=\"#API接口测试入门\" class=\"headerlink\" title=\"API接口测试入门\"></a>API接口测试入门</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>API是Application Programming Interface的简写，我们又把接口测试叫做API测试，主要用于实现多个系统之间或系统内部模块之间的通信和数据交换的能力。</p></blockquote>\n<h3 id=\"1-接口定义\"><a href=\"#1-接口定义\" class=\"headerlink\" title=\"1.接口定义\"></a>1.接口定义</h3><p>接口测试主要用于系统与系统之间以及内部各个子系统或模块之间的交互点。定义特定的交互点，然后通过这些交互点，以及一些特殊的规则也就是协议，来进行数据之间的交互。前后端之间配合工作，就是其中一方定义实现接口，另一方来调用接口，以实现预期功能。</p>\n<p>举个简单的例子，我们在开车踩油门时，并不需要知道油门内部的零线/火线以及具体的电路结构，因为汽车制造商已经将给油的一系列操作全部封装成了油门这样一个接口，用户只要傻瓜式地进行踩油门的操作就可以让汽车实现加速。</p>\n<h3 id=\"2-接口分类\"><a href=\"#2-接口分类\" class=\"headerlink\" title=\"2.接口分类\"></a>2.接口分类</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>WebService和HTTP</p></blockquote>\n<p>（1）WebService接口走soap协议，请求报文和返回报文都是xml格式，通过SoapUI工具进行测试；</p>\n<p>（2）HTTP API接口走HTTP协议，通过路径来区分调用的方法，请求报文入参有多种形式，返回报文一般为json串，最常见的是get和post方法。</p>\n<h3 id=\"3-接口测试必要性\"><a href=\"#3-接口测试必要性\" class=\"headerlink\" title=\"3.接口测试必要性\"></a>3.接口测试必要性</h3><p>（1）效率上：<br>现在系统的复杂性与日俱增，传统测试方法人工成本过高且效率低下，而接口测试比较容易实现自动化集成，减少人工成本与时间，缩短测试周期；</p>\n<p>（2）安全上：<br>前后端架构分离，只依靠前端进行测试已经完全不能满足系统安全要求，绕过前面实在太容易，需要后端同样进行控制，在这种情况下就需要从接口层面验证。</p>\n<h3 id=\"4-接口测试原理\"><a href=\"#4-接口测试原理\" class=\"headerlink\" title=\"4.接口测试原理\"></a>4.接口测试原理</h3><p>通过程序模拟客户端向服务器发送请求报文，服务器接收请求报文后对报文做处理并向客户端返回应答，客户端再接收应答的一个过程。</p>\n<h3 id=\"5-接口文档关键部分\"><a href=\"#5-接口文档关键部分\" class=\"headerlink\" title=\"5.接口文档关键部分\"></a>5.接口文档关键部分</h3><p>接口说明</p>\n<p>调用的url</p>\n<p>请求方法（get、post）</p>\n<p>请求参数，参数类型、请求参数说明</p>\n<p>返回参数说明</p>\n<p>返回示例</p>\n<h3 id=\"6-接口测试分类\"><a href=\"#6-接口测试分类\" class=\"headerlink\" title=\"6.接口测试分类\"></a>6.接口测试分类</h3><p>（1）功能测试：<br>由于是针对基本业务功能进行测试，这部分是两种测试重合度最高的一块，开发同学通常所指的也主要是这部分的内容。<br>测试覆盖：业务流程，参数类型、可选项等。</p>\n<p>（2）边界分析测试：<br>在基本功能测试的基础上考虑输入输出的边界条件。相对来说接口可以覆盖的范围很广，同样的，接口出现问题的概率也更高。<br>测试覆盖：边界值、特殊字符等。</p>\n<p>（3）性能测试：<br>接口性能主要关注接口响应时间、并发、服务端资源的使用情况等。越靠近底层，对于系统的性能优化越有利。<br>测试覆盖：并发数、吞吐量、tps等</p>\n<h3 id=\"7-接口测试工具\"><a href=\"#7-接口测试工具\" class=\"headerlink\" title=\"7.接口测试工具\"></a>7.接口测试工具</h3><p>Postman，jmeter，soupUI等测试工具。</p>\n<h2 id=\"测试用例基本概念拓展\"><a href=\"#测试用例基本概念拓展\" class=\"headerlink\" title=\"测试用例基本概念拓展\"></a>测试用例基本概念拓展</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>简单来说，测试用例就是一个文档，描述输入、输出、动作、时间等，其目的是确定应用程序的某个特性是否正常工作，并且达到程序所设计的期望结果。</p></blockquote>\n<h3 id=\"测试用例的作用\"><a href=\"#测试用例的作用\" class=\"headerlink\" title=\"测试用例的作用\"></a>测试用例的作用</h3><ul>\n<li>有效性</li>\n</ul>\n<p>避免穷举测试，选取代表性的测试数据进行测试，节省时间和资源，提高测试效率</p>\n<ul>\n<li>避免测试的盲目性</li>\n</ul>\n<p>开始测试之前设计好测试用例，避免盲目测试，使得重点突出、目的明确</p>\n<ul>\n<li>可维护性</li>\n</ul>\n<p>软件版本更新后，只需部分修正测试用例即可继续开展，降低工作强度，缩短项目周期</p>\n<ul>\n<li>可复用性</li>\n</ul>\n<p>项目功能的模块化，使软件易于开发，使得测试过程事半功倍</p>\n<ul>\n<li>可评估性</li>\n</ul>\n<p>程序代码的质量的量化标准应该用测试用例的通过率和测试输出软件缺陷的数目来进行评估</p>\n<ul>\n<li>可管理性</li>\n</ul>\n<p>测试用例是测试人员的重要参考依据，也可以作为检验测试进度、测试工作量的因素，来对测试工作进行有效管理</p>\n<h3 id=\"测试用例的设计\"><a href=\"#测试用例的设计\" class=\"headerlink\" title=\"测试用例的设计\"></a>测试用例的设计</h3><p>通常由经验丰富的测试人员设计测试用例，经验较少的人员从执行测试用例开始进行，随着经验和技术的积累，再逐渐开始参与测试用例的设计工作。</p>\n<h3 id=\"tip1-测试设计说明\"><a href=\"#tip1-测试设计说明\" class=\"headerlink\" title=\"tip1.测试设计说明\"></a>tip1.测试设计说明</h3><p>类似开发人员有项目开发功能书一样，测试人员也要有说明书来指导测试人员如何设计测试用例，包括但不限于：被测特性、测试所用的方法、测试准则等。</p>\n<ul>\n<li><p>标识符</p>\n</li>\n<li><p>被测特性</p>\n</li>\n<li><p>方法</p>\n</li>\n<li><p>测试用例信息</p>\n</li>\n<li><p>通过/失败规则</p>\n</li>\n</ul>\n<h3 id=\"tip2-测试用例编写\"><a href=\"#tip2-测试用例编写\" class=\"headerlink\" title=\"tip2.测试用例编写\"></a>tip2.测试用例编写</h3><ul>\n<li>用例的编号</li>\n</ul>\n<p>由测试引用的唯一标识符，便于查找测试用例，也便于用例的追踪和管理</p>\n<ul>\n<li>测试标题</li>\n</ul>\n<p>对测试用例的描述，清楚表达用例的相关用途等</p>\n<ul>\n<li>测试项</li>\n</ul>\n<p>测试用例应该具体详细的描述所测试项的详细特征，更加详细具体</p>\n<ul>\n<li>测试环境要求</li>\n</ul>\n<p>该测试用例执行的外部条件，软硬件具体指标和测试工具等</p>\n<ul>\n<li>特殊要求</li>\n</ul>\n<p>对环境的特殊需求，如所需设备型号、对防火墙等的特殊设置</p>\n<ul>\n<li>测试输入说明</li>\n</ul>\n<p>提供测试执行中的各种输入条件。根据需求中的输入条件，确定测试用例的输入。</p>\n<ul>\n<li>操作步骤</li>\n</ul>\n<p>提供测试执行的过程步骤，对于复杂的用例，应该分为几个步骤分别完成测试。</p>\n<ul>\n<li>预期结果</li>\n</ul>\n<p>提供测试执行的预期结果，预期结果应该根据软件需求中的输出得出。如实际结果与预期结果不符合，则测试不通过。</p>\n<ul>\n<li>测试用例之间的关联</li>\n</ul>\n<p>用来标示该测试用例和其他测试用例之间的依赖关系。在实际测试中，很多测试用例并不是单独存在的，而是可能存在 某种相互依赖关系。</p>\n<ul>\n<li><p>测试用例设计人员和测试人员</p>\n</li>\n<li><p>测试优先级</p>\n</li>\n</ul>\n<p>一般分为0～4的一共5个等级，通过优先级来标注出软件测试的重点和先后顺序。</p>\n<h3 id=\"测试用例的分类和阶段\"><a href=\"#测试用例的分类和阶段\" class=\"headerlink\" title=\"测试用例的分类和阶段\"></a>测试用例的分类和阶段</h3><table>\n<thead>\n<tr>\n<th>测试阶段</th>\n<th align=\"center\">测试类型</th>\n<th align=\"right\">执行人员</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单元测试</td>\n<td align=\"center\">模块功能测试、部分接口测试、覆盖测试、路径测试</td>\n<td align=\"right\">开发与测试结合</td>\n</tr>\n<tr>\n<td>集成测试</td>\n<td align=\"center\">接口测试、路径测试、部分功能测试</td>\n<td align=\"right\">开发与测试结合或测试</td>\n</tr>\n<tr>\n<td>系统测试</td>\n<td align=\"center\">功能测试、兼容性测试、性能测试、用户界面测试、安全性测试、强度测试、可靠性测试</td>\n<td align=\"right\">测试人员</td>\n</tr>\n<tr>\n<td>验收测试</td>\n<td align=\"center\">对于实际项目基本同上、包含文档测试</td>\n<td align=\"right\">测试人员或包含用户</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"API接口测试入门\"><a href=\"#API接口测试入门\" class=\"headerlink\" title=\"API接口测试入门\"></a>API接口测试入门</h2><blockquote>\n<p>API是Application Programming Interface的简写，我们又把接口测试叫做API测试，主要用于实现多个系统之间或系统内部模块之间的通信和数据交换的能力。</p>\n</blockquote>\n<h3 id=\"1-接口定义\"><a href=\"#1-接口定义\" class=\"headerlink\" title=\"1.接口定义\"></a>1.接口定义</h3><p>接口测试主要用于系统与系统之间以及内部各个子系统或模块之间的交互点。定义特定的交互点，然后通过这些交互点，以及一些特殊的规则也就是协议，来进行数据之间的交互。前后端之间配合工作，就是其中一方定义实现接口，另一方来调用接口，以实现预期功能。</p>\n<p>举个简单的例子，我们在开车踩油门时，并不需要知道油门内部的零线/火线以及具体的电路结构，因为汽车制造商已经将给油的一系列操作全部封装成了油门这样一个接口，用户只要傻瓜式地进行踩油门的操作就可以让汽车实现加速。</p>\n<h3 id=\"2-接口分类\"><a href=\"#2-接口分类\" class=\"headerlink\" title=\"2.接口分类\"></a>2.接口分类</h3><blockquote>\n<p>WebService和HTTP</p>\n</blockquote>\n<p>（1）WebService接口走soap协议，请求报文和返回报文都是xml格式，通过SoapUI工具进行测试；</p>\n<p>（2）HTTP API接口走HTTP协议，通过路径来区分调用的方法，请求报文入参有多种形式，返回报文一般为json串，最常见的是get和post方法。</p>\n<h3 id=\"3-接口测试必要性\"><a href=\"#3-接口测试必要性\" class=\"headerlink\" title=\"3.接口测试必要性\"></a>3.接口测试必要性</h3><p>（1）效率上：<br>现在系统的复杂性与日俱增，传统测试方法人工成本过高且效率低下，而接口测试比较容易实现自动化集成，减少人工成本与时间，缩短测试周期；</p>\n<p>（2）安全上：<br>前后端架构分离，只依靠前端进行测试已经完全不能满足系统安全要求，绕过前面实在太容易，需要后端同样进行控制，在这种情况下就需要从接口层面验证。</p>\n<h3 id=\"4-接口测试原理\"><a href=\"#4-接口测试原理\" class=\"headerlink\" title=\"4.接口测试原理\"></a>4.接口测试原理</h3><p>通过程序模拟客户端向服务器发送请求报文，服务器接收请求报文后对报文做处理并向客户端返回应答，客户端再接收应答的一个过程。</p>\n<h3 id=\"5-接口文档关键部分\"><a href=\"#5-接口文档关键部分\" class=\"headerlink\" title=\"5.接口文档关键部分\"></a>5.接口文档关键部分</h3><p>接口说明</p>\n<p>调用的url</p>\n<p>请求方法（get、post）</p>\n<p>请求参数，参数类型、请求参数说明</p>\n<p>返回参数说明</p>\n<p>返回示例</p>\n<h3 id=\"6-接口测试分类\"><a href=\"#6-接口测试分类\" class=\"headerlink\" title=\"6.接口测试分类\"></a>6.接口测试分类</h3><p>（1）功能测试：<br>由于是针对基本业务功能进行测试，这部分是两种测试重合度最高的一块，开发同学通常所指的也主要是这部分的内容。<br>测试覆盖：业务流程，参数类型、可选项等。</p>\n<p>（2）边界分析测试：<br>在基本功能测试的基础上考虑输入输出的边界条件。相对来说接口可以覆盖的范围很广，同样的，接口出现问题的概率也更高。<br>测试覆盖：边界值、特殊字符等。</p>\n<p>（3）性能测试：<br>接口性能主要关注接口响应时间、并发、服务端资源的使用情况等。越靠近底层，对于系统的性能优化越有利。<br>测试覆盖：并发数、吞吐量、tps等</p>\n<h3 id=\"7-接口测试工具\"><a href=\"#7-接口测试工具\" class=\"headerlink\" title=\"7.接口测试工具\"></a>7.接口测试工具</h3><p>Postman，jmeter，soupUI等测试工具。</p>\n<h2 id=\"测试用例基本概念拓展\"><a href=\"#测试用例基本概念拓展\" class=\"headerlink\" title=\"测试用例基本概念拓展\"></a>测试用例基本概念拓展</h2><blockquote>\n<p>简单来说，测试用例就是一个文档，描述输入、输出、动作、时间等，其目的是确定应用程序的某个特性是否正常工作，并且达到程序所设计的期望结果。</p>\n</blockquote>\n<h3 id=\"测试用例的作用\"><a href=\"#测试用例的作用\" class=\"headerlink\" title=\"测试用例的作用\"></a>测试用例的作用</h3><ul>\n<li>有效性</li>\n</ul>\n<p>避免穷举测试，选取代表性的测试数据进行测试，节省时间和资源，提高测试效率</p>\n<ul>\n<li>避免测试的盲目性</li>\n</ul>\n<p>开始测试之前设计好测试用例，避免盲目测试，使得重点突出、目的明确</p>\n<ul>\n<li>可维护性</li>\n</ul>\n<p>软件版本更新后，只需部分修正测试用例即可继续开展，降低工作强度，缩短项目周期</p>\n<ul>\n<li>可复用性</li>\n</ul>\n<p>项目功能的模块化，使软件易于开发，使得测试过程事半功倍</p>\n<ul>\n<li>可评估性</li>\n</ul>\n<p>程序代码的质量的量化标准应该用测试用例的通过率和测试输出软件缺陷的数目来进行评估</p>\n<ul>\n<li>可管理性</li>\n</ul>\n<p>测试用例是测试人员的重要参考依据，也可以作为检验测试进度、测试工作量的因素，来对测试工作进行有效管理</p>\n<h3 id=\"测试用例的设计\"><a href=\"#测试用例的设计\" class=\"headerlink\" title=\"测试用例的设计\"></a>测试用例的设计</h3><p>通常由经验丰富的测试人员设计测试用例，经验较少的人员从执行测试用例开始进行，随着经验和技术的积累，再逐渐开始参与测试用例的设计工作。</p>\n<h3 id=\"tip1-测试设计说明\"><a href=\"#tip1-测试设计说明\" class=\"headerlink\" title=\"tip1.测试设计说明\"></a>tip1.测试设计说明</h3><p>类似开发人员有项目开发功能书一样，测试人员也要有说明书来指导测试人员如何设计测试用例，包括但不限于：被测特性、测试所用的方法、测试准则等。</p>\n<ul>\n<li><p>标识符</p>\n</li>\n<li><p>被测特性</p>\n</li>\n<li><p>方法</p>\n</li>\n<li><p>测试用例信息</p>\n</li>\n<li><p>通过/失败规则</p>\n</li>\n</ul>\n<h3 id=\"tip2-测试用例编写\"><a href=\"#tip2-测试用例编写\" class=\"headerlink\" title=\"tip2.测试用例编写\"></a>tip2.测试用例编写</h3><ul>\n<li>用例的编号</li>\n</ul>\n<p>由测试引用的唯一标识符，便于查找测试用例，也便于用例的追踪和管理</p>\n<ul>\n<li>测试标题</li>\n</ul>\n<p>对测试用例的描述，清楚表达用例的相关用途等</p>\n<ul>\n<li>测试项</li>\n</ul>\n<p>测试用例应该具体详细的描述所测试项的详细特征，更加详细具体</p>\n<ul>\n<li>测试环境要求</li>\n</ul>\n<p>该测试用例执行的外部条件，软硬件具体指标和测试工具等</p>\n<ul>\n<li>特殊要求</li>\n</ul>\n<p>对环境的特殊需求，如所需设备型号、对防火墙等的特殊设置</p>\n<ul>\n<li>测试输入说明</li>\n</ul>\n<p>提供测试执行中的各种输入条件。根据需求中的输入条件，确定测试用例的输入。</p>\n<ul>\n<li>操作步骤</li>\n</ul>\n<p>提供测试执行的过程步骤，对于复杂的用例，应该分为几个步骤分别完成测试。</p>\n<ul>\n<li>预期结果</li>\n</ul>\n<p>提供测试执行的预期结果，预期结果应该根据软件需求中的输出得出。如实际结果与预期结果不符合，则测试不通过。</p>\n<ul>\n<li>测试用例之间的关联</li>\n</ul>\n<p>用来标示该测试用例和其他测试用例之间的依赖关系。在实际测试中，很多测试用例并不是单独存在的，而是可能存在 某种相互依赖关系。</p>\n<ul>\n<li><p>测试用例设计人员和测试人员</p>\n</li>\n<li><p>测试优先级</p>\n</li>\n</ul>\n<p>一般分为0～4的一共5个等级，通过优先级来标注出软件测试的重点和先后顺序。</p>\n<h3 id=\"测试用例的分类和阶段\"><a href=\"#测试用例的分类和阶段\" class=\"headerlink\" title=\"测试用例的分类和阶段\"></a>测试用例的分类和阶段</h3><table>\n<thead>\n<tr>\n<th>测试阶段</th>\n<th align=\"center\">测试类型</th>\n<th align=\"right\">执行人员</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单元测试</td>\n<td align=\"center\">模块功能测试、部分接口测试、覆盖测试、路径测试</td>\n<td align=\"right\">开发与测试结合</td>\n</tr>\n<tr>\n<td>集成测试</td>\n<td align=\"center\">接口测试、路径测试、部分功能测试</td>\n<td align=\"right\">开发与测试结合或测试</td>\n</tr>\n<tr>\n<td>系统测试</td>\n<td align=\"center\">功能测试、兼容性测试、性能测试、用户界面测试、安全性测试、强度测试、可靠性测试</td>\n<td align=\"right\">测试人员</td>\n</tr>\n<tr>\n<td>验收测试</td>\n<td align=\"center\">对于实际项目基本同上、包含文档测试</td>\n<td align=\"right\">测试人员或包含用户</td>\n</tr>\n</tbody></table>\n"},{"layout":"post","title":"Shell脚本2小时速学","date":"2020-02-21T13:00:00.000Z","_content":"\n\n### Shell简介\n\nShell 是一个用 C 语言编写的程序，它是用户使用Linux的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。\n\n\n\n\n\n\n而Shell 脚本（shell script），是一种为 shell 编写的脚本程序。业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。\n\n### 创建第一个Shell脚本\n\n打开文本编辑器(我用的是macOS，可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用 php 写 shell 脚本，扩展名就用 php 好了。\n\n输入一些代码，第一行一般是这样：\n```\n#!/bin/bash\necho \"Hello World !\"\n```\n**#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。**\n\n### 运行第一个Shell脚本(1/2)\n\n> 1、作为可执行程序\n\n将上面的代码保存为 test.sh，并 cd 到相应目录：\n```\nchmod +x ./test.sh  #使脚本具有执行权限\n./test.sh  #执行脚本\n```\n注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。\n\n> 2、作为解释器参数\n\n这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：\n```\n/bin/sh test.sh\n/bin/php test.php\n```\n\n### 定义Shell变量\n\n定义变量时，变量名不加美元符号（$，PHP语言中变量需要）\n\n**注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：**\n\n+ 命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。\n+ 中间不能有空格，可以使用下划线（_）。\n+ 不能使用标点符号。\n+ 不能使用bash里的关键字（可用help命令查看保留关键字）。\n\n> 除了显式地直接赋值，还可以用语句给变量赋值，如：\n```\nfor file in `ls /etc`\n或\nfor file in $(ls /etc)\n```\n以上语句将 /etc 下目录的文件名循环出来。\n\n### 使用Shell变量\n\n使用一个定义过的变量，只要在变量名前面加美元符号即可，如：\n```php\nyour_name=\"qinjx\"\necho $your_name\necho ${your_name}\n```\n变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：\n```php\nfor skill in Ada Coffe Action Java; do\n    echo \"I am good at ${skill}Script\"\ndone\n```\n\n如果不给skill变量加花括号，写成echo \"I am good at $skillScript\"，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。\n\n**强烈推荐给所有变量加上花括号，这是个好的编程习惯。**\n\n> 已定义的变量，可以被重新定义\n\n\n","source":"_posts/2020-2-21-shell.md","raw":"---\nlayout: post\ntitle:  \"Shell脚本2小时速学\"\ndate: 2020-2-21 21:00:00\ncategories: Test\ntags: \n  - OS \n  - shell \n  - Test\n---\n\n\n### Shell简介\n\nShell 是一个用 C 语言编写的程序，它是用户使用Linux的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。\n\n\n\n\n\n\n而Shell 脚本（shell script），是一种为 shell 编写的脚本程序。业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。\n\n### 创建第一个Shell脚本\n\n打开文本编辑器(我用的是macOS，可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用 php 写 shell 脚本，扩展名就用 php 好了。\n\n输入一些代码，第一行一般是这样：\n```\n#!/bin/bash\necho \"Hello World !\"\n```\n**#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。**\n\n### 运行第一个Shell脚本(1/2)\n\n> 1、作为可执行程序\n\n将上面的代码保存为 test.sh，并 cd 到相应目录：\n```\nchmod +x ./test.sh  #使脚本具有执行权限\n./test.sh  #执行脚本\n```\n注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。\n\n> 2、作为解释器参数\n\n这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：\n```\n/bin/sh test.sh\n/bin/php test.php\n```\n\n### 定义Shell变量\n\n定义变量时，变量名不加美元符号（$，PHP语言中变量需要）\n\n**注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：**\n\n+ 命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。\n+ 中间不能有空格，可以使用下划线（_）。\n+ 不能使用标点符号。\n+ 不能使用bash里的关键字（可用help命令查看保留关键字）。\n\n> 除了显式地直接赋值，还可以用语句给变量赋值，如：\n```\nfor file in `ls /etc`\n或\nfor file in $(ls /etc)\n```\n以上语句将 /etc 下目录的文件名循环出来。\n\n### 使用Shell变量\n\n使用一个定义过的变量，只要在变量名前面加美元符号即可，如：\n```php\nyour_name=\"qinjx\"\necho $your_name\necho ${your_name}\n```\n变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：\n```php\nfor skill in Ada Coffe Action Java; do\n    echo \"I am good at ${skill}Script\"\ndone\n```\n\n如果不给skill变量加花括号，写成echo \"I am good at $skillScript\"，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。\n\n**强烈推荐给所有变量加上花括号，这是个好的编程习惯。**\n\n> 已定义的变量，可以被重新定义\n\n\n","slug":"2020-2-21-shell","published":1,"updated":"2021-09-20T11:40:49.898Z","comments":1,"photos":[],"link":"","_id":"ckugphtdw0006vev7c8u44wdj","content":"<h3 id=\"Shell简介\"><a href=\"#Shell简介\" class=\"headerlink\" title=\"Shell简介\"></a>Shell简介</h3><p>Shell 是一个用 C 语言编写的程序，它是用户使用Linux的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p>\n<p>而Shell 脚本（shell script），是一种为 shell 编写的脚本程序。业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。</p>\n<h3 id=\"创建第一个Shell脚本\"><a href=\"#创建第一个Shell脚本\" class=\"headerlink\" title=\"创建第一个Shell脚本\"></a>创建第一个Shell脚本</h3><p>打开文本编辑器(我用的是macOS，可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用 php 写 shell 脚本，扩展名就用 php 好了。</p>\n<p>输入一些代码，第一行一般是这样：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#!&#x2F;bin&#x2F;bash\necho &quot;Hello World !&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</strong></p>\n<h3 id=\"运行第一个Shell脚本-1-2\"><a href=\"#运行第一个Shell脚本-1-2\" class=\"headerlink\" title=\"运行第一个Shell脚本(1/2)\"></a>运行第一个Shell脚本(1/2)</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1、作为可执行程序</p></blockquote>\n<p>将上面的代码保存为 test.sh，并 cd 到相应目录：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">chmod +x .&#x2F;test.sh  #使脚本具有执行权限\n.&#x2F;test.sh  #执行脚本<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>2、作为解释器参数</p></blockquote>\n<p>这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;bin&#x2F;sh test.sh\n&#x2F;bin&#x2F;php test.php<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"定义Shell变量\"><a href=\"#定义Shell变量\" class=\"headerlink\" title=\"定义Shell变量\"></a>定义Shell变量</h3><p>定义变量时，变量名不加美元符号（$，PHP语言中变量需要）</p>\n<p><strong>注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：</strong></p>\n<ul>\n<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li>\n<li>中间不能有空格，可以使用下划线（_）。</li>\n<li>不能使用标点符号。</li>\n<li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>除了显式地直接赋值，还可以用语句给变量赋值，如：</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for file in &#96;ls &#x2F;etc&#96;\n或\nfor file in $(ls &#x2F;etc)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>以上语句将 /etc 下目录的文件名循环出来。</p>\n<h3 id=\"使用Shell变量\"><a href=\"#使用Shell变量\" class=\"headerlink\" title=\"使用Shell变量\"></a>使用Shell变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">your_name<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"qinjx\"</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$your_name</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">&#123;</span>your_name<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">for</span> skill in Ada Coffe Action Java<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"I am good at $&#123;skill&#125;Script\"</span>\ndone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果不给skill变量加花括号，写成echo “I am good at $skillScript”，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p>\n<p><strong>强烈推荐给所有变量加上花括号，这是个好的编程习惯。</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>已定义的变量，可以被重新定义</p></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Shell简介\"><a href=\"#Shell简介\" class=\"headerlink\" title=\"Shell简介\"></a>Shell简介</h3><p>Shell 是一个用 C 语言编写的程序，它是用户使用Linux的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p>\n<p>而Shell 脚本（shell script），是一种为 shell 编写的脚本程序。业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。</p>\n<h3 id=\"创建第一个Shell脚本\"><a href=\"#创建第一个Shell脚本\" class=\"headerlink\" title=\"创建第一个Shell脚本\"></a>创建第一个Shell脚本</h3><p>打开文本编辑器(我用的是macOS，可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用 php 写 shell 脚本，扩展名就用 php 好了。</p>\n<p>输入一些代码，第一行一般是这样：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#!&#x2F;bin&#x2F;bash\necho &quot;Hello World !&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</strong></p>\n<h3 id=\"运行第一个Shell脚本-1-2\"><a href=\"#运行第一个Shell脚本-1-2\" class=\"headerlink\" title=\"运行第一个Shell脚本(1/2)\"></a>运行第一个Shell脚本(1/2)</h3><blockquote>\n<p>1、作为可执行程序</p>\n</blockquote>\n<p>将上面的代码保存为 test.sh，并 cd 到相应目录：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">chmod +x .&#x2F;test.sh  #使脚本具有执行权限\n.&#x2F;test.sh  #执行脚本<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。</p>\n<blockquote>\n<p>2、作为解释器参数</p>\n</blockquote>\n<p>这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;bin&#x2F;sh test.sh\n&#x2F;bin&#x2F;php test.php<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"定义Shell变量\"><a href=\"#定义Shell变量\" class=\"headerlink\" title=\"定义Shell变量\"></a>定义Shell变量</h3><p>定义变量时，变量名不加美元符号（$，PHP语言中变量需要）</p>\n<p><strong>注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：</strong></p>\n<ul>\n<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li>\n<li>中间不能有空格，可以使用下划线（_）。</li>\n<li>不能使用标点符号。</li>\n<li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li>\n</ul>\n<blockquote>\n<p>除了显式地直接赋值，还可以用语句给变量赋值，如：</p>\n</blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for file in &#96;ls &#x2F;etc&#96;\n或\nfor file in $(ls &#x2F;etc)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>以上语句将 /etc 下目录的文件名循环出来。</p>\n<h3 id=\"使用Shell变量\"><a href=\"#使用Shell变量\" class=\"headerlink\" title=\"使用Shell变量\"></a>使用Shell变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">your_name<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"qinjx\"</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$your_name</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">&#123;</span>your_name<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">for</span> skill in Ada Coffe Action Java<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"I am good at $&#123;skill&#125;Script\"</span>\ndone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果不给skill变量加花括号，写成echo “I am good at $skillScript”，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p>\n<p><strong>强烈推荐给所有变量加上花括号，这是个好的编程习惯。</strong></p>\n<blockquote>\n<p>已定义的变量，可以被重新定义</p>\n</blockquote>\n"},{"layout":"post","title":"python实现常用测试模块","date":"2020-02-25T15:00:00.000Z","_content":"\n\n\n## 用python实现常用测试模块\n\n#### **python AES 加解密模块**\n\n> Definition：\n>\n> AES：高级加密标准(Advanced Encryption Standard)是最常见的对称加密算法之一，微信小程序就是用合格加密算法。\n\n对称加密算法也就是加密和解密使用相同的密钥，具体的流程图如下图所示：\n\n![pytest-1](https://zhychestercheung.github.io/photos/pytest-1.png)\n\n\n\n\n\n\n\nAES使用分组密码，分组密码也就是将明文分成一组一组的，每组的长度相等，每次加密一组数据，知道将整个明文都加密完成。在AES标准规范中，分组长度只能是128位，也就是说，每个分组16个字节（每个字节8位）。密钥的长度可以使用128位、192位、256位等。\n\n<u>密钥的长度不等，推荐加密的轮数也不相等。</u>\n\n**一般我们最常使用的就是AES-128，是密钥的长度为128位，加密轮数位10轮。**\n\n\n> AES加解密的流程中包括的主要步骤：\n\n明文分组 、字节代换、行位移、列混淆、轮密钥加\n\n\n\n> AES算法代码实现：\n\n```python\nimport sys\nfrom Crypto.Cipher import AES\nfrom binascii import b2a_hex, a2b_hex\n\nclass prpcrypt():\n  \n\tdef __init__(self, key):\n\t\tself.key = key.encode('utf-8') self.mode = AES.MODE_CBC\n\t\t# 加密函数，如果 text 不是 16 的倍数【加密文本 text 必须为 16 的倍数!】，那就补足为 16 的 倍数\n    \n\tdef encrypt(self, text):\n\t\ttext = text.encode('utf-8')\n\t\t# 创建一个新的 AES 密码\n\t\t# key 为对称加密中使用的密钥，mode_CBC 是 AES 五种加密模式中的密码分组链接模式 \n    cryptor = AES.new(self.key, self.mode, self.key)\n# 这里密钥 key 长度必须为 16(AES-128)、24(AES-192)、或 32(AES-256)Bytes 长\n#度.目前 AES-128 足够用 length = 16\n\t\tcount = len(text)\n\t\tif (count % length != 0):\n\t\t\tadd = length - (count % length) \n    else:\n\t\t\tadd = 0\n\t\ttext = text + ('\\0' * add).encode('utf-8')\n\t\t# 真正的加密操作，使用初始化时的密钥加密数据\n\t\tself.ciphertext = cryptor.encrypt(text)\n# 因为 AES 加密时候得到的字符串不一定是 ascii 字符集的，输出到终端或者保存时候可能存\n在问题\n# 所以这里统一把加密后的字符串转化为 16 进制字符串 \n\t\treturn b2a_hex(self.ciphertext)\n\n# 解密后，去掉补足的空格用 strip() 去掉 \n\tdef decrypt(self, text):\n\t\tcryptor = AES.new(self.key, self.mode, self.key)\n    plain_text = cryptor.decrypt(a2b_hex(text))\n# return plain_text.rstrip('\\0')\n\t\treturn bytes.decode(plain_text).rstrip('\\0')\n\nif __name__ == '__main__':\n\npc = prpcrypt('keyskeyskeyskeys') # 初始化密钥\ne = pc.encrypt(\"0123456789ABCDEF\") # 对输入明文进行加密 \nd = pc.decrypt(e) # 解密密文操作\nprint(e, d)\ne = pc.encrypt(\"00000000000000000000000000\")\nd = pc.decrypt(e)\nprint(e, d)\n```\n下面我们来看下代码的运行结果：\n\n![pytest-2](https://zhychestercheung.github.io/photos/pytest-2.png)\n\n\n#### **python unittest 单元测试模块**\n\n> unittest 是 python 的一个基础常用的单元测试框架，\n\n便于我们编写测试用例以及测试执行。其中中最核心的四个概念是:\n\n<p>test case</p>\n\n<p>test suite</p>\n\n<p>test runner</p>\n\n<p>test fixture</p>\n\n![pytest-3](https://zhychestercheung.github.io/photos/pytest-3.png)\n\n<u>unittest 进行单元测试的流程：</u>\n\n1. 写好 TestCase，然后由 TestLoader 加载 TestCase 到 TestSuite\n2. 然后由 TextTestRunner 来运行 TestSuite，运行的结果保存在 TextTestResult 中\n3. 我们通过命令行或者 unittest.main()执行时，main 会调用 TextTestRunner 中的 run 来执行，或者我们可以直接通过 TextTestRunner 来执行用 例。\n\n\n\n一个 class 继承 unittest.TestCase 即是一个 TestCase，其中以 test 开头的方法 在 load 时被加载为一个真正的 TestCase。\n\n在 TestRunner 中的 verbosity 参数可以控制执行结果的输出，0 是简单报告、1 是一般报告、2 是详细报告。\n\n\n\n下面完成一次基本的 unittest 单元测试：\n\n```python\n# 准备好待测函数\ndef add(a, b): \n  return a+b\ndef minus(a, b):\n  return a-b\ndef multi(a, b):\n  return a*b\ndef divide(a, b):\n  return a/b\n```\n\n然后写出待测函数的测试方法：\n\n```python\nimport unittest\nfrom mathfunc import *\n\nclass TestMathFunc(unittest.TestCase): \n  \"\"\"Test mathfuc.py\"\"\"\n\tdef setUp(cls):\n\t\tprint(\"do something before test.Prepare environment.\")\n\n  def tearDown(cls):\n\t\tprint(\"do something after test.Clean up.\")\n\n  def test_add(self):\n\t\t\"\"\"Test method add(a, b)\"\"\" \n    print(\"add\")\n\t\tself.assertEqual(3, add(1, 2)) \n    self.assertNotEqual(3, add(2, 2))\n\n  def test_minus(self):\n\t\t\"\"\"Test method minus(a, b)\"\"\" \n\t\tprint(\"minus\") \n    self.assertEqual(1, minus(3, 2))\n\n  def test_multi(self):\n\t\t\"\"\"Test method multi(a, b)\"\"\" \n    print(\"multi\") \n    self.assertEqual(6, multi(2, 3))\n\n  def test_divide(self):\n\t\t\"\"\"Test method divide(a, b)\"\"\"\n    print(\"divide\")\n\t\tself.assertEqual(2, divide(6, 3)) \n    self.assertEqual(2.5, divide(5, 2))\n    \nif __name__ == '__main__': \n  unittest.main()\n```\n\n以上代码已经可以完成一次简单的**单元测试**了，但是还无法按照指定的顺序 来执行测试用例。因此我们这里使用 suite 来控制每个 case 的先后执行顺序：同 时，如果同时有多个测试文件，我们也可以通过 suite 来控制他们进行一起执行。\n\n```python\n# -*- coding: utf-8 -*-\nimport unittest\nfrom test_mathfunc import TestMathFunc \nfrom HTMLTestRunner import HTMLTestRunner\n\nif __name__ == '__main__':\nsuite = unittest.TestSuite() suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestMathFunc)) \nwith open('UnittestTextReport.txt', 'a') as f:\nrunner = unittest.TextTestRunner(stream=f, verbosity=2)\nrunner.run(suite)\n```\n\n然后我们试着运行，可以看到运行结果如下：\n\n![pytest-4](https://zhychestercheung.github.io/photos/pytest-4.png)\n\n> 如果出现有 ok 的记号，则表示本次测试的结果为成功;如果出现 fail，则表 示测试结果出现问题，这时我们就需要寻找问题，看看测试结果问题在哪里。\n\n#### **python assert 断言**\n\n对于断言，官方有一段官方的解释:Assert statements are a convenient way toinsert debugging assertions into a program，其作用就是类似于我们 debug 的工具，\n\n一般的用法是:\n\n```python\nassert condition\n```\n\n用来让程序测试这个 condition，如果 condition 为 false，那么 raise 一个AssertionError 出来。逻辑上等同于:\n\n```python\n if not condition:\n     raise AssertionError()\n```\n\n我们来简单做一个小小的断言测试:\n\n```python\nassert 1==2, \"以下结果出现断言\"\n```\n\n结果如下：\n\n![pytest-5](https://zhychestercheung.github.io/photos/pytest-5.png)\n\n\n\n\n#### **python pyserial 串口模块**\n\npyserial 模块封装了对串口的访问。在支持的平台上有统一的接口，通过 python属性访问串口设置。支持不同的字节大小、停止位、校验位和流控设置。 \n\n在串口的配置中，有以下一些比较重要的属性需要我们了解：波特率、数据位、停止位、校验位、字节大小、读写超时设置等。 下面我们来看下对于串口的设置方法：\n\n```python\nimport sys\nimport glob\nimport time\nimport serial\nimport serial.tools.list_ports\n8\ndef serial_ports():\n\"\"\" Lists serial port names\n       :raises EnvironmentError:\n          On unsupported or unknown platforms\n       :returns:\n          A list of the serial ports available on the system\n\"\"\"\n# 如果是 windows 平台的系统，对应的串口号形式 if sys.platform.startswith('win'):\nports = ['COM%s' % (i + 1) for i in range(256)]\n# 如果是 Linux 平台的系统，对应的串口号形式\nelif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):\n# this excludes your current terminal \"/dev/tty\"\nports = glob.glob('/dev/tty[A-Za-z]*') # 如果是 OS X 的系统，对应的串口号形式\nelif sys.platform.startswith('darwin'):\nports = glob.glob('/dev/tty.*') else:\nraise EnvironmentError('Unsupported platform') result = []\n# 可以通过 Serial 函数对每一个串口进行控制其操作 for port in ports:\ntry:\ns = serial.Serial(port) s.close() result.append(port)\nexcept (OSError, serial.SerialException): pass\nreturn result\n# 这句命令可以在终端打印出所有的串口设备\nprint(list(serial.tools.list_ports.comports()))\nif __name__ == '__main__': print(serial_ports())\n```\n\n下面看下我电脑上打印出来的相关串口号，可以看到一共有 3 个，表示的是每个 串口分配到的地址：\n\n![pytest-6](https://zhychestercheung.github.io/photos/pytest-6.png)\n","source":"_posts/2020-2-25-pytest.md","raw":"---\nlayout: post\ntitle:  \"python实现常用测试模块\"\ndate: 2020-2-25 23:00:00\ncategories: Test\ntags: \n  - OS \n  - Test\n---\n\n\n\n## 用python实现常用测试模块\n\n#### **python AES 加解密模块**\n\n> Definition：\n>\n> AES：高级加密标准(Advanced Encryption Standard)是最常见的对称加密算法之一，微信小程序就是用合格加密算法。\n\n对称加密算法也就是加密和解密使用相同的密钥，具体的流程图如下图所示：\n\n![pytest-1](https://zhychestercheung.github.io/photos/pytest-1.png)\n\n\n\n\n\n\n\nAES使用分组密码，分组密码也就是将明文分成一组一组的，每组的长度相等，每次加密一组数据，知道将整个明文都加密完成。在AES标准规范中，分组长度只能是128位，也就是说，每个分组16个字节（每个字节8位）。密钥的长度可以使用128位、192位、256位等。\n\n<u>密钥的长度不等，推荐加密的轮数也不相等。</u>\n\n**一般我们最常使用的就是AES-128，是密钥的长度为128位，加密轮数位10轮。**\n\n\n> AES加解密的流程中包括的主要步骤：\n\n明文分组 、字节代换、行位移、列混淆、轮密钥加\n\n\n\n> AES算法代码实现：\n\n```python\nimport sys\nfrom Crypto.Cipher import AES\nfrom binascii import b2a_hex, a2b_hex\n\nclass prpcrypt():\n  \n\tdef __init__(self, key):\n\t\tself.key = key.encode('utf-8') self.mode = AES.MODE_CBC\n\t\t# 加密函数，如果 text 不是 16 的倍数【加密文本 text 必须为 16 的倍数!】，那就补足为 16 的 倍数\n    \n\tdef encrypt(self, text):\n\t\ttext = text.encode('utf-8')\n\t\t# 创建一个新的 AES 密码\n\t\t# key 为对称加密中使用的密钥，mode_CBC 是 AES 五种加密模式中的密码分组链接模式 \n    cryptor = AES.new(self.key, self.mode, self.key)\n# 这里密钥 key 长度必须为 16(AES-128)、24(AES-192)、或 32(AES-256)Bytes 长\n#度.目前 AES-128 足够用 length = 16\n\t\tcount = len(text)\n\t\tif (count % length != 0):\n\t\t\tadd = length - (count % length) \n    else:\n\t\t\tadd = 0\n\t\ttext = text + ('\\0' * add).encode('utf-8')\n\t\t# 真正的加密操作，使用初始化时的密钥加密数据\n\t\tself.ciphertext = cryptor.encrypt(text)\n# 因为 AES 加密时候得到的字符串不一定是 ascii 字符集的，输出到终端或者保存时候可能存\n在问题\n# 所以这里统一把加密后的字符串转化为 16 进制字符串 \n\t\treturn b2a_hex(self.ciphertext)\n\n# 解密后，去掉补足的空格用 strip() 去掉 \n\tdef decrypt(self, text):\n\t\tcryptor = AES.new(self.key, self.mode, self.key)\n    plain_text = cryptor.decrypt(a2b_hex(text))\n# return plain_text.rstrip('\\0')\n\t\treturn bytes.decode(plain_text).rstrip('\\0')\n\nif __name__ == '__main__':\n\npc = prpcrypt('keyskeyskeyskeys') # 初始化密钥\ne = pc.encrypt(\"0123456789ABCDEF\") # 对输入明文进行加密 \nd = pc.decrypt(e) # 解密密文操作\nprint(e, d)\ne = pc.encrypt(\"00000000000000000000000000\")\nd = pc.decrypt(e)\nprint(e, d)\n```\n下面我们来看下代码的运行结果：\n\n![pytest-2](https://zhychestercheung.github.io/photos/pytest-2.png)\n\n\n#### **python unittest 单元测试模块**\n\n> unittest 是 python 的一个基础常用的单元测试框架，\n\n便于我们编写测试用例以及测试执行。其中中最核心的四个概念是:\n\n<p>test case</p>\n\n<p>test suite</p>\n\n<p>test runner</p>\n\n<p>test fixture</p>\n\n![pytest-3](https://zhychestercheung.github.io/photos/pytest-3.png)\n\n<u>unittest 进行单元测试的流程：</u>\n\n1. 写好 TestCase，然后由 TestLoader 加载 TestCase 到 TestSuite\n2. 然后由 TextTestRunner 来运行 TestSuite，运行的结果保存在 TextTestResult 中\n3. 我们通过命令行或者 unittest.main()执行时，main 会调用 TextTestRunner 中的 run 来执行，或者我们可以直接通过 TextTestRunner 来执行用 例。\n\n\n\n一个 class 继承 unittest.TestCase 即是一个 TestCase，其中以 test 开头的方法 在 load 时被加载为一个真正的 TestCase。\n\n在 TestRunner 中的 verbosity 参数可以控制执行结果的输出，0 是简单报告、1 是一般报告、2 是详细报告。\n\n\n\n下面完成一次基本的 unittest 单元测试：\n\n```python\n# 准备好待测函数\ndef add(a, b): \n  return a+b\ndef minus(a, b):\n  return a-b\ndef multi(a, b):\n  return a*b\ndef divide(a, b):\n  return a/b\n```\n\n然后写出待测函数的测试方法：\n\n```python\nimport unittest\nfrom mathfunc import *\n\nclass TestMathFunc(unittest.TestCase): \n  \"\"\"Test mathfuc.py\"\"\"\n\tdef setUp(cls):\n\t\tprint(\"do something before test.Prepare environment.\")\n\n  def tearDown(cls):\n\t\tprint(\"do something after test.Clean up.\")\n\n  def test_add(self):\n\t\t\"\"\"Test method add(a, b)\"\"\" \n    print(\"add\")\n\t\tself.assertEqual(3, add(1, 2)) \n    self.assertNotEqual(3, add(2, 2))\n\n  def test_minus(self):\n\t\t\"\"\"Test method minus(a, b)\"\"\" \n\t\tprint(\"minus\") \n    self.assertEqual(1, minus(3, 2))\n\n  def test_multi(self):\n\t\t\"\"\"Test method multi(a, b)\"\"\" \n    print(\"multi\") \n    self.assertEqual(6, multi(2, 3))\n\n  def test_divide(self):\n\t\t\"\"\"Test method divide(a, b)\"\"\"\n    print(\"divide\")\n\t\tself.assertEqual(2, divide(6, 3)) \n    self.assertEqual(2.5, divide(5, 2))\n    \nif __name__ == '__main__': \n  unittest.main()\n```\n\n以上代码已经可以完成一次简单的**单元测试**了，但是还无法按照指定的顺序 来执行测试用例。因此我们这里使用 suite 来控制每个 case 的先后执行顺序：同 时，如果同时有多个测试文件，我们也可以通过 suite 来控制他们进行一起执行。\n\n```python\n# -*- coding: utf-8 -*-\nimport unittest\nfrom test_mathfunc import TestMathFunc \nfrom HTMLTestRunner import HTMLTestRunner\n\nif __name__ == '__main__':\nsuite = unittest.TestSuite() suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestMathFunc)) \nwith open('UnittestTextReport.txt', 'a') as f:\nrunner = unittest.TextTestRunner(stream=f, verbosity=2)\nrunner.run(suite)\n```\n\n然后我们试着运行，可以看到运行结果如下：\n\n![pytest-4](https://zhychestercheung.github.io/photos/pytest-4.png)\n\n> 如果出现有 ok 的记号，则表示本次测试的结果为成功;如果出现 fail，则表 示测试结果出现问题，这时我们就需要寻找问题，看看测试结果问题在哪里。\n\n#### **python assert 断言**\n\n对于断言，官方有一段官方的解释:Assert statements are a convenient way toinsert debugging assertions into a program，其作用就是类似于我们 debug 的工具，\n\n一般的用法是:\n\n```python\nassert condition\n```\n\n用来让程序测试这个 condition，如果 condition 为 false，那么 raise 一个AssertionError 出来。逻辑上等同于:\n\n```python\n if not condition:\n     raise AssertionError()\n```\n\n我们来简单做一个小小的断言测试:\n\n```python\nassert 1==2, \"以下结果出现断言\"\n```\n\n结果如下：\n\n![pytest-5](https://zhychestercheung.github.io/photos/pytest-5.png)\n\n\n\n\n#### **python pyserial 串口模块**\n\npyserial 模块封装了对串口的访问。在支持的平台上有统一的接口，通过 python属性访问串口设置。支持不同的字节大小、停止位、校验位和流控设置。 \n\n在串口的配置中，有以下一些比较重要的属性需要我们了解：波特率、数据位、停止位、校验位、字节大小、读写超时设置等。 下面我们来看下对于串口的设置方法：\n\n```python\nimport sys\nimport glob\nimport time\nimport serial\nimport serial.tools.list_ports\n8\ndef serial_ports():\n\"\"\" Lists serial port names\n       :raises EnvironmentError:\n          On unsupported or unknown platforms\n       :returns:\n          A list of the serial ports available on the system\n\"\"\"\n# 如果是 windows 平台的系统，对应的串口号形式 if sys.platform.startswith('win'):\nports = ['COM%s' % (i + 1) for i in range(256)]\n# 如果是 Linux 平台的系统，对应的串口号形式\nelif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):\n# this excludes your current terminal \"/dev/tty\"\nports = glob.glob('/dev/tty[A-Za-z]*') # 如果是 OS X 的系统，对应的串口号形式\nelif sys.platform.startswith('darwin'):\nports = glob.glob('/dev/tty.*') else:\nraise EnvironmentError('Unsupported platform') result = []\n# 可以通过 Serial 函数对每一个串口进行控制其操作 for port in ports:\ntry:\ns = serial.Serial(port) s.close() result.append(port)\nexcept (OSError, serial.SerialException): pass\nreturn result\n# 这句命令可以在终端打印出所有的串口设备\nprint(list(serial.tools.list_ports.comports()))\nif __name__ == '__main__': print(serial_ports())\n```\n\n下面看下我电脑上打印出来的相关串口号，可以看到一共有 3 个，表示的是每个 串口分配到的地址：\n\n![pytest-6](https://zhychestercheung.github.io/photos/pytest-6.png)\n","slug":"2020-2-25-pytest","published":1,"updated":"2021-09-20T11:41:13.430Z","comments":1,"photos":[],"link":"","_id":"ckugphte90007vev7am5bensq","content":"<h2 id=\"用python实现常用测试模块\"><a href=\"#用python实现常用测试模块\" class=\"headerlink\" title=\"用python实现常用测试模块\"></a>用python实现常用测试模块</h2><h4 id=\"python-AES-加解密模块\"><a href=\"#python-AES-加解密模块\" class=\"headerlink\" title=\"python AES 加解密模块\"></a><strong>python AES 加解密模块</strong></h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Definition：</p>\n<p>AES：高级加密标准(Advanced Encryption Standard)是最常见的对称加密算法之一，微信小程序就是用合格加密算法。</p></blockquote>\n<p>对称加密算法也就是加密和解密使用相同的密钥，具体的流程图如下图所示：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-1.png\" alt=\"pytest-1\"></p>\n<p>AES使用分组密码，分组密码也就是将明文分成一组一组的，每组的长度相等，每次加密一组数据，知道将整个明文都加密完成。在AES标准规范中，分组长度只能是128位，也就是说，每个分组16个字节（每个字节8位）。密钥的长度可以使用128位、192位、256位等。</p>\n<p><u>密钥的长度不等，推荐加密的轮数也不相等。</u></p>\n<p><strong>一般我们最常使用的就是AES-128，是密钥的长度为128位，加密轮数位10轮。</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>AES加解密的流程中包括的主要步骤：</p></blockquote>\n<p>明文分组 、字节代换、行位移、列混淆、轮密钥加</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>AES算法代码实现：</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES\n<span class=\"token keyword\">from</span> binascii <span class=\"token keyword\">import</span> b2a_hex<span class=\"token punctuation\">,</span> a2b_hex\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">prpcrypt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  \n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> self<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>MODE_CBC\n\t\t<span class=\"token comment\"># 加密函数，如果 text 不是 16 的倍数【加密文本 text 必须为 16 的倍数!】，那就补足为 16 的 倍数</span>\n    \n\t<span class=\"token keyword\">def</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\ttext <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\"># 创建一个新的 AES 密码</span>\n\t\t<span class=\"token comment\"># key 为对称加密中使用的密钥，mode_CBC 是 AES 五种加密模式中的密码分组链接模式 </span>\n    cryptor <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 这里密钥 key 长度必须为 16(AES-128)、24(AES-192)、或 32(AES-256)Bytes 长</span>\n<span class=\"token comment\">#度.目前 AES-128 足够用 length = 16</span>\n\t\tcount <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">%</span> length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\tadd <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">%</span> length<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\tadd <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\ttext <span class=\"token operator\">=</span> text <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'\\0'</span> <span class=\"token operator\">*</span> add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\"># 真正的加密操作，使用初始化时的密钥加密数据</span>\n\t\tself<span class=\"token punctuation\">.</span>ciphertext <span class=\"token operator\">=</span> cryptor<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 因为 AES 加密时候得到的字符串不一定是 ascii 字符集的，输出到终端或者保存时候可能存</span>\n在问题\n<span class=\"token comment\"># 所以这里统一把加密后的字符串转化为 16 进制字符串 </span>\n\t\t<span class=\"token keyword\">return</span> b2a_hex<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>ciphertext<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 解密后，去掉补足的空格用 strip() 去掉 </span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tcryptor <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n    plain_text <span class=\"token operator\">=</span> cryptor<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>a2b_hex<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># return plain_text.rstrip('\\0')</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>plain_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\npc <span class=\"token operator\">=</span> prpcrypt<span class=\"token punctuation\">(</span><span class=\"token string\">'keyskeyskeyskeys'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 初始化密钥</span>\ne <span class=\"token operator\">=</span> pc<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span><span class=\"token string\">\"0123456789ABCDEF\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对输入明文进行加密 </span>\nd <span class=\"token operator\">=</span> pc<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 解密密文操作</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\ne <span class=\"token operator\">=</span> pc<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span><span class=\"token string\">\"00000000000000000000000000\"</span><span class=\"token punctuation\">)</span>\nd <span class=\"token operator\">=</span> pc<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面我们来看下代码的运行结果：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-2.png\" alt=\"pytest-2\"></p>\n<h4 id=\"python-unittest-单元测试模块\"><a href=\"#python-unittest-单元测试模块\" class=\"headerlink\" title=\"python unittest 单元测试模块\"></a><strong>python unittest 单元测试模块</strong></h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>unittest 是 python 的一个基础常用的单元测试框架，</p></blockquote>\n<p>便于我们编写测试用例以及测试执行。其中中最核心的四个概念是:</p>\n<p>test case</p>\n\n<p>test suite</p>\n\n<p>test runner</p>\n\n<p>test fixture</p>\n\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-3.png\" alt=\"pytest-3\"></p>\n<p><u>unittest 进行单元测试的流程：</u></p>\n<ol>\n<li>写好 TestCase，然后由 TestLoader 加载 TestCase 到 TestSuite</li>\n<li>然后由 TextTestRunner 来运行 TestSuite，运行的结果保存在 TextTestResult 中</li>\n<li>我们通过命令行或者 unittest.main()执行时，main 会调用 TextTestRunner 中的 run 来执行，或者我们可以直接通过 TextTestRunner 来执行用 例。</li>\n</ol>\n<p>一个 class 继承 unittest.TestCase 即是一个 TestCase，其中以 test 开头的方法 在 load 时被加载为一个真正的 TestCase。</p>\n<p>在 TestRunner 中的 verbosity 参数可以控制执行结果的输出，0 是简单报告、1 是一般报告、2 是详细报告。</p>\n<p>下面完成一次基本的 unittest 单元测试：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 准备好待测函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b\n<span class=\"token keyword\">def</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">-</span>b\n<span class=\"token keyword\">def</span> <span class=\"token function\">multi</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">*</span>b\n<span class=\"token keyword\">def</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">/</span>b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后写出待测函数的测试方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> mathfunc <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestMathFunc</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n  <span class=\"token triple-quoted-string string\">\"\"\"Test mathfuc.py\"\"\"</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do something before test.Prepare environment.\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do something after test.Clean up.\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">test_add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token triple-quoted-string string\">\"\"\"Test method add(a, b)\"\"\"</span> \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">)</span>\n\t\tself<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    self<span class=\"token punctuation\">.</span>assertNotEqual<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">test_minus</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token triple-quoted-string string\">\"\"\"Test method minus(a, b)\"\"\"</span> \n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minus\"</span><span class=\"token punctuation\">)</span> \n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> minus<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">test_multi</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token triple-quoted-string string\">\"\"\"Test method multi(a, b)\"\"\"</span> \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"multi\"</span><span class=\"token punctuation\">)</span> \n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> multi<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">test_divide</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token triple-quoted-string string\">\"\"\"Test method divide(a, b)\"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"divide\"</span><span class=\"token punctuation\">)</span>\n\t\tself<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> divide<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> divide<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span> \n  unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上代码已经可以完成一次简单的<strong>单元测试</strong>了，但是还无法按照指定的顺序 来执行测试用例。因此我们这里使用 suite 来控制每个 case 的先后执行顺序：同 时，如果同时有多个测试文件，我们也可以通过 suite 来控制他们进行一起执行。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> test_mathfunc <span class=\"token keyword\">import</span> TestMathFunc \n<span class=\"token keyword\">from</span> HTMLTestRunner <span class=\"token keyword\">import</span> HTMLTestRunner\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\nsuite <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>TestSuite<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> suite<span class=\"token punctuation\">.</span>addTests<span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestLoader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>loadTestsFromTestCase<span class=\"token punctuation\">(</span>TestMathFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UnittestTextReport.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\nrunner <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>TextTestRunner<span class=\"token punctuation\">(</span>stream<span class=\"token operator\">=</span>f<span class=\"token punctuation\">,</span> verbosity<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nrunner<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>suite<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后我们试着运行，可以看到运行结果如下：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-4.png\" alt=\"pytest-4\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果出现有 ok 的记号，则表示本次测试的结果为成功;如果出现 fail，则表 示测试结果出现问题，这时我们就需要寻找问题，看看测试结果问题在哪里。</p></blockquote>\n<h4 id=\"python-assert-断言\"><a href=\"#python-assert-断言\" class=\"headerlink\" title=\"python assert 断言\"></a><strong>python assert 断言</strong></h4><p>对于断言，官方有一段官方的解释:Assert statements are a convenient way toinsert debugging assertions into a program，其作用就是类似于我们 debug 的工具，</p>\n<p>一般的用法是:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">assert</span> condition<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>用来让程序测试这个 condition，如果 condition 为 false，那么 raise 一个AssertionError 出来。逻辑上等同于:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> condition<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">raise</span> AssertionError<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>我们来简单做一个小小的断言测试:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">assert</span> <span class=\"token number\">1</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"以下结果出现断言\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果如下：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-5.png\" alt=\"pytest-5\"></p>\n<h4 id=\"python-pyserial-串口模块\"><a href=\"#python-pyserial-串口模块\" class=\"headerlink\" title=\"python pyserial 串口模块\"></a><strong>python pyserial 串口模块</strong></h4><p>pyserial 模块封装了对串口的访问。在支持的平台上有统一的接口，通过 python属性访问串口设置。支持不同的字节大小、停止位、校验位和流控设置。 </p>\n<p>在串口的配置中，有以下一些比较重要的属性需要我们了解：波特率、数据位、停止位、校验位、字节大小、读写超时设置等。 下面我们来看下对于串口的设置方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> glob\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> serial\n<span class=\"token keyword\">import</span> serial<span class=\"token punctuation\">.</span>tools<span class=\"token punctuation\">.</span>list_ports\n<span class=\"token number\">8</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">serial_ports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token triple-quoted-string string\">\"\"\" Lists serial port names\n       :raises EnvironmentError:\n          On unsupported or unknown platforms\n       :returns:\n          A list of the serial ports available on the system\n\"\"\"</span>\n<span class=\"token comment\"># 如果是 windows 平台的系统，对应的串口号形式 if sys.platform.startswith('win'):</span>\nports <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'COM%s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 如果是 Linux 平台的系统，对应的串口号形式</span>\n<span class=\"token keyword\">elif</span> sys<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> sys<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'cygwin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># this excludes your current terminal \"/dev/tty\"</span>\nports <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">'/dev/tty[A-Za-z]*'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 如果是 OS X 的系统，对应的串口号形式</span>\n<span class=\"token keyword\">elif</span> sys<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'darwin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\nports <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">'/dev/tty.*'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">raise</span> EnvironmentError<span class=\"token punctuation\">(</span><span class=\"token string\">'Unsupported platform'</span><span class=\"token punctuation\">)</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 可以通过 Serial 函数对每一个串口进行控制其操作 for port in ports:</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\ns <span class=\"token operator\">=</span> serial<span class=\"token punctuation\">.</span>Serial<span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>OSError<span class=\"token punctuation\">,</span> serial<span class=\"token punctuation\">.</span>SerialException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">return</span> result\n<span class=\"token comment\"># 这句命令可以在终端打印出所有的串口设备</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>serial<span class=\"token punctuation\">.</span>tools<span class=\"token punctuation\">.</span>list_ports<span class=\"token punctuation\">.</span>comports<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>serial_ports<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面看下我电脑上打印出来的相关串口号，可以看到一共有 3 个，表示的是每个 串口分配到的地址：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-6.png\" alt=\"pytest-6\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"用python实现常用测试模块\"><a href=\"#用python实现常用测试模块\" class=\"headerlink\" title=\"用python实现常用测试模块\"></a>用python实现常用测试模块</h2><h4 id=\"python-AES-加解密模块\"><a href=\"#python-AES-加解密模块\" class=\"headerlink\" title=\"python AES 加解密模块\"></a><strong>python AES 加解密模块</strong></h4><blockquote>\n<p>Definition：</p>\n<p>AES：高级加密标准(Advanced Encryption Standard)是最常见的对称加密算法之一，微信小程序就是用合格加密算法。</p>\n</blockquote>\n<p>对称加密算法也就是加密和解密使用相同的密钥，具体的流程图如下图所示：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-1.png\" alt=\"pytest-1\"></p>\n<p>AES使用分组密码，分组密码也就是将明文分成一组一组的，每组的长度相等，每次加密一组数据，知道将整个明文都加密完成。在AES标准规范中，分组长度只能是128位，也就是说，每个分组16个字节（每个字节8位）。密钥的长度可以使用128位、192位、256位等。</p>\n<p><u>密钥的长度不等，推荐加密的轮数也不相等。</u></p>\n<p><strong>一般我们最常使用的就是AES-128，是密钥的长度为128位，加密轮数位10轮。</strong></p>\n<blockquote>\n<p>AES加解密的流程中包括的主要步骤：</p>\n</blockquote>\n<p>明文分组 、字节代换、行位移、列混淆、轮密钥加</p>\n<blockquote>\n<p>AES算法代码实现：</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> AES\n<span class=\"token keyword\">from</span> binascii <span class=\"token keyword\">import</span> b2a_hex<span class=\"token punctuation\">,</span> a2b_hex\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">prpcrypt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  \n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> self<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>MODE_CBC\n\t\t<span class=\"token comment\"># 加密函数，如果 text 不是 16 的倍数【加密文本 text 必须为 16 的倍数!】，那就补足为 16 的 倍数</span>\n    \n\t<span class=\"token keyword\">def</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\ttext <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\"># 创建一个新的 AES 密码</span>\n\t\t<span class=\"token comment\"># key 为对称加密中使用的密钥，mode_CBC 是 AES 五种加密模式中的密码分组链接模式 </span>\n    cryptor <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 这里密钥 key 长度必须为 16(AES-128)、24(AES-192)、或 32(AES-256)Bytes 长</span>\n<span class=\"token comment\">#度.目前 AES-128 足够用 length = 16</span>\n\t\tcount <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">%</span> length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\tadd <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">%</span> length<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\tadd <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\ttext <span class=\"token operator\">=</span> text <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'\\0'</span> <span class=\"token operator\">*</span> add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\"># 真正的加密操作，使用初始化时的密钥加密数据</span>\n\t\tself<span class=\"token punctuation\">.</span>ciphertext <span class=\"token operator\">=</span> cryptor<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 因为 AES 加密时候得到的字符串不一定是 ascii 字符集的，输出到终端或者保存时候可能存</span>\n在问题\n<span class=\"token comment\"># 所以这里统一把加密后的字符串转化为 16 进制字符串 </span>\n\t\t<span class=\"token keyword\">return</span> b2a_hex<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>ciphertext<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 解密后，去掉补足的空格用 strip() 去掉 </span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tcryptor <span class=\"token operator\">=</span> AES<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span>\n    plain_text <span class=\"token operator\">=</span> cryptor<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>a2b_hex<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># return plain_text.rstrip('\\0')</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>plain_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n\npc <span class=\"token operator\">=</span> prpcrypt<span class=\"token punctuation\">(</span><span class=\"token string\">'keyskeyskeyskeys'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 初始化密钥</span>\ne <span class=\"token operator\">=</span> pc<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span><span class=\"token string\">\"0123456789ABCDEF\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 对输入明文进行加密 </span>\nd <span class=\"token operator\">=</span> pc<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 解密密文操作</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\ne <span class=\"token operator\">=</span> pc<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span><span class=\"token string\">\"00000000000000000000000000\"</span><span class=\"token punctuation\">)</span>\nd <span class=\"token operator\">=</span> pc<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面我们来看下代码的运行结果：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-2.png\" alt=\"pytest-2\"></p>\n<h4 id=\"python-unittest-单元测试模块\"><a href=\"#python-unittest-单元测试模块\" class=\"headerlink\" title=\"python unittest 单元测试模块\"></a><strong>python unittest 单元测试模块</strong></h4><blockquote>\n<p>unittest 是 python 的一个基础常用的单元测试框架，</p>\n</blockquote>\n<p>便于我们编写测试用例以及测试执行。其中中最核心的四个概念是:</p>\n<p>test case</p>\n\n<p>test suite</p>\n\n<p>test runner</p>\n\n<p>test fixture</p>\n\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-3.png\" alt=\"pytest-3\"></p>\n<p><u>unittest 进行单元测试的流程：</u></p>\n<ol>\n<li>写好 TestCase，然后由 TestLoader 加载 TestCase 到 TestSuite</li>\n<li>然后由 TextTestRunner 来运行 TestSuite，运行的结果保存在 TextTestResult 中</li>\n<li>我们通过命令行或者 unittest.main()执行时，main 会调用 TextTestRunner 中的 run 来执行，或者我们可以直接通过 TextTestRunner 来执行用 例。</li>\n</ol>\n<p>一个 class 继承 unittest.TestCase 即是一个 TestCase，其中以 test 开头的方法 在 load 时被加载为一个真正的 TestCase。</p>\n<p>在 TestRunner 中的 verbosity 参数可以控制执行结果的输出，0 是简单报告、1 是一般报告、2 是详细报告。</p>\n<p>下面完成一次基本的 unittest 单元测试：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 准备好待测函数</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b\n<span class=\"token keyword\">def</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">-</span>b\n<span class=\"token keyword\">def</span> <span class=\"token function\">multi</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">*</span>b\n<span class=\"token keyword\">def</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token operator\">/</span>b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后写出待测函数的测试方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> mathfunc <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestMathFunc</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n  <span class=\"token triple-quoted-string string\">\"\"\"Test mathfuc.py\"\"\"</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do something before test.Prepare environment.\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do something after test.Clean up.\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">test_add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token triple-quoted-string string\">\"\"\"Test method add(a, b)\"\"\"</span> \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">)</span>\n\t\tself<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    self<span class=\"token punctuation\">.</span>assertNotEqual<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">test_minus</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token triple-quoted-string string\">\"\"\"Test method minus(a, b)\"\"\"</span> \n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minus\"</span><span class=\"token punctuation\">)</span> \n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> minus<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">test_multi</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token triple-quoted-string string\">\"\"\"Test method multi(a, b)\"\"\"</span> \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"multi\"</span><span class=\"token punctuation\">)</span> \n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> multi<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">test_divide</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token triple-quoted-string string\">\"\"\"Test method divide(a, b)\"\"\"</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"divide\"</span><span class=\"token punctuation\">)</span>\n\t\tself<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> divide<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> divide<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span> \n  unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上代码已经可以完成一次简单的<strong>单元测试</strong>了，但是还无法按照指定的顺序 来执行测试用例。因此我们这里使用 suite 来控制每个 case 的先后执行顺序：同 时，如果同时有多个测试文件，我们也可以通过 suite 来控制他们进行一起执行。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> unittest\n<span class=\"token keyword\">from</span> test_mathfunc <span class=\"token keyword\">import</span> TestMathFunc \n<span class=\"token keyword\">from</span> HTMLTestRunner <span class=\"token keyword\">import</span> HTMLTestRunner\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\nsuite <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>TestSuite<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> suite<span class=\"token punctuation\">.</span>addTests<span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestLoader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>loadTestsFromTestCase<span class=\"token punctuation\">(</span>TestMathFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UnittestTextReport.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\nrunner <span class=\"token operator\">=</span> unittest<span class=\"token punctuation\">.</span>TextTestRunner<span class=\"token punctuation\">(</span>stream<span class=\"token operator\">=</span>f<span class=\"token punctuation\">,</span> verbosity<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nrunner<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>suite<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后我们试着运行，可以看到运行结果如下：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-4.png\" alt=\"pytest-4\"></p>\n<blockquote>\n<p>如果出现有 ok 的记号，则表示本次测试的结果为成功;如果出现 fail，则表 示测试结果出现问题，这时我们就需要寻找问题，看看测试结果问题在哪里。</p>\n</blockquote>\n<h4 id=\"python-assert-断言\"><a href=\"#python-assert-断言\" class=\"headerlink\" title=\"python assert 断言\"></a><strong>python assert 断言</strong></h4><p>对于断言，官方有一段官方的解释:Assert statements are a convenient way toinsert debugging assertions into a program，其作用就是类似于我们 debug 的工具，</p>\n<p>一般的用法是:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">assert</span> condition<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>用来让程序测试这个 condition，如果 condition 为 false，那么 raise 一个AssertionError 出来。逻辑上等同于:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> condition<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">raise</span> AssertionError<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>我们来简单做一个小小的断言测试:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">assert</span> <span class=\"token number\">1</span><span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"以下结果出现断言\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果如下：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-5.png\" alt=\"pytest-5\"></p>\n<h4 id=\"python-pyserial-串口模块\"><a href=\"#python-pyserial-串口模块\" class=\"headerlink\" title=\"python pyserial 串口模块\"></a><strong>python pyserial 串口模块</strong></h4><p>pyserial 模块封装了对串口的访问。在支持的平台上有统一的接口，通过 python属性访问串口设置。支持不同的字节大小、停止位、校验位和流控设置。 </p>\n<p>在串口的配置中，有以下一些比较重要的属性需要我们了解：波特率、数据位、停止位、校验位、字节大小、读写超时设置等。 下面我们来看下对于串口的设置方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> glob\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> serial\n<span class=\"token keyword\">import</span> serial<span class=\"token punctuation\">.</span>tools<span class=\"token punctuation\">.</span>list_ports\n<span class=\"token number\">8</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">serial_ports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token triple-quoted-string string\">\"\"\" Lists serial port names\n       :raises EnvironmentError:\n          On unsupported or unknown platforms\n       :returns:\n          A list of the serial ports available on the system\n\"\"\"</span>\n<span class=\"token comment\"># 如果是 windows 平台的系统，对应的串口号形式 if sys.platform.startswith('win'):</span>\nports <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'COM%s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 如果是 Linux 平台的系统，对应的串口号形式</span>\n<span class=\"token keyword\">elif</span> sys<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> sys<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'cygwin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># this excludes your current terminal \"/dev/tty\"</span>\nports <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">'/dev/tty[A-Za-z]*'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 如果是 OS X 的系统，对应的串口号形式</span>\n<span class=\"token keyword\">elif</span> sys<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'darwin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\nports <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">'/dev/tty.*'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">raise</span> EnvironmentError<span class=\"token punctuation\">(</span><span class=\"token string\">'Unsupported platform'</span><span class=\"token punctuation\">)</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># 可以通过 Serial 函数对每一个串口进行控制其操作 for port in ports:</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\ns <span class=\"token operator\">=</span> serial<span class=\"token punctuation\">.</span>Serial<span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span> s<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>OSError<span class=\"token punctuation\">,</span> serial<span class=\"token punctuation\">.</span>SerialException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">pass</span>\n<span class=\"token keyword\">return</span> result\n<span class=\"token comment\"># 这句命令可以在终端打印出所有的串口设备</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>serial<span class=\"token punctuation\">.</span>tools<span class=\"token punctuation\">.</span>list_ports<span class=\"token punctuation\">.</span>comports<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>serial_ports<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>下面看下我电脑上打印出来的相关串口号，可以看到一共有 3 个，表示的是每个 串口分配到的地址：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/pytest-6.png\" alt=\"pytest-6\"></p>\n"},{"layout":"post","title":"Gtest单元测试框架","date":"2020-03-02T12:00:00.000Z","_content":"\n\n### 引言\n\n文章中将先介绍单元测试的相关概念，然后引入Google的开源C++单元测试框架Gtest，对C++的各种单元测试场景提供完备的支持，最后通过编译、运行Gtest自带的一个测试样例，介绍如何在Unix/Linux下使用Gtest。\n\n\n\n\n\n\n\n### 单元测试\n\n说到单元测试，大家应该不会陌生。作为软件开发过程中最底层级别的测试环节，单元测试一般由开发人员自己完成。它的目的是隔离程序部件，并证明这些单个部件满足预期的功能。在静态程序分析、代码检视之后进行单元测试，可以帮助我们在开发过程的早期发现问题。好的测试具备以下特点：\n\n> 1.独立性\n\n一个测试用例应该是独立的，所谓“独立”，即该测试用例的测试结果不受其他测试的影响\n\n> 2.有效的组织架构，清晰的命名。\n\n各个测试用例针对不同的测试对象，而对单个测试对象而言，又可能有多个测试用例对应该对象的多个功能。好的习惯是把这些用例以层次结构的形式组织起来，并使用清晰的命名，使得我们通过阅读用例名称即可明了该用例的功能。\n\n> 3.可移植、可复用。\n\n像我们对程序平台性无关的苛刻要求一样，对于优秀的测试，我们也期望做到在不同的操作系统、编译器间进行方便地移植。\n\n> 4.当用例失败时，提供尽可能多的有效信息。\n\n毋庸置疑，提示信息越是清晰和全面，越方便我们定位问题、高效地找出程序中的bug。\n\n如今有不少测试框架帮助我们完成单元测试，像针对C++的有Google Test、CppUnit，针对C的有CUnit，针对Java的有JUnit，这些测试框架为我们实现独立、可移植、可复用、有组织的测试提供了条件，使我们能够专注于编写程序功能相关的测试代码。下面介绍Gtest的使用方法。\n\n### Google C++单元测试框架\n\nGoogle C++单元测试框架（简称Gtest），可在多个平台上使用（包括Linux, Mac OS X, Windows, Cygwin和Symbian），它提供了丰富的断言、致命和非致命失败判断，能进行值参数化测试、类型参数化测试、“死亡测试”。Gtest是一个开源的项目，目前的代码发行版是1.6.0。\n\n\n","source":"_posts/2020-3-2-gtest.md","raw":"---\nlayout: post\ntitle:  \"Gtest单元测试框架\"\ndate: 2020-3-2 20:00:00\ncategories: Test\ntags: \n  - OS \n  - Test\n---\n\n\n### 引言\n\n文章中将先介绍单元测试的相关概念，然后引入Google的开源C++单元测试框架Gtest，对C++的各种单元测试场景提供完备的支持，最后通过编译、运行Gtest自带的一个测试样例，介绍如何在Unix/Linux下使用Gtest。\n\n\n\n\n\n\n\n### 单元测试\n\n说到单元测试，大家应该不会陌生。作为软件开发过程中最底层级别的测试环节，单元测试一般由开发人员自己完成。它的目的是隔离程序部件，并证明这些单个部件满足预期的功能。在静态程序分析、代码检视之后进行单元测试，可以帮助我们在开发过程的早期发现问题。好的测试具备以下特点：\n\n> 1.独立性\n\n一个测试用例应该是独立的，所谓“独立”，即该测试用例的测试结果不受其他测试的影响\n\n> 2.有效的组织架构，清晰的命名。\n\n各个测试用例针对不同的测试对象，而对单个测试对象而言，又可能有多个测试用例对应该对象的多个功能。好的习惯是把这些用例以层次结构的形式组织起来，并使用清晰的命名，使得我们通过阅读用例名称即可明了该用例的功能。\n\n> 3.可移植、可复用。\n\n像我们对程序平台性无关的苛刻要求一样，对于优秀的测试，我们也期望做到在不同的操作系统、编译器间进行方便地移植。\n\n> 4.当用例失败时，提供尽可能多的有效信息。\n\n毋庸置疑，提示信息越是清晰和全面，越方便我们定位问题、高效地找出程序中的bug。\n\n如今有不少测试框架帮助我们完成单元测试，像针对C++的有Google Test、CppUnit，针对C的有CUnit，针对Java的有JUnit，这些测试框架为我们实现独立、可移植、可复用、有组织的测试提供了条件，使我们能够专注于编写程序功能相关的测试代码。下面介绍Gtest的使用方法。\n\n### Google C++单元测试框架\n\nGoogle C++单元测试框架（简称Gtest），可在多个平台上使用（包括Linux, Mac OS X, Windows, Cygwin和Symbian），它提供了丰富的断言、致命和非致命失败判断，能进行值参数化测试、类型参数化测试、“死亡测试”。Gtest是一个开源的项目，目前的代码发行版是1.6.0。\n\n\n","slug":"2020-3-2-gtest","published":1,"updated":"2021-09-20T11:39:21.010Z","comments":1,"photos":[],"link":"","_id":"ckugphteb000bvev7hbha06ql","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>文章中将先介绍单元测试的相关概念，然后引入Google的开源C++单元测试框架Gtest，对C++的各种单元测试场景提供完备的支持，最后通过编译、运行Gtest自带的一个测试样例，介绍如何在Unix/Linux下使用Gtest。</p>\n<h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3><p>说到单元测试，大家应该不会陌生。作为软件开发过程中最底层级别的测试环节，单元测试一般由开发人员自己完成。它的目的是隔离程序部件，并证明这些单个部件满足预期的功能。在静态程序分析、代码检视之后进行单元测试，可以帮助我们在开发过程的早期发现问题。好的测试具备以下特点：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.独立性</p></blockquote>\n<p>一个测试用例应该是独立的，所谓“独立”，即该测试用例的测试结果不受其他测试的影响</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>2.有效的组织架构，清晰的命名。</p></blockquote>\n<p>各个测试用例针对不同的测试对象，而对单个测试对象而言，又可能有多个测试用例对应该对象的多个功能。好的习惯是把这些用例以层次结构的形式组织起来，并使用清晰的命名，使得我们通过阅读用例名称即可明了该用例的功能。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>3.可移植、可复用。</p></blockquote>\n<p>像我们对程序平台性无关的苛刻要求一样，对于优秀的测试，我们也期望做到在不同的操作系统、编译器间进行方便地移植。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>4.当用例失败时，提供尽可能多的有效信息。</p></blockquote>\n<p>毋庸置疑，提示信息越是清晰和全面，越方便我们定位问题、高效地找出程序中的bug。</p>\n<p>如今有不少测试框架帮助我们完成单元测试，像针对C++的有Google Test、CppUnit，针对C的有CUnit，针对Java的有JUnit，这些测试框架为我们实现独立、可移植、可复用、有组织的测试提供了条件，使我们能够专注于编写程序功能相关的测试代码。下面介绍Gtest的使用方法。</p>\n<h3 id=\"Google-C-单元测试框架\"><a href=\"#Google-C-单元测试框架\" class=\"headerlink\" title=\"Google C++单元测试框架\"></a>Google C++单元测试框架</h3><p>Google C++单元测试框架（简称Gtest），可在多个平台上使用（包括Linux, Mac OS X, Windows, Cygwin和Symbian），它提供了丰富的断言、致命和非致命失败判断，能进行值参数化测试、类型参数化测试、“死亡测试”。Gtest是一个开源的项目，目前的代码发行版是1.6.0。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>文章中将先介绍单元测试的相关概念，然后引入Google的开源C++单元测试框架Gtest，对C++的各种单元测试场景提供完备的支持，最后通过编译、运行Gtest自带的一个测试样例，介绍如何在Unix/Linux下使用Gtest。</p>\n<h3 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h3><p>说到单元测试，大家应该不会陌生。作为软件开发过程中最底层级别的测试环节，单元测试一般由开发人员自己完成。它的目的是隔离程序部件，并证明这些单个部件满足预期的功能。在静态程序分析、代码检视之后进行单元测试，可以帮助我们在开发过程的早期发现问题。好的测试具备以下特点：</p>\n<blockquote>\n<p>1.独立性</p>\n</blockquote>\n<p>一个测试用例应该是独立的，所谓“独立”，即该测试用例的测试结果不受其他测试的影响</p>\n<blockquote>\n<p>2.有效的组织架构，清晰的命名。</p>\n</blockquote>\n<p>各个测试用例针对不同的测试对象，而对单个测试对象而言，又可能有多个测试用例对应该对象的多个功能。好的习惯是把这些用例以层次结构的形式组织起来，并使用清晰的命名，使得我们通过阅读用例名称即可明了该用例的功能。</p>\n<blockquote>\n<p>3.可移植、可复用。</p>\n</blockquote>\n<p>像我们对程序平台性无关的苛刻要求一样，对于优秀的测试，我们也期望做到在不同的操作系统、编译器间进行方便地移植。</p>\n<blockquote>\n<p>4.当用例失败时，提供尽可能多的有效信息。</p>\n</blockquote>\n<p>毋庸置疑，提示信息越是清晰和全面，越方便我们定位问题、高效地找出程序中的bug。</p>\n<p>如今有不少测试框架帮助我们完成单元测试，像针对C++的有Google Test、CppUnit，针对C的有CUnit，针对Java的有JUnit，这些测试框架为我们实现独立、可移植、可复用、有组织的测试提供了条件，使我们能够专注于编写程序功能相关的测试代码。下面介绍Gtest的使用方法。</p>\n<h3 id=\"Google-C-单元测试框架\"><a href=\"#Google-C-单元测试框架\" class=\"headerlink\" title=\"Google C++单元测试框架\"></a>Google C++单元测试框架</h3><p>Google C++单元测试框架（简称Gtest），可在多个平台上使用（包括Linux, Mac OS X, Windows, Cygwin和Symbian），它提供了丰富的断言、致命和非致命失败判断，能进行值参数化测试、类型参数化测试、“死亡测试”。Gtest是一个开源的项目，目前的代码发行版是1.6.0。</p>\n"},{"layout":"post","title":"TOGAF企业架构体系","date":"2020-05-10T11:00:00.000Z","_content":"\n\n### TOGAF定义\n\nTOGAF 即 The Open Group Architecture Framework （开放组体系结构框架），是由致力于技术标准制定和推广的非盈利组织 The Open Group 制定的用于开发企业架构（Enterprise Architecture）的一套方法和工具。\n\n### 在介绍 TOGAF 之前，今天先来聊聊企业架构。\n\n企业架构由IT架构发展而来。所以在一些定义中，会把企业架构简单定义为企业信息系统建设的规划。\n\n> 上世纪七十年代美国军方想要建立一个牛X的系统来管理通讯指挥作战的所有相关资源，建立这个系统的方法后来形成理论并于2003年发展成 DoDAF （美国国防部体系架构框架）。在那之前，民间已经发展出好几个框架雏形。其中，1987美国人 John Zachman 发表论文首次提出了“信息系统架构框架”的概念（后改称“企业架构框架”），奠定了企业架构的理论基础。\n\n但其实现在我们讲的企业架构，一般包括业务架构（流程、组织）、应用架构（应用、服务）、数据架构（数据、信息）和技术架构（硬件、网络）这几方面内容。\n\n![TOGAF](http://csuzhang.info/photos/togaf.jpg)\n\n### 企业架构组成\n\n根据 TOGAF 的定义，企业是具有一系列共同目标的组织的集合。而企业架构则是为了有效地实现这一系列目标，去定义企业的结构和运作模式的概念蓝图（SearchCIO），是构成企业的所有关键元素和其关系的综合描述（Zachman），是通过创建、沟通和优化用以描述企业未来状态和发展的关键原则和模型以将业务愿景和战略转化成有效的企业变更的过程（Gartner）。\n\n就好比建一栋房子不是撸子袖子就去搬砖，需要有设计图纸，去决定房屋结构、构成部分、功能、空间关系等元素，而企业架构则是企业顶层设计的图纸。\n\n很多企业在进行信息化建设时，常常以技术为主导，把关注点放在当前问题的IT实现上，缺乏全局思考，与业务脱节，导致上线的新系统往往无法对业务提供有效支持，无法适应快速变化的需求；各系统间无法形成有效联动，也存在功能重复建设的情况。简单说来，就是管理层、IT人员和业务人员之间没有进行充分沟通并达成共识。\n\n数字化时代，“业务即IT，IT即业务”，已不能割裂来看业务与IT。在外部环境迅速变化、内部环境日益复杂的情况下，一个完备而科学的企业架构就显得极为重要。它可以在利益相关者（stakeholders）间、信息系统间、人与系统间搭建无障碍沟通的桥梁，保障各方拥有共同的理解与愿景。\n\n> 企业架构是承接企业业务战略与 IT战略之间的桥梁与标准接口，是企业信息化规划的核心。\n\n而企业架构框架，例如上面提到 TOGAF、Zachman、DoDAF 等，则是帮助企业全面、有序地去构建属于自己的企业架构的方法论和工具集。\n\n### 如何构建企业架构\n\n一来，并没有哪个企业架构框架适用于所有企业，企业需要根据自身情况选择合适的框架进行裁剪，借助框架进行企业架构的开发。TOGAF也说自己不是一个“one-size-fits-all”的框架。生搬硬套与全盘照抄是没有任何价值哒。\n\n二来，退一步说，企业架构定义不是一项简单工作，有一定的门槛，并不是处在所有发展阶段的所有企业都适合大力推行企业架构。对很多企业（特别是小微企业）来说，将重心放在方法论和工具的研究上不如老老实实地进行业务分析收效更快。就像在NBA球场上，战术体系的重要性不言而喻，然而现今很多年轻球队却是通过加快比赛节奏来赢球的，因为打磨体系太耗时间了。\n\n**总之，企业框架很重要，但是不能盲目崇拜和过分依赖。**\n\n目前较为主流和具备影响力的企业架构框架之一就是 TOGAF 啦。TOGAF 发展至今已有23年历史，2009年的市场占有率超过50%。TOGAF 在国外有 SAP、IBM 等公司在推动，在中国则于2009年由金蝶引入进行本地化和中文化工作。\n","source":"_posts/2020-5-10-TOGAF.md","raw":"---\nlayout: post\ntitle:  \"TOGAF企业架构体系\"\ndate: 2020-5-10 19:00:00\ncategories: thinking\ntags: thinking\n---\n\n\n### TOGAF定义\n\nTOGAF 即 The Open Group Architecture Framework （开放组体系结构框架），是由致力于技术标准制定和推广的非盈利组织 The Open Group 制定的用于开发企业架构（Enterprise Architecture）的一套方法和工具。\n\n### 在介绍 TOGAF 之前，今天先来聊聊企业架构。\n\n企业架构由IT架构发展而来。所以在一些定义中，会把企业架构简单定义为企业信息系统建设的规划。\n\n> 上世纪七十年代美国军方想要建立一个牛X的系统来管理通讯指挥作战的所有相关资源，建立这个系统的方法后来形成理论并于2003年发展成 DoDAF （美国国防部体系架构框架）。在那之前，民间已经发展出好几个框架雏形。其中，1987美国人 John Zachman 发表论文首次提出了“信息系统架构框架”的概念（后改称“企业架构框架”），奠定了企业架构的理论基础。\n\n但其实现在我们讲的企业架构，一般包括业务架构（流程、组织）、应用架构（应用、服务）、数据架构（数据、信息）和技术架构（硬件、网络）这几方面内容。\n\n![TOGAF](http://csuzhang.info/photos/togaf.jpg)\n\n### 企业架构组成\n\n根据 TOGAF 的定义，企业是具有一系列共同目标的组织的集合。而企业架构则是为了有效地实现这一系列目标，去定义企业的结构和运作模式的概念蓝图（SearchCIO），是构成企业的所有关键元素和其关系的综合描述（Zachman），是通过创建、沟通和优化用以描述企业未来状态和发展的关键原则和模型以将业务愿景和战略转化成有效的企业变更的过程（Gartner）。\n\n就好比建一栋房子不是撸子袖子就去搬砖，需要有设计图纸，去决定房屋结构、构成部分、功能、空间关系等元素，而企业架构则是企业顶层设计的图纸。\n\n很多企业在进行信息化建设时，常常以技术为主导，把关注点放在当前问题的IT实现上，缺乏全局思考，与业务脱节，导致上线的新系统往往无法对业务提供有效支持，无法适应快速变化的需求；各系统间无法形成有效联动，也存在功能重复建设的情况。简单说来，就是管理层、IT人员和业务人员之间没有进行充分沟通并达成共识。\n\n数字化时代，“业务即IT，IT即业务”，已不能割裂来看业务与IT。在外部环境迅速变化、内部环境日益复杂的情况下，一个完备而科学的企业架构就显得极为重要。它可以在利益相关者（stakeholders）间、信息系统间、人与系统间搭建无障碍沟通的桥梁，保障各方拥有共同的理解与愿景。\n\n> 企业架构是承接企业业务战略与 IT战略之间的桥梁与标准接口，是企业信息化规划的核心。\n\n而企业架构框架，例如上面提到 TOGAF、Zachman、DoDAF 等，则是帮助企业全面、有序地去构建属于自己的企业架构的方法论和工具集。\n\n### 如何构建企业架构\n\n一来，并没有哪个企业架构框架适用于所有企业，企业需要根据自身情况选择合适的框架进行裁剪，借助框架进行企业架构的开发。TOGAF也说自己不是一个“one-size-fits-all”的框架。生搬硬套与全盘照抄是没有任何价值哒。\n\n二来，退一步说，企业架构定义不是一项简单工作，有一定的门槛，并不是处在所有发展阶段的所有企业都适合大力推行企业架构。对很多企业（特别是小微企业）来说，将重心放在方法论和工具的研究上不如老老实实地进行业务分析收效更快。就像在NBA球场上，战术体系的重要性不言而喻，然而现今很多年轻球队却是通过加快比赛节奏来赢球的，因为打磨体系太耗时间了。\n\n**总之，企业框架很重要，但是不能盲目崇拜和过分依赖。**\n\n目前较为主流和具备影响力的企业架构框架之一就是 TOGAF 啦。TOGAF 发展至今已有23年历史，2009年的市场占有率超过50%。TOGAF 在国外有 SAP、IBM 等公司在推动，在中国则于2009年由金蝶引入进行本地化和中文化工作。\n","slug":"2020-5-10-TOGAF","published":1,"updated":"2021-09-20T11:36:51.946Z","comments":1,"photos":[],"link":"","_id":"ckugphtec000cvev7484a0f9i","content":"<h3 id=\"TOGAF定义\"><a href=\"#TOGAF定义\" class=\"headerlink\" title=\"TOGAF定义\"></a>TOGAF定义</h3><p>TOGAF 即 The Open Group Architecture Framework （开放组体系结构框架），是由致力于技术标准制定和推广的非盈利组织 The Open Group 制定的用于开发企业架构（Enterprise Architecture）的一套方法和工具。</p>\n<h3 id=\"在介绍-TOGAF-之前，今天先来聊聊企业架构。\"><a href=\"#在介绍-TOGAF-之前，今天先来聊聊企业架构。\" class=\"headerlink\" title=\"在介绍 TOGAF 之前，今天先来聊聊企业架构。\"></a>在介绍 TOGAF 之前，今天先来聊聊企业架构。</h3><p>企业架构由IT架构发展而来。所以在一些定义中，会把企业架构简单定义为企业信息系统建设的规划。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>上世纪七十年代美国军方想要建立一个牛X的系统来管理通讯指挥作战的所有相关资源，建立这个系统的方法后来形成理论并于2003年发展成 DoDAF （美国国防部体系架构框架）。在那之前，民间已经发展出好几个框架雏形。其中，1987美国人 John Zachman 发表论文首次提出了“信息系统架构框架”的概念（后改称“企业架构框架”），奠定了企业架构的理论基础。</p></blockquote>\n<p>但其实现在我们讲的企业架构，一般包括业务架构（流程、组织）、应用架构（应用、服务）、数据架构（数据、信息）和技术架构（硬件、网络）这几方面内容。</p>\n<p><img src=\"http://csuzhang.info/photos/togaf.jpg\" alt=\"TOGAF\"></p>\n<h3 id=\"企业架构组成\"><a href=\"#企业架构组成\" class=\"headerlink\" title=\"企业架构组成\"></a>企业架构组成</h3><p>根据 TOGAF 的定义，企业是具有一系列共同目标的组织的集合。而企业架构则是为了有效地实现这一系列目标，去定义企业的结构和运作模式的概念蓝图（SearchCIO），是构成企业的所有关键元素和其关系的综合描述（Zachman），是通过创建、沟通和优化用以描述企业未来状态和发展的关键原则和模型以将业务愿景和战略转化成有效的企业变更的过程（Gartner）。</p>\n<p>就好比建一栋房子不是撸子袖子就去搬砖，需要有设计图纸，去决定房屋结构、构成部分、功能、空间关系等元素，而企业架构则是企业顶层设计的图纸。</p>\n<p>很多企业在进行信息化建设时，常常以技术为主导，把关注点放在当前问题的IT实现上，缺乏全局思考，与业务脱节，导致上线的新系统往往无法对业务提供有效支持，无法适应快速变化的需求；各系统间无法形成有效联动，也存在功能重复建设的情况。简单说来，就是管理层、IT人员和业务人员之间没有进行充分沟通并达成共识。</p>\n<p>数字化时代，“业务即IT，IT即业务”，已不能割裂来看业务与IT。在外部环境迅速变化、内部环境日益复杂的情况下，一个完备而科学的企业架构就显得极为重要。它可以在利益相关者（stakeholders）间、信息系统间、人与系统间搭建无障碍沟通的桥梁，保障各方拥有共同的理解与愿景。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>企业架构是承接企业业务战略与 IT战略之间的桥梁与标准接口，是企业信息化规划的核心。</p></blockquote>\n<p>而企业架构框架，例如上面提到 TOGAF、Zachman、DoDAF 等，则是帮助企业全面、有序地去构建属于自己的企业架构的方法论和工具集。</p>\n<h3 id=\"如何构建企业架构\"><a href=\"#如何构建企业架构\" class=\"headerlink\" title=\"如何构建企业架构\"></a>如何构建企业架构</h3><p>一来，并没有哪个企业架构框架适用于所有企业，企业需要根据自身情况选择合适的框架进行裁剪，借助框架进行企业架构的开发。TOGAF也说自己不是一个“one-size-fits-all”的框架。生搬硬套与全盘照抄是没有任何价值哒。</p>\n<p>二来，退一步说，企业架构定义不是一项简单工作，有一定的门槛，并不是处在所有发展阶段的所有企业都适合大力推行企业架构。对很多企业（特别是小微企业）来说，将重心放在方法论和工具的研究上不如老老实实地进行业务分析收效更快。就像在NBA球场上，战术体系的重要性不言而喻，然而现今很多年轻球队却是通过加快比赛节奏来赢球的，因为打磨体系太耗时间了。</p>\n<p><strong>总之，企业框架很重要，但是不能盲目崇拜和过分依赖。</strong></p>\n<p>目前较为主流和具备影响力的企业架构框架之一就是 TOGAF 啦。TOGAF 发展至今已有23年历史，2009年的市场占有率超过50%。TOGAF 在国外有 SAP、IBM 等公司在推动，在中国则于2009年由金蝶引入进行本地化和中文化工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"TOGAF定义\"><a href=\"#TOGAF定义\" class=\"headerlink\" title=\"TOGAF定义\"></a>TOGAF定义</h3><p>TOGAF 即 The Open Group Architecture Framework （开放组体系结构框架），是由致力于技术标准制定和推广的非盈利组织 The Open Group 制定的用于开发企业架构（Enterprise Architecture）的一套方法和工具。</p>\n<h3 id=\"在介绍-TOGAF-之前，今天先来聊聊企业架构。\"><a href=\"#在介绍-TOGAF-之前，今天先来聊聊企业架构。\" class=\"headerlink\" title=\"在介绍 TOGAF 之前，今天先来聊聊企业架构。\"></a>在介绍 TOGAF 之前，今天先来聊聊企业架构。</h3><p>企业架构由IT架构发展而来。所以在一些定义中，会把企业架构简单定义为企业信息系统建设的规划。</p>\n<blockquote>\n<p>上世纪七十年代美国军方想要建立一个牛X的系统来管理通讯指挥作战的所有相关资源，建立这个系统的方法后来形成理论并于2003年发展成 DoDAF （美国国防部体系架构框架）。在那之前，民间已经发展出好几个框架雏形。其中，1987美国人 John Zachman 发表论文首次提出了“信息系统架构框架”的概念（后改称“企业架构框架”），奠定了企业架构的理论基础。</p>\n</blockquote>\n<p>但其实现在我们讲的企业架构，一般包括业务架构（流程、组织）、应用架构（应用、服务）、数据架构（数据、信息）和技术架构（硬件、网络）这几方面内容。</p>\n<p><img src=\"http://csuzhang.info/photos/togaf.jpg\" alt=\"TOGAF\"></p>\n<h3 id=\"企业架构组成\"><a href=\"#企业架构组成\" class=\"headerlink\" title=\"企业架构组成\"></a>企业架构组成</h3><p>根据 TOGAF 的定义，企业是具有一系列共同目标的组织的集合。而企业架构则是为了有效地实现这一系列目标，去定义企业的结构和运作模式的概念蓝图（SearchCIO），是构成企业的所有关键元素和其关系的综合描述（Zachman），是通过创建、沟通和优化用以描述企业未来状态和发展的关键原则和模型以将业务愿景和战略转化成有效的企业变更的过程（Gartner）。</p>\n<p>就好比建一栋房子不是撸子袖子就去搬砖，需要有设计图纸，去决定房屋结构、构成部分、功能、空间关系等元素，而企业架构则是企业顶层设计的图纸。</p>\n<p>很多企业在进行信息化建设时，常常以技术为主导，把关注点放在当前问题的IT实现上，缺乏全局思考，与业务脱节，导致上线的新系统往往无法对业务提供有效支持，无法适应快速变化的需求；各系统间无法形成有效联动，也存在功能重复建设的情况。简单说来，就是管理层、IT人员和业务人员之间没有进行充分沟通并达成共识。</p>\n<p>数字化时代，“业务即IT，IT即业务”，已不能割裂来看业务与IT。在外部环境迅速变化、内部环境日益复杂的情况下，一个完备而科学的企业架构就显得极为重要。它可以在利益相关者（stakeholders）间、信息系统间、人与系统间搭建无障碍沟通的桥梁，保障各方拥有共同的理解与愿景。</p>\n<blockquote>\n<p>企业架构是承接企业业务战略与 IT战略之间的桥梁与标准接口，是企业信息化规划的核心。</p>\n</blockquote>\n<p>而企业架构框架，例如上面提到 TOGAF、Zachman、DoDAF 等，则是帮助企业全面、有序地去构建属于自己的企业架构的方法论和工具集。</p>\n<h3 id=\"如何构建企业架构\"><a href=\"#如何构建企业架构\" class=\"headerlink\" title=\"如何构建企业架构\"></a>如何构建企业架构</h3><p>一来，并没有哪个企业架构框架适用于所有企业，企业需要根据自身情况选择合适的框架进行裁剪，借助框架进行企业架构的开发。TOGAF也说自己不是一个“one-size-fits-all”的框架。生搬硬套与全盘照抄是没有任何价值哒。</p>\n<p>二来，退一步说，企业架构定义不是一项简单工作，有一定的门槛，并不是处在所有发展阶段的所有企业都适合大力推行企业架构。对很多企业（特别是小微企业）来说，将重心放在方法论和工具的研究上不如老老实实地进行业务分析收效更快。就像在NBA球场上，战术体系的重要性不言而喻，然而现今很多年轻球队却是通过加快比赛节奏来赢球的，因为打磨体系太耗时间了。</p>\n<p><strong>总之，企业框架很重要，但是不能盲目崇拜和过分依赖。</strong></p>\n<p>目前较为主流和具备影响力的企业架构框架之一就是 TOGAF 啦。TOGAF 发展至今已有23年历史，2009年的市场占有率超过50%。TOGAF 在国外有 SAP、IBM 等公司在推动，在中国则于2009年由金蝶引入进行本地化和中文化工作。</p>\n"},{"layout":"post","title":"理解区分IaaS、SaaS、PaaS的含义和区别","date":"2020-06-10T12:00:00.000Z","feature":true,"_content":"\n\n相信你一定听说过IaaS、SaaS、PaaS等概念，这些都是云计算中的三个高大上的概念，但这几个术语其实并不好理解。不过，我们可以利用吃披萨🍕来给大家类比这几个概念的理解。\n\n### 类比披萨店吃披萨\n\n首先，一个吃货怎样才能吃到披萨呢？有以下几种方式：\n\n1. 在家自己做\n\n但是你要准备的东西很多，材料、工具、烤箱......还需要经过发面、做面团、进烤箱等工序才能完成\n\n2. 从披萨店买做好的披萨\n\n你只需要去披萨店买成品披萨，回家烘焙号了就可以在自己的餐桌上吃，和在家自己做不一样，你只需要一个pizza提供商\n\n3. 打电话叫外卖\n\n打个电话把披萨叫到家中，pizza就送到家中，但你需要自己准备桌椅、苏打水等\n\n4. 直接去披萨店吃\n\n你什么都不需要准备，连餐桌都是pizza店的\n\n下图就是我们可以吃到披萨的总结：\n\n![SaaS1](https://zhychestercheung.github.io/photos/SaaS1.jpg)\n\n### 企业端技术分层\n\n现在我们从披萨店变成一家超大型技术公司，根本不需要别人为我们提供服务，你拥有基础设施、应用等等一切，可以分为三层：基础设施infrastructure、平台platform、应用application\n\n![SaaS2](https://zhychestercheung.github.io/photos/SaaS2.jpg)\n\n这张图其实就是云计算的三个分层：\n基础设施在最底层、平台在中间层、软件应用在顶层，分别是：Infrastructure-as-a-Service(IaaS)，Platform-as-a-Service(PaaS)，Software-as-a-Service(SaaS)，别的一些“软的”层可以在这些层的基础上添加。\n\n1. 如果你的公司什么都有，现在所处的状态叫本地部署，就想自己在家做披萨一样。你需要购买服务器以及其他硬件设备来控制本地应用，让你的业务代码运行起来，这就叫本地部署。\n\n2. 假如有天boss想明白了，只是为了吃到pizza，没必要所有流程都自己完成。于是，他准备考虑一家云服务提供商，这个云服务提供商能提供哪些服务呢？\n","source":"_posts/2020-6-10-SaaS.md","raw":"---\nlayout: post\ntitle:  \"理解区分IaaS、SaaS、PaaS的含义和区别\"\ndate: 2020-6-10 20:00:00\ncategories: thinking\ntags: thinking\nfeature: true\n---\n\n\n相信你一定听说过IaaS、SaaS、PaaS等概念，这些都是云计算中的三个高大上的概念，但这几个术语其实并不好理解。不过，我们可以利用吃披萨🍕来给大家类比这几个概念的理解。\n\n### 类比披萨店吃披萨\n\n首先，一个吃货怎样才能吃到披萨呢？有以下几种方式：\n\n1. 在家自己做\n\n但是你要准备的东西很多，材料、工具、烤箱......还需要经过发面、做面团、进烤箱等工序才能完成\n\n2. 从披萨店买做好的披萨\n\n你只需要去披萨店买成品披萨，回家烘焙号了就可以在自己的餐桌上吃，和在家自己做不一样，你只需要一个pizza提供商\n\n3. 打电话叫外卖\n\n打个电话把披萨叫到家中，pizza就送到家中，但你需要自己准备桌椅、苏打水等\n\n4. 直接去披萨店吃\n\n你什么都不需要准备，连餐桌都是pizza店的\n\n下图就是我们可以吃到披萨的总结：\n\n![SaaS1](https://zhychestercheung.github.io/photos/SaaS1.jpg)\n\n### 企业端技术分层\n\n现在我们从披萨店变成一家超大型技术公司，根本不需要别人为我们提供服务，你拥有基础设施、应用等等一切，可以分为三层：基础设施infrastructure、平台platform、应用application\n\n![SaaS2](https://zhychestercheung.github.io/photos/SaaS2.jpg)\n\n这张图其实就是云计算的三个分层：\n基础设施在最底层、平台在中间层、软件应用在顶层，分别是：Infrastructure-as-a-Service(IaaS)，Platform-as-a-Service(PaaS)，Software-as-a-Service(SaaS)，别的一些“软的”层可以在这些层的基础上添加。\n\n1. 如果你的公司什么都有，现在所处的状态叫本地部署，就想自己在家做披萨一样。你需要购买服务器以及其他硬件设备来控制本地应用，让你的业务代码运行起来，这就叫本地部署。\n\n2. 假如有天boss想明白了，只是为了吃到pizza，没必要所有流程都自己完成。于是，他准备考虑一家云服务提供商，这个云服务提供商能提供哪些服务呢？\n","slug":"2020-6-10-SaaS","published":1,"updated":"2021-09-20T11:38:02.906Z","comments":1,"photos":[],"link":"","_id":"ckugphtes000gvev77i7bcpqy","content":"<p>相信你一定听说过IaaS、SaaS、PaaS等概念，这些都是云计算中的三个高大上的概念，但这几个术语其实并不好理解。不过，我们可以利用吃披萨🍕来给大家类比这几个概念的理解。</p>\n<h3 id=\"类比披萨店吃披萨\"><a href=\"#类比披萨店吃披萨\" class=\"headerlink\" title=\"类比披萨店吃披萨\"></a>类比披萨店吃披萨</h3><p>首先，一个吃货怎样才能吃到披萨呢？有以下几种方式：</p>\n<ol>\n<li>在家自己做</li>\n</ol>\n<p>但是你要准备的东西很多，材料、工具、烤箱……还需要经过发面、做面团、进烤箱等工序才能完成</p>\n<ol start=\"2\">\n<li>从披萨店买做好的披萨</li>\n</ol>\n<p>你只需要去披萨店买成品披萨，回家烘焙号了就可以在自己的餐桌上吃，和在家自己做不一样，你只需要一个pizza提供商</p>\n<ol start=\"3\">\n<li>打电话叫外卖</li>\n</ol>\n<p>打个电话把披萨叫到家中，pizza就送到家中，但你需要自己准备桌椅、苏打水等</p>\n<ol start=\"4\">\n<li>直接去披萨店吃</li>\n</ol>\n<p>你什么都不需要准备，连餐桌都是pizza店的</p>\n<p>下图就是我们可以吃到披萨的总结：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/SaaS1.jpg\" alt=\"SaaS1\"></p>\n<h3 id=\"企业端技术分层\"><a href=\"#企业端技术分层\" class=\"headerlink\" title=\"企业端技术分层\"></a>企业端技术分层</h3><p>现在我们从披萨店变成一家超大型技术公司，根本不需要别人为我们提供服务，你拥有基础设施、应用等等一切，可以分为三层：基础设施infrastructure、平台platform、应用application</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/SaaS2.jpg\" alt=\"SaaS2\"></p>\n<p>这张图其实就是云计算的三个分层：<br>基础设施在最底层、平台在中间层、软件应用在顶层，分别是：Infrastructure-as-a-Service(IaaS)，Platform-as-a-Service(PaaS)，Software-as-a-Service(SaaS)，别的一些“软的”层可以在这些层的基础上添加。</p>\n<ol>\n<li><p>如果你的公司什么都有，现在所处的状态叫本地部署，就想自己在家做披萨一样。你需要购买服务器以及其他硬件设备来控制本地应用，让你的业务代码运行起来，这就叫本地部署。</p>\n</li>\n<li><p>假如有天boss想明白了，只是为了吃到pizza，没必要所有流程都自己完成。于是，他准备考虑一家云服务提供商，这个云服务提供商能提供哪些服务呢？</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>相信你一定听说过IaaS、SaaS、PaaS等概念，这些都是云计算中的三个高大上的概念，但这几个术语其实并不好理解。不过，我们可以利用吃披萨🍕来给大家类比这几个概念的理解。</p>\n<h3 id=\"类比披萨店吃披萨\"><a href=\"#类比披萨店吃披萨\" class=\"headerlink\" title=\"类比披萨店吃披萨\"></a>类比披萨店吃披萨</h3><p>首先，一个吃货怎样才能吃到披萨呢？有以下几种方式：</p>\n<ol>\n<li>在家自己做</li>\n</ol>\n<p>但是你要准备的东西很多，材料、工具、烤箱……还需要经过发面、做面团、进烤箱等工序才能完成</p>\n<ol start=\"2\">\n<li>从披萨店买做好的披萨</li>\n</ol>\n<p>你只需要去披萨店买成品披萨，回家烘焙号了就可以在自己的餐桌上吃，和在家自己做不一样，你只需要一个pizza提供商</p>\n<ol start=\"3\">\n<li>打电话叫外卖</li>\n</ol>\n<p>打个电话把披萨叫到家中，pizza就送到家中，但你需要自己准备桌椅、苏打水等</p>\n<ol start=\"4\">\n<li>直接去披萨店吃</li>\n</ol>\n<p>你什么都不需要准备，连餐桌都是pizza店的</p>\n<p>下图就是我们可以吃到披萨的总结：</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/SaaS1.jpg\" alt=\"SaaS1\"></p>\n<h3 id=\"企业端技术分层\"><a href=\"#企业端技术分层\" class=\"headerlink\" title=\"企业端技术分层\"></a>企业端技术分层</h3><p>现在我们从披萨店变成一家超大型技术公司，根本不需要别人为我们提供服务，你拥有基础设施、应用等等一切，可以分为三层：基础设施infrastructure、平台platform、应用application</p>\n<p><img src=\"https://zhychestercheung.github.io/photos/SaaS2.jpg\" alt=\"SaaS2\"></p>\n<p>这张图其实就是云计算的三个分层：<br>基础设施在最底层、平台在中间层、软件应用在顶层，分别是：Infrastructure-as-a-Service(IaaS)，Platform-as-a-Service(PaaS)，Software-as-a-Service(SaaS)，别的一些“软的”层可以在这些层的基础上添加。</p>\n<ol>\n<li><p>如果你的公司什么都有，现在所处的状态叫本地部署，就想自己在家做披萨一样。你需要购买服务器以及其他硬件设备来控制本地应用，让你的业务代码运行起来，这就叫本地部署。</p>\n</li>\n<li><p>假如有天boss想明白了，只是为了吃到pizza，没必要所有流程都自己完成。于是，他准备考虑一家云服务提供商，这个云服务提供商能提供哪些服务呢？</p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckugphtc40001vev7ctyu7p1m","category_id":"ckugphtcy0003vev78tswe8je","_id":"ckugphter000evev71xktg3pb"},{"post_id":"ckugphtcl0002vev79yor57ms","category_id":"ckugphtcy0003vev78tswe8je","_id":"ckugphtf3000hvev71pf782a8"},{"post_id":"ckugphtdv0005vev715qf329m","category_id":"ckugphter000dvev772ov6a53","_id":"ckugphtf4000lvev7fx64bsd1"},{"post_id":"ckugphtdw0006vev7c8u44wdj","category_id":"ckugphter000dvev772ov6a53","_id":"ckugphtf5000pvev734q50zhh"},{"post_id":"ckugphte90007vev7am5bensq","category_id":"ckugphter000dvev772ov6a53","_id":"ckugphtf6000uvev76qekc7sw"},{"post_id":"ckugphteb000bvev7hbha06ql","category_id":"ckugphter000dvev772ov6a53","_id":"ckugphtf7000xvev73pqo2s5q"},{"post_id":"ckugphtec000cvev7484a0f9i","category_id":"ckugphtf6000tvev760w3ajvg","_id":"ckugphtf80011vev7hr211xwf"},{"post_id":"ckugphtes000gvev77i7bcpqy","category_id":"ckugphtf6000tvev760w3ajvg","_id":"ckugphtfk0014vev761jhclek"}],"PostTag":[{"post_id":"ckugphtc40001vev7ctyu7p1m","tag_id":"ckugphtdv0004vev7dnhxf5ca","_id":"ckugphteb000avev73uf7ei9v"},{"post_id":"ckugphtcl0002vev79yor57ms","tag_id":"ckugphtdv0004vev7dnhxf5ca","_id":"ckugphtf5000nvev701dof2g4"},{"post_id":"ckugphtcl0002vev79yor57ms","tag_id":"ckugphter000fvev7dssi95m9","_id":"ckugphtf5000qvev73546ayiu"},{"post_id":"ckugphtcl0002vev79yor57ms","tag_id":"ckugphtf3000jvev79bipd0p7","_id":"ckugphtf6000svev78gh436i1"},{"post_id":"ckugphtdv0005vev715qf329m","tag_id":"ckugphtdv0004vev7dnhxf5ca","_id":"ckugphtf7000wvev7h4v8cmen"},{"post_id":"ckugphtdv0005vev715qf329m","tag_id":"ckugphtf3000jvev79bipd0p7","_id":"ckugphtf7000yvev7e1joczq6"},{"post_id":"ckugphtdw0006vev7c8u44wdj","tag_id":"ckugphtdv0004vev7dnhxf5ca","_id":"ckugphtfk0013vev7gf8g8r5l"},{"post_id":"ckugphtdw0006vev7c8u44wdj","tag_id":"ckugphtf6000vvev76ba903af","_id":"ckugphtfk0015vev7496d4cnk"},{"post_id":"ckugphtdw0006vev7c8u44wdj","tag_id":"ckugphtf3000jvev79bipd0p7","_id":"ckugphtfk0017vev7h5hl23lb"},{"post_id":"ckugphte90007vev7am5bensq","tag_id":"ckugphtdv0004vev7dnhxf5ca","_id":"ckugphtfl0018vev7c8240vgh"},{"post_id":"ckugphte90007vev7am5bensq","tag_id":"ckugphtf3000jvev79bipd0p7","_id":"ckugphtfl001avev71wik9jn9"},{"post_id":"ckugphteb000bvev7hbha06ql","tag_id":"ckugphtdv0004vev7dnhxf5ca","_id":"ckugphtfl001bvev70ml602f2"},{"post_id":"ckugphteb000bvev7hbha06ql","tag_id":"ckugphtf3000jvev79bipd0p7","_id":"ckugphtfm001dvev76fev7mwk"},{"post_id":"ckugphtec000cvev7484a0f9i","tag_id":"ckugphtfl0019vev7bhvz3iea","_id":"ckugphtfm001evev7glqpbwg4"},{"post_id":"ckugphtes000gvev77i7bcpqy","tag_id":"ckugphtfl0019vev7bhvz3iea","_id":"ckugphtfm001fvev70nusca9t"}],"Tag":[{"name":"OS","_id":"ckugphtdv0004vev7dnhxf5ca"},{"name":"web","_id":"ckugphter000fvev7dssi95m9"},{"name":"Test","_id":"ckugphtf3000jvev79bipd0p7"},{"name":"shell","_id":"ckugphtf6000vvev76ba903af"},{"name":"thinking","_id":"ckugphtfl0019vev7bhvz3iea"}]}}